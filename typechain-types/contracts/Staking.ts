/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IStaking {
  export type StakingPlanStruct = {
    isActive: PromiseOrValue<boolean>;
    subscriptionCost: PromiseOrValue<BigNumberish>;
    subscriptionDuration: PromiseOrValue<BigNumberish>;
    stakingDuration: PromiseOrValue<BigNumberish>;
    apr: PromiseOrValue<BigNumberish>;
    totalStakesToken1No: PromiseOrValue<BigNumberish>;
    totalStakesToken2No: PromiseOrValue<BigNumberish>;
    totalStakedToken1: PromiseOrValue<BigNumberish>;
    totalStakedToken2: PromiseOrValue<BigNumberish>;
    currentToken1Locked: PromiseOrValue<BigNumberish>;
    currentToken2Locked: PromiseOrValue<BigNumberish>;
    totalClaimed: PromiseOrValue<BigNumberish>;
  };

  export type StakingPlanStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    isActive: boolean;
    subscriptionCost: BigNumber;
    subscriptionDuration: BigNumber;
    stakingDuration: BigNumber;
    apr: BigNumber;
    totalStakesToken1No: BigNumber;
    totalStakesToken2No: BigNumber;
    totalStakedToken1: BigNumber;
    totalStakedToken2: BigNumber;
    currentToken1Locked: BigNumber;
    currentToken2Locked: BigNumber;
    totalClaimed: BigNumber;
  };

  export type UserStakingInfoStruct = {
    totalClaimed: PromiseOrValue<BigNumberish>;
    currentToken1Staked: PromiseOrValue<BigNumberish>;
    currentToken2Staked: PromiseOrValue<BigNumberish>;
    isSubscribed: PromiseOrValue<boolean>;
    subscribedTill: PromiseOrValue<BigNumberish>;
  };

  export type UserStakingInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    totalClaimed: BigNumber;
    currentToken1Staked: BigNumber;
    currentToken2Staked: BigNumber;
    isSubscribed: boolean;
    subscribedTill: BigNumber;
  };

  export type StakeStruct = {
    amount: PromiseOrValue<BigNumberish>;
    timeStart: PromiseOrValue<BigNumberish>;
    timeEnd: PromiseOrValue<BigNumberish>;
    apr: PromiseOrValue<BigNumberish>;
    profit: PromiseOrValue<BigNumberish>;
    isClaimed: PromiseOrValue<boolean>;
    isToken2: PromiseOrValue<boolean>;
  };

  export type StakeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    amount: BigNumber;
    timeStart: BigNumber;
    timeEnd: BigNumber;
    apr: BigNumber;
    profit: BigNumber;
    isClaimed: boolean;
    isToken2: boolean;
  };

  export type StakeWithRewardsInfoStruct = {
    stake: IStaking.StakeStruct;
    reward: PromiseOrValue<BigNumberish>;
  };

  export type StakeWithRewardsInfoStructOutput = [
    IStaking.StakeStructOutput,
    BigNumber
  ] & { stake: IStaking.StakeStructOutput; reward: BigNumber };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    "BASE_POINTS_DIVIDER()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MIN_STAKE_LIMIT()": FunctionFragment;
    "TIME_STEP()": FunctionFragment;
    "addStakingPlan(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateStakeProfit(uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint256,bool,address)": FunctionFragment;
    "getAvailableStakeReward(uint256,address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStakingPlans()": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "getUserPlanInfo(uint256,address)": FunctionFragment;
    "getUserPlansInfo(address)": FunctionFragment;
    "getUserStakes(uint256,address)": FunctionFragment;
    "getUserStakesWithRewards(uint256,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasAnySubscription(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasSubscription(uint256,address)": FunctionFragment;
    "referralManager()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "shouldAddReferrerOnToken2Stake()": FunctionFragment;
    "squadsManager()": FunctionFragment;
    "stakingPlans(uint256)": FunctionFragment;
    "subscribe(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token1()": FunctionFragment;
    "token2()": FunctionFragment;
    "updateMinStakeLimit(uint256)": FunctionFragment;
    "updatePlanAPR(uint256,uint256)": FunctionFragment;
    "updatePlanActivity(uint256,bool)": FunctionFragment;
    "updatePlanDurationDays(uint256,uint256)": FunctionFragment;
    "updatePlanSubscriptionCost(uint256,uint256)": FunctionFragment;
    "updatePlanSubscriptionPeriod(uint256,uint256)": FunctionFragment;
    "updateReferralManager(address)": FunctionFragment;
    "updateRewardPool(address)": FunctionFragment;
    "updateShouldAddReferrerOnToken2Stake(bool)": FunctionFragment;
    "updateSquadsManager(address)": FunctionFragment;
    "updateTimeStep(uint256)": FunctionFragment;
    "updateToken1(address)": FunctionFragment;
    "updateToken2(address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAll(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_POINTS_DIVIDER"
      | "DEFAULT_ADMIN_ROLE"
      | "MIN_STAKE_LIMIT"
      | "TIME_STEP"
      | "addStakingPlan"
      | "calculateStakeProfit"
      | "deposit"
      | "getAvailableStakeReward"
      | "getRoleAdmin"
      | "getStakingPlans"
      | "getTimestamp"
      | "getUserPlanInfo"
      | "getUserPlansInfo"
      | "getUserStakes"
      | "getUserStakesWithRewards"
      | "grantRole"
      | "hasAnySubscription"
      | "hasRole"
      | "hasSubscription"
      | "referralManager"
      | "renounceRole"
      | "revokeRole"
      | "shouldAddReferrerOnToken2Stake"
      | "squadsManager"
      | "stakingPlans"
      | "subscribe"
      | "supportsInterface"
      | "token1"
      | "token2"
      | "updateMinStakeLimit"
      | "updatePlanAPR"
      | "updatePlanActivity"
      | "updatePlanDurationDays"
      | "updatePlanSubscriptionCost"
      | "updatePlanSubscriptionPeriod"
      | "updateReferralManager"
      | "updateRewardPool"
      | "updateShouldAddReferrerOnToken2Stake"
      | "updateSquadsManager"
      | "updateTimeStep"
      | "updateToken1"
      | "updateToken2"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_POINTS_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_STAKE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIME_STEP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addStakingPlan",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakeProfit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableStakeReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingPlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPlanInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPlansInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakesWithRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "referralManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldAddReferrerOnToken2Stake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "squadsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPlans",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "token2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMinStakeLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanAPR",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanActivity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanDurationDays",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSubscriptionCost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSubscriptionPeriod",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferralManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateShouldAddReferrerOnToken2Stake",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSquadsManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimeStep",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToken1",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToken2",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_POINTS_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_STAKE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIME_STEP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStakingPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakeProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableStakeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPlanInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPlansInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakesWithRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldAddReferrerOnToken2Stake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "squadsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMinStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanDurationDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSubscriptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateShouldAddReferrerOnToken2Stake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSquadsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimeStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateToken2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "ActivityChanged(uint256,bool)": EventFragment;
    "Claimed(address,uint256,uint256,uint256,bool,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Staked(address,uint256,uint256,uint256,uint256,bool,uint256)": EventFragment;
    "StakingPlanCreated(uint256,uint256,uint256)": EventFragment;
    "Subscribed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingPlanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
}

export interface ActivityChangedEventObject {
  planId: BigNumber;
  isActive: boolean;
}
export type ActivityChangedEvent = TypedEvent<
  [BigNumber, boolean],
  ActivityChangedEventObject
>;

export type ActivityChangedEventFilter = TypedEventFilter<ActivityChangedEvent>;

export interface ClaimedEventObject {
  user: string;
  planId: BigNumber;
  stakeIndex: BigNumber;
  amount: BigNumber;
  isToken2: boolean;
  timestamp: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakedEventObject {
  user: string;
  planId: BigNumber;
  stakeIndex: BigNumber;
  amount: BigNumber;
  profit: BigNumber;
  isToken2: boolean;
  timestamp: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface StakingPlanCreatedEventObject {
  planId: BigNumber;
  duration: BigNumber;
  apr: BigNumber;
}
export type StakingPlanCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  StakingPlanCreatedEventObject
>;

export type StakingPlanCreatedEventFilter =
  TypedEventFilter<StakingPlanCreatedEvent>;

export interface SubscribedEventObject {
  user: string;
  planId: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [string, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_POINTS_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIME_STEP(overrides?: CallOverrides): Promise<[BigNumber]>;

    addStakingPlan(
      subscriptionCost: PromiseOrValue<BigNumberish>,
      subscriptionDuration: PromiseOrValue<BigNumberish>,
      stakingDuration: PromiseOrValue<BigNumberish>,
      apr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateStakeProfit(
      planId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      planId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      isToken2: PromiseOrValue<boolean>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAvailableStakeReward(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStakingPlans(
      overrides?: CallOverrides
    ): Promise<[IStaking.StakingPlanStructOutput[]]>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserPlanInfo(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IStaking.UserStakingInfoStructOutput]>;

    getUserPlansInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IStaking.UserStakingInfoStructOutput[]]>;

    getUserStakes(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IStaking.StakeStructOutput[]]>;

    getUserStakesWithRewards(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IStaking.StakeWithRewardsInfoStructOutput[]]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSubscription(
      planId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    referralManager(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shouldAddReferrerOnToken2Stake(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    squadsManager(overrides?: CallOverrides): Promise<[string]>;

    stakingPlans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isActive: boolean;
        subscriptionCost: BigNumber;
        subscriptionDuration: BigNumber;
        stakingDuration: BigNumber;
        apr: BigNumber;
        totalStakesToken1No: BigNumber;
        totalStakesToken2No: BigNumber;
        totalStakedToken1: BigNumber;
        totalStakedToken2: BigNumber;
        currentToken1Locked: BigNumber;
        currentToken2Locked: BigNumber;
        totalClaimed: BigNumber;
      }
    >;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    token2(overrides?: CallOverrides): Promise<[string]>;

    updateMinStakeLimit(
      minLimit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanAPR(
      planId: PromiseOrValue<BigNumberish>,
      apr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanActivity(
      planId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanDurationDays(
      planId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanSubscriptionCost(
      planId: PromiseOrValue<BigNumberish>,
      cost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanSubscriptionPeriod(
      planId: PromiseOrValue<BigNumberish>,
      subscriptionDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateReferralManager(
      referralManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardPool(
      poolAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateShouldAddReferrerOnToken2Stake(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSquadsManager(
      squadsManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTimeStep(
      step_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateToken1(
      token1_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateToken2(
      token2_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      planId: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_POINTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

  addStakingPlan(
    subscriptionCost: PromiseOrValue<BigNumberish>,
    subscriptionDuration: PromiseOrValue<BigNumberish>,
    stakingDuration: PromiseOrValue<BigNumberish>,
    apr: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateStakeProfit(
    planId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    planId: PromiseOrValue<BigNumberish>,
    depositAmount: PromiseOrValue<BigNumberish>,
    isToken2: PromiseOrValue<boolean>,
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAvailableStakeReward(
    planId: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakingPlans(
    overrides?: CallOverrides
  ): Promise<IStaking.StakingPlanStructOutput[]>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getUserPlanInfo(
    planId: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStaking.UserStakingInfoStructOutput>;

  getUserPlansInfo(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStaking.UserStakingInfoStructOutput[]>;

  getUserStakes(
    planId: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStaking.StakeStructOutput[]>;

  getUserStakesWithRewards(
    planId: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStaking.StakeWithRewardsInfoStructOutput[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasAnySubscription(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSubscription(
    planId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  referralManager(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shouldAddReferrerOnToken2Stake(overrides?: CallOverrides): Promise<boolean>;

  squadsManager(overrides?: CallOverrides): Promise<string>;

  stakingPlans(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isActive: boolean;
      subscriptionCost: BigNumber;
      subscriptionDuration: BigNumber;
      stakingDuration: BigNumber;
      apr: BigNumber;
      totalStakesToken1No: BigNumber;
      totalStakesToken2No: BigNumber;
      totalStakedToken1: BigNumber;
      totalStakedToken2: BigNumber;
      currentToken1Locked: BigNumber;
      currentToken2Locked: BigNumber;
      totalClaimed: BigNumber;
    }
  >;

  subscribe(
    planId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token1(overrides?: CallOverrides): Promise<string>;

  token2(overrides?: CallOverrides): Promise<string>;

  updateMinStakeLimit(
    minLimit_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanAPR(
    planId: PromiseOrValue<BigNumberish>,
    apr: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanActivity(
    planId: PromiseOrValue<BigNumberish>,
    isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanDurationDays(
    planId: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanSubscriptionCost(
    planId: PromiseOrValue<BigNumberish>,
    cost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanSubscriptionPeriod(
    planId: PromiseOrValue<BigNumberish>,
    subscriptionDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateReferralManager(
    referralManager_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardPool(
    poolAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateShouldAddReferrerOnToken2Stake(
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSquadsManager(
    squadsManager_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTimeStep(
    step_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateToken1(
    token1_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateToken2(
    token2_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    planId: PromiseOrValue<BigNumberish>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    planId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_POINTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    addStakingPlan(
      subscriptionCost: PromiseOrValue<BigNumberish>,
      subscriptionDuration: PromiseOrValue<BigNumberish>,
      stakingDuration: PromiseOrValue<BigNumberish>,
      apr: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateStakeProfit(
      planId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      planId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      isToken2: PromiseOrValue<boolean>,
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableStakeReward(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakingPlans(
      overrides?: CallOverrides
    ): Promise<IStaking.StakingPlanStructOutput[]>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPlanInfo(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStaking.UserStakingInfoStructOutput>;

    getUserPlansInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStaking.UserStakingInfoStructOutput[]>;

    getUserStakes(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStaking.StakeStructOutput[]>;

    getUserStakesWithRewards(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStaking.StakeWithRewardsInfoStructOutput[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSubscription(
      planId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    referralManager(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldAddReferrerOnToken2Stake(overrides?: CallOverrides): Promise<boolean>;

    squadsManager(overrides?: CallOverrides): Promise<string>;

    stakingPlans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isActive: boolean;
        subscriptionCost: BigNumber;
        subscriptionDuration: BigNumber;
        stakingDuration: BigNumber;
        apr: BigNumber;
        totalStakesToken1No: BigNumber;
        totalStakesToken2No: BigNumber;
        totalStakedToken1: BigNumber;
        totalStakedToken2: BigNumber;
        currentToken1Locked: BigNumber;
        currentToken2Locked: BigNumber;
        totalClaimed: BigNumber;
      }
    >;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token1(overrides?: CallOverrides): Promise<string>;

    token2(overrides?: CallOverrides): Promise<string>;

    updateMinStakeLimit(
      minLimit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanAPR(
      planId: PromiseOrValue<BigNumberish>,
      apr: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanActivity(
      planId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanDurationDays(
      planId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanSubscriptionCost(
      planId: PromiseOrValue<BigNumberish>,
      cost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanSubscriptionPeriod(
      planId: PromiseOrValue<BigNumberish>,
      subscriptionDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferralManager(
      referralManager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardPool(
      poolAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateShouldAddReferrerOnToken2Stake(
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSquadsManager(
      squadsManager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTimeStep(
      step_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateToken1(
      token1_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateToken2(
      token2_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      planId: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActivityChanged(uint256,bool)"(
      planId?: PromiseOrValue<BigNumberish> | null,
      isActive?: null
    ): ActivityChangedEventFilter;
    ActivityChanged(
      planId?: PromiseOrValue<BigNumberish> | null,
      isActive?: null
    ): ActivityChangedEventFilter;

    "Claimed(address,uint256,uint256,uint256,bool,uint256)"(
      user?: PromiseOrValue<string> | null,
      planId?: PromiseOrValue<BigNumberish> | null,
      stakeIndex?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      isToken2?: null,
      timestamp?: null
    ): ClaimedEventFilter;
    Claimed(
      user?: PromiseOrValue<string> | null,
      planId?: PromiseOrValue<BigNumberish> | null,
      stakeIndex?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      isToken2?: null,
      timestamp?: null
    ): ClaimedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Staked(address,uint256,uint256,uint256,uint256,bool,uint256)"(
      user?: PromiseOrValue<string> | null,
      planId?: PromiseOrValue<BigNumberish> | null,
      stakeIndex?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      profit?: null,
      isToken2?: null,
      timestamp?: null
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      planId?: PromiseOrValue<BigNumberish> | null,
      stakeIndex?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      profit?: null,
      isToken2?: null,
      timestamp?: null
    ): StakedEventFilter;

    "StakingPlanCreated(uint256,uint256,uint256)"(
      planId?: PromiseOrValue<BigNumberish> | null,
      duration?: null,
      apr?: null
    ): StakingPlanCreatedEventFilter;
    StakingPlanCreated(
      planId?: PromiseOrValue<BigNumberish> | null,
      duration?: null,
      apr?: null
    ): StakingPlanCreatedEventFilter;

    "Subscribed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      planId?: PromiseOrValue<BigNumberish> | null
    ): SubscribedEventFilter;
    Subscribed(
      user?: PromiseOrValue<string> | null,
      planId?: PromiseOrValue<BigNumberish> | null
    ): SubscribedEventFilter;
  };

  estimateGas: {
    BASE_POINTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    addStakingPlan(
      subscriptionCost: PromiseOrValue<BigNumberish>,
      subscriptionDuration: PromiseOrValue<BigNumberish>,
      stakingDuration: PromiseOrValue<BigNumberish>,
      apr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateStakeProfit(
      planId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      planId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      isToken2: PromiseOrValue<boolean>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAvailableStakeReward(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingPlans(overrides?: CallOverrides): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPlanInfo(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPlansInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakes(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakesWithRewards(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSubscription(
      planId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralManager(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shouldAddReferrerOnToken2Stake(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    squadsManager(overrides?: CallOverrides): Promise<BigNumber>;

    stakingPlans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    token2(overrides?: CallOverrides): Promise<BigNumber>;

    updateMinStakeLimit(
      minLimit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanAPR(
      planId: PromiseOrValue<BigNumberish>,
      apr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanActivity(
      planId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanDurationDays(
      planId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanSubscriptionCost(
      planId: PromiseOrValue<BigNumberish>,
      cost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanSubscriptionPeriod(
      planId: PromiseOrValue<BigNumberish>,
      subscriptionDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateReferralManager(
      referralManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardPool(
      poolAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateShouldAddReferrerOnToken2Stake(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSquadsManager(
      squadsManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTimeStep(
      step_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateToken1(
      token1_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateToken2(
      token2_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      planId: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_POINTS_DIVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_STAKE_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIME_STEP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStakingPlan(
      subscriptionCost: PromiseOrValue<BigNumberish>,
      subscriptionDuration: PromiseOrValue<BigNumberish>,
      stakingDuration: PromiseOrValue<BigNumberish>,
      apr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateStakeProfit(
      planId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      planId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      isToken2: PromiseOrValue<boolean>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableStakeReward(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingPlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserPlanInfo(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPlansInfo(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakes(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakesWithRewards(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSubscription(
      planId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shouldAddReferrerOnToken2Stake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    squadsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingPlans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMinStakeLimit(
      minLimit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanAPR(
      planId: PromiseOrValue<BigNumberish>,
      apr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanActivity(
      planId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanDurationDays(
      planId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanSubscriptionCost(
      planId: PromiseOrValue<BigNumberish>,
      cost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanSubscriptionPeriod(
      planId: PromiseOrValue<BigNumberish>,
      subscriptionDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateReferralManager(
      referralManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardPool(
      poolAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateShouldAddReferrerOnToken2Stake(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSquadsManager(
      squadsManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTimeStep(
      step_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateToken1(
      token1_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateToken2(
      token2_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      planId: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
