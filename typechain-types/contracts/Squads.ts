/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ISquads {
  export type SquadPlanStruct = {
    squadPlanId: PromiseOrValue<BigNumberish>;
    subscriptionCost: PromiseOrValue<BigNumberish>;
    reward: PromiseOrValue<BigNumberish>;
    stakingThreshold: PromiseOrValue<BigNumberish>;
    squadSize: PromiseOrValue<BigNumberish>;
    stakingPlanId: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type SquadPlanStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    squadPlanId: BigNumber;
    subscriptionCost: BigNumber;
    reward: BigNumber;
    stakingThreshold: BigNumber;
    squadSize: BigNumber;
    stakingPlanId: BigNumber;
    isActive: boolean;
  };

  export type SquadStruct = {
    subscription: PromiseOrValue<BigNumberish>;
    squadsFilled: PromiseOrValue<BigNumberish>;
  };

  export type SquadStructOutput = [BigNumber, BigNumber] & {
    subscription: BigNumber;
    squadsFilled: BigNumber;
  };
}

export interface SquadsInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "SUBSCRIPTION_PERIOD_DAYS()": FunctionFragment;
    "addPlan(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getActivePlans()": FunctionFragment;
    "getPlan(uint256)": FunctionFragment;
    "getPlans()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSufficientPlanIdByStakingAmount(uint256,uint256)": FunctionFragment;
    "getTimestamp()": FunctionFragment;
    "getUserSquadMembers(address,uint256)": FunctionFragment;
    "getUserSubscription(address,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasAnySubscription(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "plans(uint256)": FunctionFragment;
    "referralManager()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "stakingContract()": FunctionFragment;
    "subscribe(uint256)": FunctionFragment;
    "subscriptionToken()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tryToAddMember(uint256,address,address,uint256)": FunctionFragment;
    "updatePlanActivity(uint256,bool)": FunctionFragment;
    "updatePlanReward(uint256,uint256)": FunctionFragment;
    "updatePlanSquadSize(uint256,uint256)": FunctionFragment;
    "updatePlanStakingId(uint256,uint256)": FunctionFragment;
    "updatePlanStakingThreshold(uint256,uint256)": FunctionFragment;
    "updatePlanSubscriptionCost(uint256,uint256)": FunctionFragment;
    "updateStakingContract(address)": FunctionFragment;
    "updateSubscriptionPeriod(uint256)": FunctionFragment;
    "updateSubscriptionReferralManager(address)": FunctionFragment;
    "updateSubscriptionToken(address)": FunctionFragment;
    "userHasPlanSubscription(address,uint256)": FunctionFragment;
    "userHasSufficientStaking(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "SUBSCRIPTION_PERIOD_DAYS"
      | "addPlan"
      | "getActivePlans"
      | "getPlan"
      | "getPlans"
      | "getRoleAdmin"
      | "getSufficientPlanIdByStakingAmount"
      | "getTimestamp"
      | "getUserSquadMembers"
      | "getUserSubscription"
      | "grantRole"
      | "hasAnySubscription"
      | "hasRole"
      | "plans"
      | "referralManager"
      | "renounceRole"
      | "revokeRole"
      | "stakingContract"
      | "subscribe"
      | "subscriptionToken"
      | "supportsInterface"
      | "tryToAddMember"
      | "updatePlanActivity"
      | "updatePlanReward"
      | "updatePlanSquadSize"
      | "updatePlanStakingId"
      | "updatePlanStakingThreshold"
      | "updatePlanSubscriptionCost"
      | "updateStakingContract"
      | "updateSubscriptionPeriod"
      | "updateSubscriptionReferralManager"
      | "updateSubscriptionToken"
      | "userHasPlanSubscription"
      | "userHasSufficientStaking"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPlan",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getPlans", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSquadMembers",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscription",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "plans",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "referralManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToAddMember",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanActivity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanReward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSquadSize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanStakingId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanStakingThreshold",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanSubscriptionCost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionReferralManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasPlanSubscription",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasSufficientStaking",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_PERIOD_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSquadMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryToAddMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSquadSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanStakingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanStakingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanSubscriptionCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionReferralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasPlanSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasSufficientStaking",
    data: BytesLike
  ): Result;

  events: {
    "MemberAdded(address,uint256,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SquadActivityChanged(uint256,bool)": EventFragment;
    "SquadFilled(address,uint256,uint256)": EventFragment;
    "SquadPlanCreated(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Subscribed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SquadActivityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SquadFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SquadPlanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
}

export interface MemberAddedEventObject {
  user: string;
  squadPlanId: BigNumber;
  member: string;
  squadMembers: BigNumber;
}
export type MemberAddedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  MemberAddedEventObject
>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SquadActivityChangedEventObject {
  squadPlanId: BigNumber;
  isActive: boolean;
}
export type SquadActivityChangedEvent = TypedEvent<
  [BigNumber, boolean],
  SquadActivityChangedEventObject
>;

export type SquadActivityChangedEventFilter =
  TypedEventFilter<SquadActivityChangedEvent>;

export interface SquadFilledEventObject {
  user: string;
  squadPlanId: BigNumber;
  squadCount: BigNumber;
}
export type SquadFilledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SquadFilledEventObject
>;

export type SquadFilledEventFilter = TypedEventFilter<SquadFilledEvent>;

export interface SquadPlanCreatedEventObject {
  squadPlanId: BigNumber;
  subscriptionCost: BigNumber;
  reward: BigNumber;
  stakingThreshold: BigNumber;
  squadSize: BigNumber;
  stakingPlanId: BigNumber;
}
export type SquadPlanCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  SquadPlanCreatedEventObject
>;

export type SquadPlanCreatedEventFilter =
  TypedEventFilter<SquadPlanCreatedEvent>;

export interface SubscribedEventObject {
  subscriber: string;
  squadPlanId: BigNumber;
  timestamp: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface Squads extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SquadsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPlan(
      subscriptionCost_: PromiseOrValue<BigNumberish>,
      reward_: PromiseOrValue<BigNumberish>,
      stakingThreshold_: PromiseOrValue<BigNumberish>,
      squadSize_: PromiseOrValue<BigNumberish>,
      stakingPlanId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActivePlans(
      overrides?: CallOverrides
    ): Promise<[ISquads.SquadPlanStructOutput[]]>;

    getPlan(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ISquads.SquadPlanStructOutput]>;

    getPlans(
      overrides?: CallOverrides
    ): Promise<[ISquads.SquadPlanStructOutput[]]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserSquadMembers(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ISquads.SquadStructOutput]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        squadPlanId: BigNumber;
        subscriptionCost: BigNumber;
        reward: BigNumber;
        stakingThreshold: BigNumber;
        squadSize: BigNumber;
        stakingPlanId: BigNumber;
        isActive: boolean;
      }
    >;

    referralManager(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionToken(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tryToAddMember(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      member: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanActivity(
      planId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanReward(
      planId: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanSquadSize(
      planId: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanStakingId(
      planId: PromiseOrValue<BigNumberish>,
      stakingPlanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanStakingThreshold(
      planId: PromiseOrValue<BigNumberish>,
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlanSubscriptionCost(
      planId: PromiseOrValue<BigNumberish>,
      subscriptionCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStakingContract(
      stakingContract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSubscriptionPeriod(
      numDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSubscriptionReferralManager(
      referralManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSubscriptionToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userHasPlanSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasSufficientStaking(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  addPlan(
    subscriptionCost_: PromiseOrValue<BigNumberish>,
    reward_: PromiseOrValue<BigNumberish>,
    stakingThreshold_: PromiseOrValue<BigNumberish>,
    squadSize_: PromiseOrValue<BigNumberish>,
    stakingPlanId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActivePlans(
    overrides?: CallOverrides
  ): Promise<ISquads.SquadPlanStructOutput[]>;

  getPlan(
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ISquads.SquadPlanStructOutput>;

  getPlans(overrides?: CallOverrides): Promise<ISquads.SquadPlanStructOutput[]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSufficientPlanIdByStakingAmount(
    stakingPlanId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getUserSquadMembers(
    user: PromiseOrValue<string>,
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserSubscription(
    user: PromiseOrValue<string>,
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ISquads.SquadStructOutput>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasAnySubscription(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  plans(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      squadPlanId: BigNumber;
      subscriptionCost: BigNumber;
      reward: BigNumber;
      stakingThreshold: BigNumber;
      squadSize: BigNumber;
      stakingPlanId: BigNumber;
      isActive: boolean;
    }
  >;

  referralManager(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  subscribe(
    planId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionToken(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tryToAddMember(
    stakingPlanId: PromiseOrValue<BigNumberish>,
    referrer: PromiseOrValue<string>,
    member: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanActivity(
    planId: PromiseOrValue<BigNumberish>,
    isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanReward(
    planId: PromiseOrValue<BigNumberish>,
    reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanSquadSize(
    planId: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanStakingId(
    planId: PromiseOrValue<BigNumberish>,
    stakingPlanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanStakingThreshold(
    planId: PromiseOrValue<BigNumberish>,
    threshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlanSubscriptionCost(
    planId: PromiseOrValue<BigNumberish>,
    subscriptionCost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStakingContract(
    stakingContract_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSubscriptionPeriod(
    numDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSubscriptionReferralManager(
    referralManager_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSubscriptionToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userHasPlanSubscription(
    user: PromiseOrValue<string>,
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasSufficientStaking(
    user: PromiseOrValue<string>,
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    addPlan(
      subscriptionCost_: PromiseOrValue<BigNumberish>,
      reward_: PromiseOrValue<BigNumberish>,
      stakingThreshold_: PromiseOrValue<BigNumberish>,
      squadSize_: PromiseOrValue<BigNumberish>,
      stakingPlanId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActivePlans(
      overrides?: CallOverrides
    ): Promise<ISquads.SquadPlanStructOutput[]>;

    getPlan(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ISquads.SquadPlanStructOutput>;

    getPlans(
      overrides?: CallOverrides
    ): Promise<ISquads.SquadPlanStructOutput[]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUserSquadMembers(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ISquads.SquadStructOutput>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        squadPlanId: BigNumber;
        subscriptionCost: BigNumber;
        reward: BigNumber;
        stakingThreshold: BigNumber;
        squadSize: BigNumber;
        stakingPlanId: BigNumber;
        isActive: boolean;
      }
    >;

    referralManager(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionToken(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tryToAddMember(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      member: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePlanActivity(
      planId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanReward(
      planId: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanSquadSize(
      planId: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanStakingId(
      planId: PromiseOrValue<BigNumberish>,
      stakingPlanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanStakingThreshold(
      planId: PromiseOrValue<BigNumberish>,
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlanSubscriptionCost(
      planId: PromiseOrValue<BigNumberish>,
      subscriptionCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakingContract(
      stakingContract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubscriptionPeriod(
      numDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubscriptionReferralManager(
      referralManager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubscriptionToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userHasPlanSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasSufficientStaking(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "MemberAdded(address,uint256,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      member?: null,
      squadMembers?: null
    ): MemberAddedEventFilter;
    MemberAdded(
      user?: PromiseOrValue<string> | null,
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      member?: null,
      squadMembers?: null
    ): MemberAddedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SquadActivityChanged(uint256,bool)"(
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      isActive?: null
    ): SquadActivityChangedEventFilter;
    SquadActivityChanged(
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      isActive?: null
    ): SquadActivityChangedEventFilter;

    "SquadFilled(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      squadCount?: PromiseOrValue<BigNumberish> | null
    ): SquadFilledEventFilter;
    SquadFilled(
      user?: PromiseOrValue<string> | null,
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      squadCount?: PromiseOrValue<BigNumberish> | null
    ): SquadFilledEventFilter;

    "SquadPlanCreated(uint256,uint256,uint256,uint256,uint256,uint256)"(
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      subscriptionCost?: null,
      reward?: null,
      stakingThreshold?: null,
      squadSize?: null,
      stakingPlanId?: null
    ): SquadPlanCreatedEventFilter;
    SquadPlanCreated(
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      subscriptionCost?: null,
      reward?: null,
      stakingThreshold?: null,
      squadSize?: null,
      stakingPlanId?: null
    ): SquadPlanCreatedEventFilter;

    "Subscribed(address,uint256,uint256)"(
      subscriber?: PromiseOrValue<string> | null,
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): SubscribedEventFilter;
    Subscribed(
      subscriber?: PromiseOrValue<string> | null,
      squadPlanId?: PromiseOrValue<BigNumberish> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null
    ): SubscribedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCRIPTION_PERIOD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    addPlan(
      subscriptionCost_: PromiseOrValue<BigNumberish>,
      reward_: PromiseOrValue<BigNumberish>,
      stakingThreshold_: PromiseOrValue<BigNumberish>,
      squadSize_: PromiseOrValue<BigNumberish>,
      stakingPlanId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActivePlans(overrides?: CallOverrides): Promise<BigNumber>;

    getPlan(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlans(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getUserSquadMembers(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralManager(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionToken(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tryToAddMember(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      member: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanActivity(
      planId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanReward(
      planId: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanSquadSize(
      planId: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanStakingId(
      planId: PromiseOrValue<BigNumberish>,
      stakingPlanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanStakingThreshold(
      planId: PromiseOrValue<BigNumberish>,
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlanSubscriptionCost(
      planId: PromiseOrValue<BigNumberish>,
      subscriptionCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStakingContract(
      stakingContract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSubscriptionPeriod(
      numDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSubscriptionReferralManager(
      referralManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSubscriptionToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userHasPlanSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasSufficientStaking(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBSCRIPTION_PERIOD_DAYS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPlan(
      subscriptionCost_: PromiseOrValue<BigNumberish>,
      reward_: PromiseOrValue<BigNumberish>,
      stakingThreshold_: PromiseOrValue<BigNumberish>,
      squadSize_: PromiseOrValue<BigNumberish>,
      stakingPlanId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActivePlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlan(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserSquadMembers(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryToAddMember(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      member: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanActivity(
      planId: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanReward(
      planId: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanSquadSize(
      planId: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanStakingId(
      planId: PromiseOrValue<BigNumberish>,
      stakingPlanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanStakingThreshold(
      planId: PromiseOrValue<BigNumberish>,
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlanSubscriptionCost(
      planId: PromiseOrValue<BigNumberish>,
      subscriptionCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStakingContract(
      stakingContract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSubscriptionPeriod(
      numDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSubscriptionReferralManager(
      referralManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSubscriptionToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userHasPlanSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasSufficientStaking(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
