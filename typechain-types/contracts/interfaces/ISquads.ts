/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ISquads {
  export type SquadPlanStruct = {
    index: PromiseOrValue<BigNumberish>;
    subscriptionCost: PromiseOrValue<BigNumberish>;
    reward: PromiseOrValue<BigNumberish>;
    stakingThreshold: PromiseOrValue<BigNumberish>;
    squadSize: PromiseOrValue<BigNumberish>;
    stakingPlanId: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type SquadPlanStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    index: BigNumber;
    subscriptionCost: BigNumber;
    reward: BigNumber;
    stakingThreshold: BigNumber;
    squadSize: BigNumber;
    stakingPlanId: BigNumber;
    isActive: boolean;
  };

  export type SquadStruct = {
    subscription: PromiseOrValue<BigNumberish>;
    squadsFilled: PromiseOrValue<BigNumberish>;
  };

  export type SquadStructOutput = [BigNumber, BigNumber] & {
    subscription: BigNumber;
    squadsFilled: BigNumber;
  };
}

export interface ISquadsInterface extends utils.Interface {
  functions: {
    "getActivePlans()": FunctionFragment;
    "getPlan(uint256)": FunctionFragment;
    "getPlans()": FunctionFragment;
    "getSufficientPlanIdByStakingAmount(uint256,uint256)": FunctionFragment;
    "getUserSquadMembers(address,uint256)": FunctionFragment;
    "getUserSubscription(address,uint256)": FunctionFragment;
    "hasAnySubscription(address)": FunctionFragment;
    "subscribe(uint256)": FunctionFragment;
    "tryToAddMember(uint256,address,address,uint256)": FunctionFragment;
    "userHasPlanSubscription(address,uint256)": FunctionFragment;
    "userHasSufficientStaking(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getActivePlans"
      | "getPlan"
      | "getPlans"
      | "getSufficientPlanIdByStakingAmount"
      | "getUserSquadMembers"
      | "getUserSubscription"
      | "hasAnySubscription"
      | "subscribe"
      | "tryToAddMember"
      | "userHasPlanSubscription"
      | "userHasSufficientStaking"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getActivePlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getPlans", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSquadMembers",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscription",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToAddMember",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasPlanSubscription",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasSufficientStaking",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getActivePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSufficientPlanIdByStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSquadMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tryToAddMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasPlanSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasSufficientStaking",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISquads extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISquadsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getActivePlans(
      overrides?: CallOverrides
    ): Promise<[ISquads.SquadPlanStructOutput[]]>;

    getPlan(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ISquads.SquadPlanStructOutput]>;

    getPlans(
      overrides?: CallOverrides
    ): Promise<[ISquads.SquadPlanStructOutput[]]>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserSquadMembers(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ISquads.SquadStructOutput]>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tryToAddMember(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      member: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userHasPlanSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasSufficientStaking(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getActivePlans(
    overrides?: CallOverrides
  ): Promise<ISquads.SquadPlanStructOutput[]>;

  getPlan(
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ISquads.SquadPlanStructOutput>;

  getPlans(overrides?: CallOverrides): Promise<ISquads.SquadPlanStructOutput[]>;

  getSufficientPlanIdByStakingAmount(
    stakingPlanId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserSquadMembers(
    user: PromiseOrValue<string>,
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserSubscription(
    user: PromiseOrValue<string>,
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ISquads.SquadStructOutput>;

  hasAnySubscription(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  subscribe(
    planId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tryToAddMember(
    stakingPlanId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    member: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userHasPlanSubscription(
    user: PromiseOrValue<string>,
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasSufficientStaking(
    user: PromiseOrValue<string>,
    planId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getActivePlans(
      overrides?: CallOverrides
    ): Promise<ISquads.SquadPlanStructOutput[]>;

    getPlan(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ISquads.SquadPlanStructOutput>;

    getPlans(
      overrides?: CallOverrides
    ): Promise<ISquads.SquadPlanStructOutput[]>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSquadMembers(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ISquads.SquadStructOutput>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tryToAddMember(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      member: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasPlanSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasSufficientStaking(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getActivePlans(overrides?: CallOverrides): Promise<BigNumber>;

    getPlan(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlans(overrides?: CallOverrides): Promise<BigNumber>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSquadMembers(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tryToAddMember(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      member: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userHasPlanSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasSufficientStaking(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getActivePlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlan(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSufficientPlanIdByStakingAmount(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSquadMembers(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tryToAddMember(
      stakingPlanId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      member: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userHasPlanSubscription(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasSufficientStaking(
      user: PromiseOrValue<string>,
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
