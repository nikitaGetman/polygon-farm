/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IStaking {
  export type UserStakingInfoStruct = {
    totalClaimed: PromiseOrValue<BigNumberish>;
    currentToken1Staked: PromiseOrValue<BigNumberish>;
    currentToken2Staked: PromiseOrValue<BigNumberish>;
    isSubscribed: PromiseOrValue<boolean>;
    subscribedTill: PromiseOrValue<BigNumberish>;
  };

  export type UserStakingInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    totalClaimed: BigNumber;
    currentToken1Staked: BigNumber;
    currentToken2Staked: BigNumber;
    isSubscribed: boolean;
    subscribedTill: BigNumber;
  };

  export type StakeStruct = {
    amount: PromiseOrValue<BigNumberish>;
    timeStart: PromiseOrValue<BigNumberish>;
    timeEnd: PromiseOrValue<BigNumberish>;
    profitPercent: PromiseOrValue<BigNumberish>;
    profit: PromiseOrValue<BigNumberish>;
    isClaimed: PromiseOrValue<boolean>;
    isToken2: PromiseOrValue<boolean>;
  };

  export type StakeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    amount: BigNumber;
    timeStart: BigNumber;
    timeEnd: BigNumber;
    profitPercent: BigNumber;
    profit: BigNumber;
    isClaimed: boolean;
    isToken2: boolean;
  };
}

export interface IStakingInterface extends utils.Interface {
  functions: {
    "deposit(uint256,uint256,bool,address)": FunctionFragment;
    "getAvailableStakeReward(uint256,address,uint256)": FunctionFragment;
    "getUserPlanInfo(uint256,address)": FunctionFragment;
    "getUserStakes(uint256,address)": FunctionFragment;
    "hasAnySubscription(address)": FunctionFragment;
    "hasSubscription(uint256,address)": FunctionFragment;
    "subscribe(uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "getAvailableStakeReward"
      | "getUserPlanInfo"
      | "getUserStakes"
      | "hasAnySubscription"
      | "hasSubscription"
      | "subscribe"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableStakeReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPlanInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnySubscription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableStakeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPlanInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAnySubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface IStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      planId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      isToken2: PromiseOrValue<boolean>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAvailableStakeReward(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserPlanInfo(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IStaking.UserStakingInfoStructOutput]>;

    getUserStakes(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IStaking.StakeStructOutput[]] & { stakes: IStaking.StakeStructOutput[] }
    >;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSubscription(
      planId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      planId: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    planId: PromiseOrValue<BigNumberish>,
    depositAmount: PromiseOrValue<BigNumberish>,
    isToken2: PromiseOrValue<boolean>,
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAvailableStakeReward(
    planId: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserPlanInfo(
    planId: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStaking.UserStakingInfoStructOutput>;

  getUserStakes(
    planId: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStaking.StakeStructOutput[]>;

  hasAnySubscription(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSubscription(
    planId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  subscribe(
    planId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    planId: PromiseOrValue<BigNumberish>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      planId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      isToken2: PromiseOrValue<boolean>,
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableStakeReward(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPlanInfo(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStaking.UserStakingInfoStructOutput>;

    getUserStakes(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStaking.StakeStructOutput[]>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSubscription(
      planId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      planId: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deposit(
      planId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      isToken2: PromiseOrValue<boolean>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAvailableStakeReward(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPlanInfo(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakes(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSubscription(
      planId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      planId: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      planId: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      isToken2: PromiseOrValue<boolean>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableStakeReward(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPlanInfo(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakes(
      planId: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAnySubscription(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSubscription(
      planId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      planId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      planId: PromiseOrValue<BigNumberish>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
