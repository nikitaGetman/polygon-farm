/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ILottery {
  export type RoundStruct = {
    id: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    isClosed: PromiseOrValue<boolean>;
    isOracleFulfilled: PromiseOrValue<boolean>;
    isFinished: PromiseOrValue<boolean>;
    initialPrize: PromiseOrValue<BigNumberish>;
    totalPrize: PromiseOrValue<BigNumberish>;
    maxTicketsFromOneMember: PromiseOrValue<BigNumberish>;
    tokensForOneTicket: PromiseOrValue<BigNumberish>;
    winnersForLevel: PromiseOrValue<BigNumberish>[];
    prizeForLevel: PromiseOrValue<BigNumberish>[];
    totalTickets: PromiseOrValue<BigNumberish>;
    members: PromiseOrValue<string>[];
    randomWord: PromiseOrValue<BigNumberish>;
    winners: PromiseOrValue<string>[][];
  };

  export type RoundStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    BigNumber,
    string[],
    BigNumber,
    string[][]
  ] & {
    id: BigNumber;
    startTime: BigNumber;
    duration: BigNumber;
    isClosed: boolean;
    isOracleFulfilled: boolean;
    isFinished: boolean;
    initialPrize: BigNumber;
    totalPrize: BigNumber;
    maxTicketsFromOneMember: BigNumber;
    tokensForOneTicket: BigNumber;
    winnersForLevel: BigNumber[];
    prizeForLevel: BigNumber[];
    totalTickets: BigNumber;
    members: string[];
    randomWord: BigNumber;
    winners: string[][];
  };
}

export interface ILotteryInterface extends utils.Interface {
  functions: {
    "getRound(uint256)": FunctionFragment;
    "getUserRoundEntry(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getRound" | "getUserRoundEntry"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRound",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundEntry",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundEntry",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getRound(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILottery.RoundStructOutput]>;

    getUserRoundEntry(
      user: PromiseOrValue<string>,
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getRound(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILottery.RoundStructOutput>;

  getUserRoundEntry(
    user: PromiseOrValue<string>,
    roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getRound(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILottery.RoundStructOutput>;

    getUserRoundEntry(
      user: PromiseOrValue<string>,
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getRound(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoundEntry(
      user: PromiseOrValue<string>,
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRound(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoundEntry(
      user: PromiseOrValue<string>,
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
