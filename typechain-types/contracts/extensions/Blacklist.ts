/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BlacklistInterface extends utils.Interface {
  functions: {
    "isAddressInBlacklist(address)": FunctionFragment;
    "isAddressInWhiteList(address)": FunctionFragment;
    "isWhitelistRestrictionMode()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isAddressInBlacklist"
      | "isAddressInWhiteList"
      | "isWhitelistRestrictionMode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isAddressInBlacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressInWhiteList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistRestrictionMode",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "isAddressInBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAddressInWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistRestrictionMode",
    data: BytesLike
  ): Result;

  events: {
    "BlacklistAdded(address[],address)": EventFragment;
    "BlacklistRemoved(address[],address)": EventFragment;
    "WhitelistAdded(address[],address)": EventFragment;
    "WhitelistDisabled(address)": EventFragment;
    "WhitelistEnabled(address)": EventFragment;
    "WhitelistRemoved(address[],address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlacklistAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlacklistRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistRemoved"): EventFragment;
}

export interface BlacklistAddedEventObject {
  _addresses: string[];
  admin: string;
}
export type BlacklistAddedEvent = TypedEvent<
  [string[], string],
  BlacklistAddedEventObject
>;

export type BlacklistAddedEventFilter = TypedEventFilter<BlacklistAddedEvent>;

export interface BlacklistRemovedEventObject {
  _addresses: string[];
  admin: string;
}
export type BlacklistRemovedEvent = TypedEvent<
  [string[], string],
  BlacklistRemovedEventObject
>;

export type BlacklistRemovedEventFilter =
  TypedEventFilter<BlacklistRemovedEvent>;

export interface WhitelistAddedEventObject {
  _addresses: string[];
  admin: string;
}
export type WhitelistAddedEvent = TypedEvent<
  [string[], string],
  WhitelistAddedEventObject
>;

export type WhitelistAddedEventFilter = TypedEventFilter<WhitelistAddedEvent>;

export interface WhitelistDisabledEventObject {
  admin: string;
}
export type WhitelistDisabledEvent = TypedEvent<
  [string],
  WhitelistDisabledEventObject
>;

export type WhitelistDisabledEventFilter =
  TypedEventFilter<WhitelistDisabledEvent>;

export interface WhitelistEnabledEventObject {
  admin: string;
}
export type WhitelistEnabledEvent = TypedEvent<
  [string],
  WhitelistEnabledEventObject
>;

export type WhitelistEnabledEventFilter =
  TypedEventFilter<WhitelistEnabledEvent>;

export interface WhitelistRemovedEventObject {
  _addresses: string[];
  admin: string;
}
export type WhitelistRemovedEvent = TypedEvent<
  [string[], string],
  WhitelistRemovedEventObject
>;

export type WhitelistRemovedEventFilter =
  TypedEventFilter<WhitelistRemovedEvent>;

export interface Blacklist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlacklistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isAddressInBlacklist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAddressInWhiteList(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistRestrictionMode(overrides?: CallOverrides): Promise<[boolean]>;
  };

  isAddressInBlacklist(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAddressInWhiteList(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistRestrictionMode(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    isAddressInBlacklist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAddressInWhiteList(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistRestrictionMode(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "BlacklistAdded(address[],address)"(
      _addresses?: null,
      admin?: null
    ): BlacklistAddedEventFilter;
    BlacklistAdded(_addresses?: null, admin?: null): BlacklistAddedEventFilter;

    "BlacklistRemoved(address[],address)"(
      _addresses?: null,
      admin?: null
    ): BlacklistRemovedEventFilter;
    BlacklistRemoved(
      _addresses?: null,
      admin?: null
    ): BlacklistRemovedEventFilter;

    "WhitelistAdded(address[],address)"(
      _addresses?: null,
      admin?: null
    ): WhitelistAddedEventFilter;
    WhitelistAdded(_addresses?: null, admin?: null): WhitelistAddedEventFilter;

    "WhitelistDisabled(address)"(admin?: null): WhitelistDisabledEventFilter;
    WhitelistDisabled(admin?: null): WhitelistDisabledEventFilter;

    "WhitelistEnabled(address)"(admin?: null): WhitelistEnabledEventFilter;
    WhitelistEnabled(admin?: null): WhitelistEnabledEventFilter;

    "WhitelistRemoved(address[],address)"(
      _addresses?: null,
      admin?: null
    ): WhitelistRemovedEventFilter;
    WhitelistRemoved(
      _addresses?: null,
      admin?: null
    ): WhitelistRemovedEventFilter;
  };

  estimateGas: {
    isAddressInBlacklist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAddressInWhiteList(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistRestrictionMode(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isAddressInBlacklist(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAddressInWhiteList(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistRestrictionMode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
