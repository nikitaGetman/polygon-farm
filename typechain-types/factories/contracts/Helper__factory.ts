/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Helper, HelperInterface } from "../../contracts/Helper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_staking",
        type: "address",
      },
      {
        internalType: "address",
        name: "_referralManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_squads",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lottery",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getLotteryRoundWinnersWithTickets",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "winnerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "enteredTickets",
            type: "uint256",
          },
        ],
        internalType: "struct Helper.LotteryWinnersWithTickets[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "level",
        type: "uint256",
      },
    ],
    name: "getUserReferralsFullInfoByLevel",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "referralAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "activationDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token2Balance",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isReferralSubscriptionActive",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isStakingSubscriptionActive",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isSquadSubscriptionActive",
            type: "bool",
          },
        ],
        internalType: "struct Helper.ReferralFullInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "subscriptionCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakingThreshold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "squadSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakingPlanId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
        ],
        internalType: "struct ISquads.SquadPlan",
        name: "plan",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserSquadInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "subscription",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "squadsFilled",
                type: "uint256",
              },
            ],
            internalType: "struct ISquads.Squad",
            name: "squadStatus",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "index",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "subscriptionCost",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "reward",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stakingThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "squadSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stakingPlanId",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct ISquads.SquadPlan",
            name: "plan",
            type: "tuple",
          },
          {
            internalType: "address[]",
            name: "members",
            type: "address[]",
          },
          {
            internalType: "bool",
            name: "userHasSufficientStaking",
            type: "bool",
          },
        ],
        internalType: "struct Helper.UserSquadInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserSquadsInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "subscription",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "squadsFilled",
                type: "uint256",
              },
            ],
            internalType: "struct ISquads.Squad",
            name: "squadStatus",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "index",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "subscriptionCost",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "reward",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stakingThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "squadSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stakingPlanId",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct ISquads.SquadPlan",
            name: "plan",
            type: "tuple",
          },
          {
            internalType: "address[]",
            name: "members",
            type: "address[]",
          },
          {
            internalType: "bool",
            name: "userHasSufficientStaking",
            type: "bool",
          },
        ],
        internalType: "struct Helper.UserSquadInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lottery",
    outputs: [
      {
        internalType: "contract ILottery",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "referralManager",
    outputs: [
      {
        internalType: "contract IReferralManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "squads",
    outputs: [
      {
        internalType: "contract ISquads",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "staking",
    outputs: [
      {
        internalType: "contract IStaking",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token2",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lottery",
        type: "address",
      },
    ],
    name: "updateLottery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_referralManager",
        type: "address",
      },
    ],
    name: "updateReferralManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_squads",
        type: "address",
      },
    ],
    name: "updateSquads",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_staking",
        type: "address",
      },
    ],
    name: "updateStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
    ],
    name: "updateToken1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token2",
        type: "address",
      },
    ],
    name: "updateToken2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "";

type HelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Helper__factory extends ContractFactory {
  constructor(...args: HelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token1: PromiseOrValue<string>,
    _token2: PromiseOrValue<string>,
    _staking: PromiseOrValue<string>,
    _referralManager: PromiseOrValue<string>,
    _squads: PromiseOrValue<string>,
    _lottery: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Helper> {
    return super.deploy(
      _token1,
      _token2,
      _staking,
      _referralManager,
      _squads,
      _lottery,
      overrides || {}
    ) as Promise<Helper>;
  }
  override getDeployTransaction(
    _token1: PromiseOrValue<string>,
    _token2: PromiseOrValue<string>,
    _staking: PromiseOrValue<string>,
    _referralManager: PromiseOrValue<string>,
    _squads: PromiseOrValue<string>,
    _lottery: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token1,
      _token2,
      _staking,
      _referralManager,
      _squads,
      _lottery,
      overrides || {}
    );
  }
  override attach(address: string): Helper {
    return super.attach(address) as Helper;
  }
  override connect(signer: Signer): Helper__factory {
    return super.connect(signer) as Helper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HelperInterface {
    return new utils.Interface(_abi) as HelperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Helper {
    return new Contract(address, _abi, signerOrProvider) as Helper;
  }
}
