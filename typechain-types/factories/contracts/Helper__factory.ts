/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Helper, HelperInterface } from "../../contracts/Helper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_staking",
        type: "address",
      },
      {
        internalType: "address",
        name: "_referralManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_squads",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lottery",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getLotteryRoundWinnersWithTickets",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "winnerAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "enteredTickets",
            type: "uint256",
          },
        ],
        internalType: "struct Helper.LotteryWinnersWithTickets[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "level",
        type: "uint256",
      },
    ],
    name: "getUserReferralsFullInfoByLevel",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "referralAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "activationDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token2Balance",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isReferralSubscriptionActive",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isStakingSubscriptionActive",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isSquadSubscriptionActive",
            type: "bool",
          },
        ],
        internalType: "struct Helper.ReferralFullInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "planId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserSquadInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "subscription",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "squadsFilled",
                type: "uint256",
              },
            ],
            internalType: "struct ISquads.Squad",
            name: "squadStatus",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "subscriptionCost",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "reward",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stakingThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "squadSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stakingPlanId",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct ISquads.SquadPlan",
            name: "plan",
            type: "tuple",
          },
          {
            internalType: "address[]",
            name: "members",
            type: "address[]",
          },
          {
            internalType: "bool",
            name: "userHasSufficientStaking",
            type: "bool",
          },
        ],
        internalType: "struct Helper.UserSquadInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserSquadsInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "subscription",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "squadsFilled",
                type: "uint256",
              },
            ],
            internalType: "struct ISquads.Squad",
            name: "squadStatus",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "subscriptionCost",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "reward",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stakingThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "squadSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stakingPlanId",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
            ],
            internalType: "struct ISquads.SquadPlan",
            name: "plan",
            type: "tuple",
          },
          {
            internalType: "address[]",
            name: "members",
            type: "address[]",
          },
          {
            internalType: "bool",
            name: "userHasSufficientStaking",
            type: "bool",
          },
        ],
        internalType: "struct Helper.UserSquadInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lottery",
    outputs: [
      {
        internalType: "contract ILottery",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "referralManager",
    outputs: [
      {
        internalType: "contract IReferralManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "squads",
    outputs: [
      {
        internalType: "contract ISquads",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "staking",
    outputs: [
      {
        internalType: "contract IStaking",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token2",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lottery",
        type: "address",
      },
    ],
    name: "updateLottery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_referralManager",
        type: "address",
      },
    ],
    name: "updateReferralManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_squads",
        type: "address",
      },
    ],
    name: "updateSquads",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_staking",
        type: "address",
      },
    ],
    name: "updateStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
    ],
    name: "updateToken1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token2",
        type: "address",
      },
    ],
    name: "updateToken2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b4d38038062001b4d83398101604081905262000034916200011f565b6200003f33620000b2565b600180546001600160a01b03199081166001600160a01b0398891617909155600280548216968816969096179095556003805486169487169490941790935560048054851692861692909217909155600580548416918516919091179055600680549092169216919091179055620001a0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200011a57600080fd5b919050565b60008060008060008060c087890312156200013957600080fd5b620001448762000102565b9550620001546020880162000102565b9450620001646040880162000102565b9350620001746060880162000102565b9250620001846080880162000102565b91506200019460a0880162000102565b90509295509295509295565b61199d80620001b06000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806378fd9000116100ad578063ba13a57211610071578063ba13a5721461026d578063cefaefb614610280578063d21220a7146102a0578063d85539c6146102b3578063f2fde38b146102c657600080fd5b806378fd9000146102105780637c67b339146102235780638da5cb5b14610236578063a345f38d14610247578063ae1fc3241461025a57600080fd5b806325be124e116100f457806325be124e146101975780632ccd9623146101c25780634cf088d9146101d5578063622f46a4146101e8578063715018a61461020857600080fd5b8063064e67801461012657806313bb96671461013b5780631e6f30cb14610164578063232b9d9014610184575b600080fd5b610139610134366004611003565b6102d9565b005b61014e610149366004611027565b610303565b60405161015b9190611040565b60405180910390f35b6101776101723660046110a2565b61065a565b60405161015b919061119c565b610139610192366004611003565b61086f565b6002546101aa906001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b6004546101aa906001600160a01b031681565b6003546101aa906001600160a01b031681565b6101fb6101f6366004611003565b610899565b60405161015b91906111af565b6101396109be565b6005546101aa906001600160a01b031681565b610139610231366004611003565b6109d2565b6000546001600160a01b03166101aa565b610139610255366004611003565b6109fc565b610139610268366004611003565b610a26565b6006546101aa906001600160a01b031681565b61029361028e366004611211565b610a50565b60405161015b919061123d565b6001546101aa906001600160a01b031681565b6101396102c1366004611003565b610e2a565b6101396102d4366004611003565b610e54565b6102e1610ed2565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60065460405163023c4c9f60e61b8152600481018390526060916000916001600160a01b0390911690638f1327c090602401600060405180830381865afa158015610352573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037a91908101906114e3565b90506000805b826101e001515181101561043c5760005b836101e0015182815181106103a8576103a861165b565b6020026020010151518110156104295760006001600160a01b0316846101e0015183815181106103da576103da61165b565b602002602001015182815181106103f3576103f361165b565b60200260200101516001600160a01b031614610417578261041381611671565b9350505b8061042181611671565b915050610391565b508061043481611671565b915050610380565b506000816001600160401b03811115610457576104576112cc565b6040519080825280602002602001820160405280156104b557816020015b6104a260405180606001604052806000815260200160006001600160a01b03168152602001600081525090565b8152602001906001900390816104755790505b5090506000805b846101e001515181101561064f5760005b856101e0015182815181106104e4576104e461165b565b60200260200101515181101561063c576000866101e00151838151811061050d5761050d61165b565b602002602001015182815181106105265761052661165b565b6020026020010151905060006001600160a01b0316816001600160a01b03161461062957600654604051632035fed160e01b81526001600160a01b038381166004830152602482018c90526000921690632035fed190604401602060405180830381865afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c0919061169a565b90506040518060600160405280858152602001836001600160a01b03168152602001828152508686815181106105f8576105f861165b565b6020026020010181905250848061060e90611671565b9550508685141561062757509398975050505050505050565b505b508061063481611671565b9150506104cd565b508061064781611671565b9150506104bc565b509095945050505050565b610662610f7c565b60055460405163cc5d19c160e01b81526001600160a01b03848116600483015260248201869052600092169063cc5d19c1906044016040805180830381865afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d791906116b3565b6005546040516309b3549d60e21b8152600481018790529192506000916001600160a01b03909116906326cd52749060240160c060405180830381865afa158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190611781565b6005546040516315a1072560e31b81526001600160a01b038781166004830152602482018990529293506000929091169063ad08392890604401600060405180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c9919081019061179d565b600554604051634c96e16d60e11b81526001600160a01b038881166004830152602482018a90529293506000929091169063992dc2da90604401602060405180830381865afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084491906117d9565b6040805160808101825295865260208601949094529284019190915250151560608201529392505050565b610877610ed2565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60606000600560009054906101000a90046001600160a01b03166001600160a01b031663d94a862b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156108f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261091891908101906117f4565b5190506000816001600160401b03811115610935576109356112cc565b60405190808252806020026020018201604052801561096e57816020015b61095b610f7c565b8152602001906001900390816109535790505b50905060005b828110156109b657610986818661065a565b8282815181106109985761099861165b565b602002602001018190525080806109ae90611671565b915050610974565b509392505050565b6109c6610ed2565b6109d06000610f2c565b565b6109da610ed2565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610a04610ed2565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610a2e610ed2565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6004805460405163b09b334f60e01b81526001600160a01b038581169382019390935260248101849052606092600092169063b09b334f90604401600060405180830381865afa158015610aa8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ad0919081019061188d565b9050600081516001600160401b03811115610aed57610aed6112cc565b604051908082528060200260200182016040528015610b5c57816020015b604080516101008101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201528252600019909201910181610b0b5790505b50905060005b8251811015610e21576000838281518110610b7f57610b7f61165b565b6020026020010151600001519050604051806101000160405280826001600160a01b03168152602001858481518110610bba57610bba61165b565b6020026020010151602001518152602001858481518110610bdd57610bdd61165b565b602090810291909101810151604090810151835260015490516370a0823160e01b81526001600160a01b038681166004830152939092019216906370a0823190602401602060405180830381865afa158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c61919061169a565b81526002546040516370a0823160e01b81526001600160a01b038581166004830152602090930192909116906370a0823190602401602060405180830381865afa158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd7919061169a565b8152602001858481518110610cee57610cee61165b565b6020908102919091018101516060015115158252600354604051632b58a66f60e21b81526001600160a01b0386811660048301529390920192169063ad6299bc90602401602060405180830381865afa158015610d4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7391906117d9565b15158152600554604051632b58a66f60e21b81526001600160a01b0385811660048301526020909301929091169063ad6299bc90602401602060405180830381865afa158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb91906117d9565b1515815250838381518110610e0257610e0261165b565b6020026020010181905250508080610e1990611671565b915050610b62565b50949350505050565b610e32610ed2565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b610e5c610ed2565b6001600160a01b038116610ec65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610ecf81610f2c565b50565b6000546001600160a01b031633146109d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ebd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160c0810190915260006080820181815260a083019190915281908152602001610fda6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b815260606020820152600060409091015290565b6001600160a01b0381168114610ecf57600080fd5b60006020828403121561101557600080fd5b813561102081610fee565b9392505050565b60006020828403121561103957600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b8281101561109557815180518552868101516001600160a01b031687860152850151858501526060909301929085019060010161105d565b5091979650505050505050565b600080604083850312156110b557600080fd5b8235915060208301356110c781610fee565b809150509250929050565b600081518084526020808501945080840160005b8381101561110b5781516001600160a01b0316875295820195908201906001016110e6565b509495945050505050565b600061014082518051855260208101516020860152506020830151805160408601526020810151606086015260408101516080860152606081015160a0860152608081015160c086015260a0810151151560e086015250604083015181610100860152611185828601826110d2565b91505060608301516109b661012086018215159052565b6020815260006110206020830184611116565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561120457603f198886030184526111f2858351611116565b945092850192908501906001016111d6565b5092979650505050505050565b6000806040838503121561122457600080fd5b823561122f81610fee565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561109557815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080808201519086015260a08082015115159086015260c08082015115159086015260e090810151151590850152610100909301929085019060010161125a565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b0381118282101715611305576113056112cc565b60405290565b604051608081016001600160401b0381118282101715611305576113056112cc565b604051601f8201601f191681016001600160401b0381118282101715611355576113556112cc565b604052919050565b8051801515811461136d57600080fd5b919050565b60006001600160401b0382111561138b5761138b6112cc565b5060051b60200190565b600082601f8301126113a657600080fd5b815160206113bb6113b683611372565b61132d565b82815260059290921b840181019181810190868411156113da57600080fd5b8286015b848110156113f557805183529183019183016113de565b509695505050505050565b600082601f83011261141157600080fd5b815160206114216113b683611372565b82815260059290921b8401810191818101908684111561144057600080fd5b8286015b848110156113f557805161145781610fee565b8352918301918301611444565b600082601f83011261147557600080fd5b815160206114856113b683611372565b82815260059290921b840181019181810190868411156114a457600080fd5b8286015b848110156113f55780516001600160401b038111156114c75760008081fd5b6114d58986838b0101611400565b8452509183019183016114a8565b6000602082840312156114f557600080fd5b81516001600160401b038082111561150c57600080fd5b90830190610200828603121561152157600080fd5b6115296112e2565b82518152602083015160208201526040830151604082015261154d6060840161135d565b606082015261155e6080840161135d565b608082015261156f60a0840161135d565b60a082015260c083015160c082015260e083015160e082015261010080840151818301525061012080840151818301525061014080840151838111156115b457600080fd5b6115c088828701611395565b82840152505061016080840151838111156115da57600080fd5b6115e688828701611395565b8284015250506101808084015181830152506101a0808401518381111561160c57600080fd5b61161888828701611400565b8284015250506101c08084015181830152506101e0808401518381111561163e57600080fd5b61164a88828701611464565b918301919091525095945050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561169357634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156116ac57600080fd5b5051919050565b6000604082840312156116c557600080fd5b604051604081018181106001600160401b03821117156116e7576116e76112cc565b604052825181526020928301519281019290925250919050565b600060c0828403121561171357600080fd5b60405160c081018181106001600160401b0382111715611735576117356112cc565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201526080830151608082015261177560a0840161135d565b60a08201525092915050565b600060c0828403121561179357600080fd5b6110208383611701565b6000602082840312156117af57600080fd5b81516001600160401b038111156117c557600080fd5b6117d184828501611400565b949350505050565b6000602082840312156117eb57600080fd5b6110208261135d565b6000602080838503121561180757600080fd5b82516001600160401b0381111561181d57600080fd5b8301601f8101851361182e57600080fd5b805161183c6113b682611372565b81815260c0918202830184019184820191908884111561185b57600080fd5b938501935b83851015611881576118728986611701565b83529384019391850191611860565b50979650505050505050565b600060208083850312156118a057600080fd5b82516001600160401b038111156118b657600080fd5b8301601f810185136118c757600080fd5b80516118d56113b682611372565b81815260079190911b820183019083810190878311156118f457600080fd5b928401925b8284101561195c57608084890312156119125760008081fd5b61191a61130b565b845161192581610fee565b8152848601518682015260408086015190820152606061194681870161135d565b90820152825260809390930192908401906118f9565b97965050505050505056fea2646970667358221220ffdc2047e9c4df3666d8d2ffb803c7b019603e63f78383208aa91808fddd827464736f6c634300080b0033";

type HelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Helper__factory extends ContractFactory {
  constructor(...args: HelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token1: PromiseOrValue<string>,
    _token2: PromiseOrValue<string>,
    _staking: PromiseOrValue<string>,
    _referralManager: PromiseOrValue<string>,
    _squads: PromiseOrValue<string>,
    _lottery: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Helper> {
    return super.deploy(
      _token1,
      _token2,
      _staking,
      _referralManager,
      _squads,
      _lottery,
      overrides || {}
    ) as Promise<Helper>;
  }
  override getDeployTransaction(
    _token1: PromiseOrValue<string>,
    _token2: PromiseOrValue<string>,
    _staking: PromiseOrValue<string>,
    _referralManager: PromiseOrValue<string>,
    _squads: PromiseOrValue<string>,
    _lottery: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token1,
      _token2,
      _staking,
      _referralManager,
      _squads,
      _lottery,
      overrides || {}
    );
  }
  override attach(address: string): Helper {
    return super.attach(address) as Helper;
  }
  override connect(signer: Signer): Helper__factory {
    return super.connect(signer) as Helper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HelperInterface {
    return new utils.Interface(_abi) as HelperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Helper {
    return new Contract(address, _abi, signerOrProvider) as Helper;
  }
}
