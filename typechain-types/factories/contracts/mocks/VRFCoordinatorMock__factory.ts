/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  VRFCoordinatorMock,
  VRFCoordinatorMockInterface,
} from "../../../contracts/mocks/VRFCoordinatorMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "fulfillRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subId",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "minimumRequestConfirmations",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "contract VRFConsumerBaseV2",
        name: "sender",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_randomWords",
        type: "uint256[]",
      },
    ],
    name: "setRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105a1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635d3b1d301461005c57806381d12c58146100825780639a91eb0d146100ad578063beff730f146100c2578063c0be1b99146100d5575b600080fd5b61006f61006a36600461037a565b6100e8565b6040519081526020015b60405180910390f35b6100956100903660046103f0565b61020b565b6040516001600160a01b039091168152602001610079565b6100c06100bb3660046103f0565b61023a565b005b61006f6100d03660046103f0565b6102c9565b6100c06100e336600461041f565b6102ea565b6000806040518060400160405280336001600160a01b03168152602001600180548060200260200160405190810160405280929190818152602001828054801561015157602002820191906000526020600020905b81548152602001906001019080831161013d575b50505091909252505060008054600181018255908052815160029091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b0319909316929092178255602080840151805194955085946101ee937f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401929190910190610301565b505060005461020091506001906104dd565b979650505050505050565b6000818154811061021b57600080fd5b60009182526020909120600290910201546001600160a01b0316905081565b600080828154811061024e5761024e610502565b600091825260209091206002909102018054604051631fe543e360e01b81529192506001600160a01b031690631fe543e3906102939085906001860190600401610518565b600060405180830381600087803b1580156102ad57600080fd5b505af11580156102c1573d6000803e3d6000fd5b505050505050565b600181815481106102d957600080fd5b600091825260209091200154905081565b80516102fd906001906020840190610301565b5050565b82805482825590600052602060002090810192821561033c579160200282015b8281111561033c578251825591602001919060010190610321565b5061034892915061034c565b5090565b5b80821115610348576000815560010161034d565b803563ffffffff8116811461037557600080fd5b919050565b600080600080600060a0868803121561039257600080fd5b85359450602086013567ffffffffffffffff811681146103b157600080fd5b9350604086013561ffff811681146103c857600080fd5b92506103d660608701610361565b91506103e460808701610361565b90509295509295909350565b60006020828403121561040257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561043257600080fd5b823567ffffffffffffffff8082111561044a57600080fd5b818501915085601f83011261045e57600080fd5b81358181111561047057610470610409565b8060051b604051601f19603f8301168101818110858211171561049557610495610409565b6040529182528482019250838101850191888311156104b357600080fd5b938501935b828510156104d1578435845293850193928501926104b8565b98975050505050505050565b6000828210156104fd57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b60006040820184835260206040818501528185548084526060860191508660005282600020935060005b8181101561055e57845483526001948501949284019201610542565b509097965050505050505056fea2646970667358221220f886fda1bf9d2dae839bd14e918e81516377c23d51f2e3abae0be4d504f7348764736f6c634300080b0033";

type VRFCoordinatorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFCoordinatorMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFCoordinatorMock__factory extends ContractFactory {
  constructor(...args: VRFCoordinatorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VRFCoordinatorMock> {
    return super.deploy(overrides || {}) as Promise<VRFCoordinatorMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VRFCoordinatorMock {
    return super.attach(address) as VRFCoordinatorMock;
  }
  override connect(signer: Signer): VRFCoordinatorMock__factory {
    return super.connect(signer) as VRFCoordinatorMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFCoordinatorMockInterface {
    return new utils.Interface(_abi) as VRFCoordinatorMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFCoordinatorMock {
    return new Contract(address, _abi, signerOrProvider) as VRFCoordinatorMock;
  }
}
