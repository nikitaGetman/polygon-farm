{
  "address": "0xF4D949E8b56235244c2661c8a9C51D7A6868C34c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "squadsManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "ActivityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isToken2",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isToken2",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPercent",
          "type": "uint256"
        }
      ],
      "name": "StakingPlanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_STAKE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTS_DIVIDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIME_STEP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profitPercent",
          "type": "uint256"
        }
      ],
      "name": "addStakingPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateStakeProfit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isToken2",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableStakeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingPlans",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "subscriptionCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subscriptionDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profitPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesToken1No",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesToken2No",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakedToken1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakedToken2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken1Locked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken2Locked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStaking.StakingPlan[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPlanInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken1Staked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken2Staked",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSubscribed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "subscribedTill",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStaking.UserStakingInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPlansInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken1Staked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken2Staked",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSubscribed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "subscribedTill",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStaking.UserStakingInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profitPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profit",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isToken2",
              "type": "bool"
            }
          ],
          "internalType": "struct IStaking.Stake[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserStakesWithRewards",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timeStart",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timeEnd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "profitPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "profit",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isClaimed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isToken2",
                  "type": "bool"
                }
              ],
              "internalType": "struct IStaking.Stake",
              "name": "stake",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStaking.StakeWithRewardsInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasAnySubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralManager",
      "outputs": [
        {
          "internalType": "contract IReferralManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldAddReferrerOnToken2Stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "squadsManager",
      "outputs": [
        {
          "internalType": "contract ISquads",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingPlans",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profitPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakesToken1No",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakesToken2No",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedToken1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedToken2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentToken1Locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentToken2Locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token2",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLimit_",
          "type": "uint256"
        }
      ],
      "name": "updateMinStakeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "divider_",
          "type": "uint256"
        }
      ],
      "name": "updatePercentDivider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "updatePlanActivity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "updatePlanDurationDays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "updatePlanReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "updatePlanSubscriptionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionDuration",
          "type": "uint256"
        }
      ],
      "name": "updatePlanSubscriptionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        }
      ],
      "name": "updateReferralManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress_",
          "type": "address"
        }
      ],
      "name": "updateRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "updateShouldAddReferrerOnToken2Stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "squadsManager_",
          "type": "address"
        }
      ],
      "name": "updateSquadsManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "step_",
          "type": "uint256"
        }
      ],
      "name": "updateTimeStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        }
      ],
      "name": "updateToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2_",
          "type": "address"
        }
      ],
      "name": "updateToken2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x023549569c9928705e4b788bc70673edde6ced9649976ea432f5ab7ff49b993b",
  "receipt": {
    "to": null,
    "from": "0x9E679eC533e68a280a97ABd619d9C42228096F81",
    "contractAddress": "0xF4D949E8b56235244c2661c8a9C51D7A6868C34c",
    "transactionIndex": 2,
    "gasUsed": "2804411",
    "logsBloom": "0x
    "blockHash": "0xf0198b43816323d687aec1382fe628d34cb43e0307c6871a9de24d7378e21097",
    "transactionHash": "0x023549569c9928705e4b788bc70673edde6ced9649976ea432f5ab7ff49b993b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 29269417,
        "transactionHash": "0x023549569c9928705e4b788bc70673edde6ced9649976ea432f5ab7ff49b993b",
        "address": "0xF4D949E8b56235244c2661c8a9C51D7A6868C34c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xf0198b43816323d687aec1382fe628d34cb43e0307c6871a9de24d7378e21097"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 29269417,
        "transactionHash": "0x023549569c9928705e4b788bc70673edde6ced9649976ea432f5ab7ff49b993b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000063a1f82ceba0b2000000000000000000000000000000000000000000000000037a71451f2cdefb000000000000000000000000000000000000000000000000fca8172b6d52f94e0000000000000000000000000000000000000000000000000316cf4cf2413e49000000000000000000000000000000000000000000000000fd0bb9239a3e9a00",
        "logIndex": 7,
        "blockHash": "0xf0198b43816323d687aec1382fe628d34cb43e0307c6871a9de24d7378e21097"
      }
    ],
    "blockNumber": 29269417,
    "cumulativeGasUsed": "2923100",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb971Bbda8043267e8047372A29A5bfA8B78A2D04",
    "0xbaD18847048E47f58f90B049A3C2b5A308Fb0E66",
    "0xf982D706f37Cb781D567395877EC35eDCB7Cf65C",
    "0x6Ab4b2db6D34ad1DC7F2e38bb975E7E7c7D44306",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 4,
  "solcInputHash": "e00738fdc5c91d4a6b9a4c4f208c6dcd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"squadsManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ActivityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPercent\",\"type\":\"uint256\"}],\"name\":\"StakingPlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitPercent\",\"type\":\"uint256\"}],\"name\":\"addStakingPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateStakeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getAvailableStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken1No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken2No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.StakingPlan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPlanInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Staked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubscribed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscribedTill\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.UserStakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPlansInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Staked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubscribed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscribedTill\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.UserStakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakesWithRewards\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.StakeWithRewardsInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasAnySubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralManager\",\"outputs\":[{\"internalType\":\"contract IReferralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAddReferrerOnToken2Stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squadsManager\",\"outputs\":[{\"internalType\":\"contract ISquads\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPlans\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken1No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken2No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLimit_\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"divider_\",\"type\":\"uint256\"}],\"name\":\"updatePercentDivider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updatePlanActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"updatePlanDurationDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updatePlanReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"updatePlanSubscriptionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"}],\"name\":\"updatePlanSubscriptionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"}],\"name\":\"updateReferralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress_\",\"type\":\"address\"}],\"name\":\"updateRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateShouldAddReferrerOnToken2Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"squadsManager_\",\"type\":\"address\"}],\"name\":\"updateSquadsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"step_\",\"type\":\"uint256\"}],\"name\":\"updateTimeStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"name\":\"updateToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2_\",\"type\":\"address\"}],\"name\":\"updateToken2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/ISquads.sol\\\";\\nimport \\\"./interfaces/IReferralManager.sol\\\";\\n\\ncontract Staking is IStaking, AccessControl {\\n    StakingPlan[] public stakingPlans;\\n\\n    mapping(uint256 => mapping(address => Staker)) private users;\\n\\n    uint256 public PERCENTS_DIVIDER = 1000;\\n    uint256 public TIME_STEP = 1 days;\\n    uint256 public MIN_STAKE_LIMIT = 1 * 1e17; // 0.1 Token\\n\\n    bool public shouldAddReferrerOnToken2Stake;\\n\\n    ERC20Burnable public token1;\\n    ERC20Burnable public token2;\\n    IReferralManager public referralManager;\\n    ISquads public squadsManager;\\n    address private rewardPool;\\n\\n    event Staked(\\n        address indexed user,\\n        uint256 indexed planId,\\n        uint256 indexed stakeIndex,\\n        uint256 amount,\\n        uint256 profit,\\n        bool isToken2,\\n        uint256 timestamp\\n    );\\n    event Claimed(\\n        address indexed user,\\n        uint256 indexed planId,\\n        uint256 indexed stakeIndex,\\n        uint256 amount,\\n        bool isToken2,\\n        uint256 timestamp\\n    );\\n    event StakingPlanCreated(\\n        uint256 indexed planId,\\n        uint256 duration,\\n        uint256 rewardPercent\\n    );\\n    event ActivityChanged(uint256 indexed planId, bool isActive);\\n    event Subscribed(address indexed user, uint256 indexed planId);\\n\\n    constructor(\\n        address token1_,\\n        address token2_,\\n        address rewardPool_,\\n        address referralManager_,\\n        address squadsManager_\\n    ) {\\n        require(token1_ != address(0));\\n        require(token2_ != address(0));\\n        require(rewardPool_ != address(0));\\n        require(referralManager_ != address(0));\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        rewardPool = rewardPool_;\\n\\n        token1 = ERC20Burnable(token1_);\\n        token2 = ERC20Burnable(token2_);\\n        referralManager = IReferralManager(referralManager_);\\n        squadsManager = ISquads(squadsManager_);\\n    }\\n\\n    function deposit(\\n        uint256 planId,\\n        uint256 depositAmount,\\n        bool isToken2,\\n        address referrer\\n    ) public {\\n        require(stakingPlans[planId].isActive, \\\"Staking plan is not active\\\");\\n        require(\\n            hasSubscription(planId, _msgSender()),\\n            \\\"You are not subscriber\\\"\\n        );\\n        require(\\n            depositAmount >= MIN_STAKE_LIMIT,\\n            \\\"Stake amount less than minimum value\\\"\\n        );\\n        require(referrer != _msgSender(), \\\"Referrer can not be sender\\\");\\n        uint256 stakingProfit = calculateStakeProfit(planId, depositAmount);\\n\\n        require(\\n            stakingProfit <= token1.balanceOf(rewardPool),\\n            \\\"Not enough tokens for reward\\\"\\n        );\\n        if (isToken2) {\\n            token2.burnFrom(_msgSender(), depositAmount);\\n        } else {\\n            token1.transferFrom(_msgSender(), address(this), depositAmount);\\n        }\\n        token1.transferFrom(rewardPool, address(this), stakingProfit);\\n\\n        StakingPlan storage plan = stakingPlans[planId];\\n        Staker storage user = users[planId][_msgSender()];\\n\\n        Stake memory newStake = Stake({\\n            amount: depositAmount,\\n            timeStart: getTimestamp(),\\n            timeEnd: getTimestamp() + plan.stakingDuration * TIME_STEP,\\n            profitPercent: plan.profitPercent,\\n            profit: stakingProfit,\\n            isClaimed: false,\\n            isToken2: isToken2\\n        });\\n\\n        user.stakes.push(newStake);\\n\\n        if (isToken2) {\\n            user.currentToken2Staked += depositAmount;\\n            plan.totalStakedToken2 += depositAmount;\\n            plan.currentToken2Locked += depositAmount;\\n            plan.totalStakesToken2No += 1;\\n        } else {\\n            user.currentToken1Staked += depositAmount;\\n            plan.totalStakedToken1 += depositAmount;\\n            plan.currentToken1Locked += depositAmount;\\n            plan.totalStakesToken1No += 1;\\n        }\\n\\n        // Referrals\\n        if (!isToken2 || shouldAddReferrerOnToken2Stake) {\\n            address userReferrer = referralManager.getUserReferrer(\\n                _msgSender()\\n            );\\n            if (userReferrer == address(0) && referrer != address(0)) {\\n                referralManager.setUserReferrer(_msgSender(), referrer);\\n                userReferrer = referralManager.getUserReferrer(_msgSender());\\n            }\\n            _assignRefRewards(planId, _msgSender(), stakingProfit);\\n\\n            // Squads\\n            if (address(squadsManager) != address(0)) {\\n                squadsManager.tryToAddMember(\\n                    planId,\\n                    userReferrer,\\n                    _msgSender(),\\n                    depositAmount\\n                );\\n            }\\n        }\\n        emit Staked(\\n            _msgSender(),\\n            planId,\\n            user.stakes.length - 1,\\n            newStake.amount,\\n            newStake.profit,\\n            newStake.isToken2,\\n            getTimestamp()\\n        );\\n    }\\n\\n    function withdraw(uint256 planId, uint256 stakeId) public {\\n        StakingPlan storage plan = stakingPlans[planId];\\n        Staker storage user = users[planId][_msgSender()];\\n        Stake storage stake = user.stakes[stakeId];\\n\\n        require(!stake.isClaimed, \\\"Stake is already claimed\\\");\\n        require(stake.timeEnd <= getTimestamp(), \\\"Stake is not ready yet\\\");\\n\\n        uint256 withdrawAmount = _getAvailableStakeReward(stake);\\n        stake.isClaimed = true;\\n\\n        token1.transfer(_msgSender(), withdrawAmount);\\n        user.totalClaimed += withdrawAmount;\\n        plan.totalClaimed += withdrawAmount;\\n        if (stake.isToken2) {\\n            user.currentToken2Staked -= stake.amount;\\n            plan.currentToken2Locked -= stake.amount;\\n        } else {\\n            user.currentToken1Staked -= stake.amount;\\n            plan.currentToken1Locked -= stake.amount;\\n        }\\n\\n        emit Claimed(\\n            _msgSender(),\\n            planId,\\n            stakeId,\\n            withdrawAmount,\\n            stake.isToken2,\\n            getTimestamp()\\n        );\\n    }\\n\\n    function _assignRefRewards(\\n        uint256 planId,\\n        address depositSender,\\n        uint256 stakingReward\\n    ) internal {\\n        uint256 totalLevels = referralManager.getReferralLevels();\\n        address currentLevelUser = depositSender;\\n\\n        for (uint256 level = 1; level <= totalLevels; level++) {\\n            address referrer = referralManager.getUserReferrer(\\n                currentLevelUser\\n            );\\n\\n            if (referrer != address(0)) {\\n                if (referralManager.userHasSubscription(referrer, level)) {\\n                    uint256 refReward = referralManager.calculateRefReward(\\n                        stakingReward,\\n                        level\\n                    );\\n                    uint256 currentToken1Staked = users[planId][referrer]\\n                        .currentToken1Staked;\\n\\n                    uint256 truncatedReward = refReward <= currentToken1Staked\\n                        ? refReward\\n                        : currentToken1Staked;\\n\\n                    referralManager.addUserDividends(referrer, truncatedReward);\\n                }\\n\\n                currentLevelUser = referrer;\\n            } else break;\\n        }\\n    }\\n\\n    function subscribe(uint256 planId) public {\\n        StakingPlan storage plan = stakingPlans[planId];\\n        require(plan.isActive, \\\"Staking plan is not active\\\");\\n\\n        token1.burnFrom(_msgSender(), plan.subscriptionCost);\\n        uint256 startDate = users[planId][_msgSender()].subscription <\\n            getTimestamp()\\n            ? getTimestamp()\\n            : users[planId][_msgSender()].subscription;\\n        users[planId][_msgSender()].subscription =\\n            startDate +\\n            plan.subscriptionDuration *\\n            TIME_STEP;\\n\\n        emit Subscribed(_msgSender(), planId);\\n    }\\n\\n    function addStakingPlan(\\n        uint256 subscriptionCost,\\n        uint256 subscriptionDuration,\\n        uint256 stakingDuration,\\n        uint256 profitPercent\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(stakingDuration > 0, \\\"Insufficient duration\\\");\\n        require(profitPercent > 0, \\\"Insufficient profit percent\\\");\\n\\n        StakingPlan memory plan = StakingPlan({\\n            isActive: true,\\n            subscriptionCost: subscriptionCost,\\n            subscriptionDuration: subscriptionDuration,\\n            stakingDuration: stakingDuration,\\n            profitPercent: profitPercent,\\n            totalStakesToken1No: 0,\\n            totalStakesToken2No: 0,\\n            totalStakedToken1: 0,\\n            totalStakedToken2: 0,\\n            currentToken1Locked: 0,\\n            currentToken2Locked: 0,\\n            totalClaimed: 0\\n        });\\n\\n        stakingPlans.push(plan);\\n\\n        emit StakingPlanCreated(\\n            stakingPlans.length - 1,\\n            stakingDuration,\\n            profitPercent\\n        );\\n    }\\n\\n    function calculateStakeProfit(uint256 planId, uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return (amount * stakingPlans[planId].profitPercent) / PERCENTS_DIVIDER;\\n    }\\n\\n    function _getAvailableStakeReward(Stake storage stake)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (stake.timeStart == 0 || stake.isClaimed) return 0;\\n\\n        uint256 stakeReward = stake.isToken2\\n            ? stake.profit\\n            : stake.amount + stake.profit;\\n\\n        if (stake.timeEnd <= getTimestamp()) return stakeReward;\\n\\n        return\\n            ((getTimestamp() - stake.timeStart) * stakeReward) /\\n            (stake.timeEnd - stake.timeStart);\\n    }\\n\\n    // --------- Helper functions ---------\\n    function getStakingPlans() public view returns (StakingPlan[] memory) {\\n        return stakingPlans;\\n    }\\n\\n    function getUserPlanInfo(uint256 planId, address userAddress)\\n        public\\n        view\\n        returns (UserStakingInfo memory)\\n    {\\n        Staker storage user = users[planId][userAddress];\\n\\n        UserStakingInfo memory info = UserStakingInfo(\\n            user.totalClaimed,\\n            user.currentToken1Staked,\\n            user.currentToken2Staked,\\n            hasSubscription(planId, userAddress),\\n            user.subscription\\n        );\\n\\n        return info;\\n    }\\n\\n    function getUserPlansInfo(address userAddress)\\n        public\\n        view\\n        returns (UserStakingInfo[] memory)\\n    {\\n        UserStakingInfo[] memory plansInfo = new UserStakingInfo[](\\n            stakingPlans.length\\n        );\\n\\n        for (uint256 i = 0; i < stakingPlans.length; i++) {\\n            plansInfo[i] = getUserPlanInfo(i, userAddress);\\n        }\\n\\n        return plansInfo;\\n    }\\n\\n    function getUserStakes(uint256 planId, address userAddress)\\n        public\\n        view\\n        returns (Stake[] memory)\\n    {\\n        return users[planId][userAddress].stakes;\\n    }\\n\\n    // TODO: can i optimize it?\\n    function getUserStakesWithRewards(uint256 planId, address userAddress)\\n        public\\n        view\\n        returns (StakeWithRewardsInfo[] memory)\\n    {\\n        uint256 stakesLength = users[planId][userAddress].stakes.length;\\n        StakeWithRewardsInfo[] memory stakesInfo = new StakeWithRewardsInfo[](\\n            stakesLength\\n        );\\n\\n        for (uint256 i = 0; i < stakesLength; i++) {\\n            stakesInfo[i].stake = users[planId][userAddress].stakes[i];\\n            if (!stakesInfo[i].stake.isClaimed) {\\n                stakesInfo[i].reward = _getAvailableStakeReward(\\n                    users[planId][userAddress].stakes[i]\\n                );\\n            }\\n        }\\n\\n        return stakesInfo;\\n    }\\n\\n    function getTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function getAvailableStakeReward(\\n        uint256 planId,\\n        address userAddress,\\n        uint256 stakeId\\n    ) public view returns (uint256) {\\n        return\\n            _getAvailableStakeReward(\\n                users[planId][userAddress].stakes[stakeId]\\n            );\\n    }\\n\\n    function hasSubscription(uint256 planId, address user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return users[planId][user].subscription > getTimestamp();\\n    }\\n\\n    function hasAnySubscription(address user) public view returns (bool) {\\n        for (uint256 i = 0; i < stakingPlans.length; i++) {\\n            if (hasSubscription(i, user)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // --------- Administrative functions ---------\\n    function updateShouldAddReferrerOnToken2Stake(bool value)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        shouldAddReferrerOnToken2Stake = value;\\n    }\\n\\n    function updateRewardPool(address poolAddress_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        rewardPool = poolAddress_;\\n    }\\n\\n    function updateToken1(address token1_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        token1 = ERC20Burnable(token1_);\\n    }\\n\\n    function updateToken2(address token2_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        token2 = ERC20Burnable(token2_);\\n    }\\n\\n    function updateReferralManager(address referralManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        referralManager = IReferralManager(referralManager_);\\n    }\\n\\n    function updateSquadsManager(address squadsManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        squadsManager = ISquads(squadsManager_);\\n    }\\n\\n    function updatePercentDivider(uint256 divider_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        PERCENTS_DIVIDER = divider_;\\n    }\\n\\n    function updateTimeStep(uint256 step_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        TIME_STEP = step_;\\n    }\\n\\n    function updateMinStakeLimit(uint256 minLimit_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        MIN_STAKE_LIMIT = minLimit_;\\n    }\\n\\n    function updatePlanActivity(uint256 planId, bool isActive)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].isActive = isActive;\\n\\n        emit ActivityChanged(planId, isActive);\\n    }\\n\\n    function updatePlanDurationDays(uint256 planId, uint256 duration)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].stakingDuration = duration;\\n    }\\n\\n    function updatePlanReward(uint256 planId, uint256 percent)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].profitPercent = percent;\\n    }\\n\\n    function updatePlanSubscriptionCost(uint256 planId, uint256 cost)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].subscriptionCost = cost;\\n    }\\n\\n    function updatePlanSubscriptionPeriod(\\n        uint256 planId,\\n        uint256 subscriptionDuration\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        stakingPlans[planId].subscriptionDuration = subscriptionDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x298d650ae21b368e8014f041550470bed261305c50f36319e026a13f54786a65\",\"license\":\"MIT\"},\"contracts/interfaces/IReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IReferralManager {\\n    struct Referral {\\n        address referralAddress;\\n        uint256 level;\\n        uint256 activationDate;\\n        bool isReferralSubscriptionActive;\\n    }\\n\\n    function getReferralLevels() external pure returns (uint256);\\n\\n    function addUserDividends(address user, uint256 reward) external;\\n\\n    function getUserReferrer(address user) external view returns (address);\\n\\n    function setUserReferrer(address user, address referrer) external;\\n\\n    function userHasSubscription(address user, uint256 level)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateRefReward(uint256 amount, uint256 level)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUserReferralsByLevel(address userAddress, uint256 level)\\n        external\\n        view\\n        returns (Referral[] memory);\\n}\\n\",\"keccak256\":\"0x535841d2272c666f1706e83bb472edadddf1dd1868be2444673dd9236e52fec3\",\"license\":\"MIT\"},\"contracts/interfaces/ISquads.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ISquads {\\n    function subscribe(uint256 planId) external;\\n\\n    function tryToAddMember(\\n        uint256 stakingPlanId,\\n        address user,\\n        address member,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function userHasPlanSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getSufficientPlanIdByStakingAmount(uint256 amount)\\n        external\\n        view\\n        returns (int256);\\n}\\n\",\"keccak256\":\"0x3e71cb34a0ebe3f4549b9cd6afcfdb60e452360adb9a29486fb7dd77f5dd5a82\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IStaking {\\n    struct StakingPlan {\\n        bool isActive;\\n        uint256 subscriptionCost;\\n        uint256 subscriptionDuration;\\n        uint256 stakingDuration;\\n        uint256 profitPercent;\\n        uint256 totalStakesToken1No;\\n        uint256 totalStakesToken2No;\\n        uint256 totalStakedToken1;\\n        uint256 totalStakedToken2;\\n        uint256 currentToken1Locked;\\n        uint256 currentToken2Locked;\\n        uint256 totalClaimed;\\n    }\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 timeStart;\\n        uint256 timeEnd;\\n        uint256 profitPercent;\\n        uint256 profit;\\n        bool isClaimed;\\n        bool isToken2;\\n    }\\n\\n    struct Staker {\\n        Stake[] stakes;\\n        uint256 subscription;\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n    }\\n\\n    struct UserStakingInfo {\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n        bool isSubscribed;\\n        uint256 subscribedTill;\\n    }\\n\\n    struct StakeWithRewardsInfo {\\n        Stake stake;\\n        uint256 reward;\\n    }\\n\\n    function deposit(\\n        uint256 planId,\\n        uint256 depositAmount,\\n        bool isToken2,\\n        address referrer\\n    ) external;\\n\\n    function withdraw(uint256 planId, uint256 stakeId) external;\\n\\n    function subscribe(uint256 planId) external;\\n\\n    // --------- Helper functions ---------\\n    function getUserPlanInfo(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (UserStakingInfo memory);\\n\\n    function getUserStakes(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (Stake[] memory stakes);\\n\\n    function getAvailableStakeReward(\\n        uint256 planId,\\n        address userAddress,\\n        uint256 stakeId\\n    ) external view returns (uint256);\\n\\n    function hasSubscription(uint256 planId, address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function hasAnySubscription(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xeedc77957bfd6fde55c0dfc474bddbf9a0d20a0ce9dc41538e1b9ee9884ea7ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102745760003560e01c80637213fe4711610151578063b652b28c116100c3578063d547741f11610087578063d547741f146105ef578063d5fbac3a14610602578063dce4b29b14610615578063e256617314610628578063ed10dda314610631578063fcd0cad71461064457600080fd5b8063b652b28c1461058b578063bac1d2b51461059e578063c7852153146105b1578063cd69d3d9146105c4578063d21220a7146105d757600080fd5b8063a217fddf11610115578063a217fddf1461052a578063ad6299bc14610532578063ae1f267c14610545578063ae1fc32414610558578063afa830851461056b578063b3ea1e7c1461057857600080fd5b80637213fe4714610463578063762e7a34146104835780637c67b339146104f157806391d148541461050457806395319e231461051757600080fd5b80632ccd9623116101ea5780633bb2c773116101ae5780633bb2c773146103e25780633fe90537146103f7578063441a3e701461040a578063458f3bb01461041d578063472b0b6814610430578063717f90071461045057600080fd5b80632ccd96231461038d5780632f2ff15d146103a05780632fe00f57146103b357806332bc298c146103c657806336568abe146103cf57600080fd5b806316c51a371161023c57806316c51a3714610300578063188ec356146103135780631c0e061214610319578063248a9ca31461032c57806325be124e1461034f5780632968f6161461037a57600080fd5b806301c234a81461027957806301ffc9a714610295578063064e6780146102b85780630f574ba7146102cd57806314ce783d146102e0575b600080fd5b61028260035481565b6040519081526020015b60405180910390f35b6102a86102a33660046127f3565b610664565b604051901515815260200161028c565b6102cb6102c6366004612832565b61069b565b005b6102cb6102db36600461284f565b6106cf565b6102f36102ee366004612868565b610882565b60405161028c91906128e0565b6102cb61030e36600461292e565b61094a565b42610282565b6102cb61032736600461296e565b610c86565b61028261033a36600461284f565b60009081526020819052604090206001015490565b600754610362906001600160a01b031681565b6040516001600160a01b03909116815260200161028c565b6102cb610388366004612993565b610d00565b600854610362906001600160a01b031681565b6102cb6103ae366004612868565b6115c4565b6102cb6103c13660046129dd565b6115ee565b61028260045481565b6102cb6103dd366004612868565b611627565b6103ea6116a5565b60405161028c91906129ff565b6102cb6104053660046129dd565b611780565b6102cb6104183660046129dd565b6117b9565b61028261042b366004612aba565b611aa6565b61044361043e366004612832565b611afa565b60405161028c9190612af2565b6102cb61045e36600461284f565b611bd1565b610476610471366004612868565b611be2565b60405161028c9190612b61565b61049661049136600461284f565b611dc6565b604080519c15158d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e08601526101008501526101208401526101408301526101608201526101800161028c565b6102cb6104ff366004612832565b611e3a565b6102a8610512366004612868565b611e68565b6102cb610525366004612bad565b611e91565b610282600081565b6102a8610540366004612832565b611eb0565b6102826105533660046129dd565b611ef1565b6102cb610566366004612832565b611f37565b6006546102a89060ff1681565b6102cb61058636600461284f565b611f65565b6102a8610599366004612868565b611f76565b6102cb6105ac3660046129dd565b611fa3565b6102cb6105bf3660046129dd565b611fdc565b6102cb6105d2366004612832565b612015565b6006546103629061010090046001600160a01b031681565b6102cb6105fd366004612868565b612043565b6102cb610610366004612832565b612068565b6102cb61062336600461284f565b612096565b61028260055481565b600954610362906001600160a01b031681565b610657610652366004612868565b6120a7565b60405161028c9190612bca565b60006001600160e01b03198216637965db0b60e01b148061069557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006106a68161214b565b50600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000600182815481106106e4576106e4612c05565b60009182526020909120600c90910201805490915060ff1661074d5760405162461bcd60e51b815260206004820152601a60248201527f5374616b696e6720706c616e206973206e6f742061637469766500000000000060448201526064015b60405180910390fd5b60065461010090046001600160a01b03166379cc67903360018401546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156107af57600080fd5b505af11580156107c3573d6000803e3d6000fd5b5050505060006107d04290565b600084815260026020908152604080832033845290915290206001015410610814576000838152600260209081526040808320338452909152902060010154610816565b425b9050600454826002015461082a9190612c31565b6108349082612c50565b60008481526002602090815260408083203380855292528083206001019390935591518592917f4b90d6788928d63c1821907a6a8b95f40d26562d8fe41b105f7489db9966dfcb91a3505050565b60008281526002602090815260408083206001600160a01b03851684528252808320805482518185028101850190935280835260609492939192909184015b8282101561093e5760008481526020908190206040805160e08101825260068602909201805483526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c083015290835290920191016108c1565b50505050905092915050565b60006109558161214b565b6000831161099d5760405162461bcd60e51b815260206004820152601560248201527424b739bab33334b1b4b2b73a10323ab930ba34b7b760591b6044820152606401610744565b600082116109ed5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e742070726f6669742070657263656e7400000000006044820152606401610744565b60408051610180810182526001808252602082018881529282018781526060830187815260808401878152600060a0860181815260c0870182815260e0880183815261010089018481526101208a018581526101408b018681526101608c018781528b54808d018d55978c90528c517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6600c909902988901805460ff19169115159190911790559c517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf788015598517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf887015596517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf986015594517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa85015591517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb840155517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfc830155517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfd82015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfe82015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cff82015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0d0082015592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0d019093019290925581549091610c4591612c68565b60408051868152602081018690527fb25951144c8a6e80eb675cb14ec779e73bd8f06dc10471b7074332d38cbf9af5910160405180910390a2505050505050565b6000610c918161214b565b8160018481548110610ca557610ca5612c05565b6000918252602091829020600c90910201805460ff191692151592909217909155604051831515815284917fbfb8d33fd9f7cfe605f8368d0791b6bc475b77345c7c022bbe2aecf8c21ba243910160405180910390a2505050565b60018481548110610d1357610d13612c05565b60009182526020909120600c909102015460ff16610d735760405162461bcd60e51b815260206004820152601a60248201527f5374616b696e6720706c616e206973206e6f74206163746976650000000000006044820152606401610744565b610d7d8433611f76565b610dc25760405162461bcd60e51b81526020600482015260166024820152752cb7ba9030b932903737ba1039bab139b1b934b132b960511b6044820152606401610744565b600554831015610e205760405162461bcd60e51b8152602060048201526024808201527f5374616b6520616d6f756e74206c657373207468616e206d696e696d756d2076604482015263616c756560e01b6064820152608401610744565b6001600160a01b038116331415610e795760405162461bcd60e51b815260206004820152601a60248201527f52656665727265722063616e206e6f742062652073656e6465720000000000006044820152606401610744565b6000610e858585611ef1565b600654600a546040516370a0823160e01b81526001600160a01b03918216600482015292935061010090910416906370a0823190602401602060405180830381865afa158015610ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efd9190612c7f565b811115610f4c5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820746f6b656e7320666f7220726577617264000000006044820152606401610744565b8215610fc9576007546001600160a01b03166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b50505050611059565b60065461010090046001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018790526064016020604051808303816000875af1158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190612c98565b505b600654600a546040516323b872dd60e01b81526001600160a01b0391821660048201523060248201526044810184905261010090920416906323b872dd906064016020604051808303816000875af11580156110b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dd9190612c98565b506000600186815481106110f3576110f3612c05565b60009182526020808320898452600290915260408320600c909202019250816111193390565b6001600160a01b03166001600160a01b03168152602001908152602001600020905060006040518060e001604052808881526020016111554290565b8152602001600454856003015461116c9190612c31565b6111769042612c50565b81526004808601546020808401919091526040808401899052600060608086018290528c158015608097880152895460018181018c558b85529386902089516006909202019081559488015192850192909255918601516002840155908501516003830155928401519181019190915560a08301516005909101805460c085015115156101000261ff00199315159390931661ffff199091161791909117905590915061128e57868260040160008282546112319190612c50565b925050819055508683600801600082825461124c9190612c50565b925050819055508683600a0160008282546112679190612c50565b9250508190555060018360060160008282546112839190612c50565b909155506112fa9050565b868260030160008282546112a29190612c50565b92505081905550868360070160008282546112bd9190612c50565b92505081905550868360090160008282546112d89190612c50565b9250508190555060018360050160008282546112f49190612c50565b90915550505b851580611309575060065460ff165b15611556576008546000906001600160a01b03166336144c9a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b9190612cb5565b90506001600160a01b0381161580156113ac57506001600160a01b03861615155b156114a3576008546001600160a01b031663f8d0e6ec336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529089166024820152604401600060405180830381600087803b15801561140c57600080fd5b505af1158015611420573d6000803e3d6000fd5b50506008546001600160a01b031691506336144c9a9050336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a09190612cb5565b90505b6114ae893387612158565b6009546001600160a01b031615611554576009546001600160a01b031663afea5d558a83336040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606481018b90526084016020604051808303816000875af115801561152e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115529190612c98565b505b505b815461156490600190612c68565b815160808084015160c0850151604080519485526020850192909252151583820152426060840152518b9233927f42ca3e556bfff174f2df01f4d630ae56cd8a109430c8058a83541d2f8949f64f92918290030190a45050505050505050565b6000828152602081905260409020600101546115df8161214b565b6115e98383612410565b505050565b60006115f98161214b565b816001848154811061160d5761160d612c05565b90600052602060002090600c020160040181905550505050565b6001600160a01b03811633146116975760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610744565b6116a18282612494565b5050565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156117775760008481526020908190206040805161018081018252600c8602909201805460ff1615158352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a810154610140840152600b015461016083015290835290920191016116c9565b50505050905090565b600061178b8161214b565b816001848154811061179f5761179f612c05565b90600052602060002090600c020160010181905550505050565b6000600183815481106117ce576117ce612c05565b60009182526020808320868452600290915260408320600c909202019250816117f43390565b6001600160a01b03166001600160a01b031681526020019081526020016000209050600081600001848154811061182d5761182d612c05565b60009182526020909120600690910201600581015490915060ff16156118955760405162461bcd60e51b815260206004820152601860248201527f5374616b6520697320616c726561647920636c61696d656400000000000000006044820152606401610744565b42816002015411156118e25760405162461bcd60e51b815260206004820152601660248201527514dd185ad9481a5cc81b9bdd081c9958591e481e595d60521b6044820152606401610744565b60006118ed826124f9565b60058301805460ff191660011790556006549091506001600160a01b036101009091041663a9059cbb61191d3390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af115801561196a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198e9190612c98565b50808360020160008282546119a39190612c50565b925050819055508084600b0160008282546119be9190612c50565b90915550506005820154610100900460ff1615611a115781546004840180546000906119eb908490612c68565b90915550508154600a85018054600090611a06908490612c68565b90915550611a489050565b8154600384018054600090611a27908490612c68565b90915550508154600985018054600090611a42908490612c68565b90915550505b60058201548590879033907f14346b96e636bce3fdf42a5ed73f91c82b085304530c1acdc09e1896fb4ccef9908590610100900460ff16426040805193845291151560208401529082015260600160405180910390a4505050505050565b60008381526002602090815260408083206001600160a01b038616845290915281208054611af2919084908110611adf57611adf612c05565b90600052602060002090600602016124f9565b949350505050565b60015460609060009067ffffffffffffffff811115611b1b57611b1b612cd2565b604051908082528060200260200182016040528015611b8057816020015b611b6d6040518060a00160405280600081526020016000815260200160008152602001600015158152602001600081525090565b815260200190600190039081611b395790505b50905060005b600154811015611bca57611b9a81856120a7565b828281518110611bac57611bac612c05565b60200260200101819052508080611bc290612ce8565b915050611b86565b5092915050565b6000611bdc8161214b565b50600555565b60008281526002602090815260408083206001600160a01b03851684529091528120546060918167ffffffffffffffff811115611c2157611c21612cd2565b604051908082528060200260200182016040528015611c5a57816020015b611c47612797565b815260200190600190039081611c3f5790505b50905060005b82811015611dbd5760008681526002602090815260408083206001600160a01b03891684529091529020805482908110611c9c57611c9c612c05565b60009182526020918290206040805160e081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff808216151560a084015261010090910416151560c08201528251839083908110611d1a57611d1a612c05565b602002602001015160000181905250818181518110611d3b57611d3b612c05565b60200260200101516000015160a00151611dab5760008681526002602090815260408083206001600160a01b038916845290915290208054611d88919083908110611adf57611adf612c05565b828281518110611d9a57611d9a612c05565b602002602001015160200181815250505b80611db581612ce8565b915050611c60565b50949350505050565b60018181548110611dd657600080fd5b60009182526020909120600c9091020180546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b909b015460ff909a169b50979996989597949693959294919390928c565b6000611e458161214b565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000611e9c8161214b565b506006805460ff1916911515919091179055565b6000805b600154811015611ee857611ec88184611f76565b15611ed65750600192915050565b80611ee081612ce8565b915050611eb4565b50600092915050565b600060035460018481548110611f0957611f09612c05565b90600052602060002090600c02016004015483611f269190612c31565b611f309190612d03565b9392505050565b6000611f428161214b565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000611f708161214b565b50600355565b60009182526002602090815260408084206001600160a01b03939093168452919052902060010154421090565b6000611fae8161214b565b8160018481548110611fc257611fc2612c05565b90600052602060002090600c020160030181905550505050565b6000611fe78161214b565b8160018481548110611ffb57611ffb612c05565b90600052602060002090600c020160020181905550505050565b60006120208161214b565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526020819052604090206001015461205e8161214b565b6115e98383612494565b60006120738161214b565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006120a18161214b565b50600455565b6120db6040518060a00160405280600081526020016000815260200160008152602001600015158152602001600081525090565b60008381526002602081815260408084206001600160a01b03871685528252808420815160a0810183529381015484526003810154928401929092526004820154908301529190606081016121308787611f76565b15158152600190930154602090930192909252509392505050565b6121558133612597565b50565b6008546040805163070d451f60e01b815290516000926001600160a01b03169163070d451f9160048083019260209291908290030181865afa1580156121a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c69190612c7f565b90508260015b82811161240857600854604051631b0a264d60e11b81526001600160a01b03848116600483015260009216906336144c9a90602401602060405180830381865afa15801561221e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122429190612cb5565b90506001600160a01b038116156123ef576008546040516303fea6cb60e11b81526001600160a01b03838116600483015260248201859052909116906307fd4d9690604401602060405180830381865afa1580156122a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190612c98565b156123e7576008546040516384197dbb60e01b815260048101879052602481018490526000916001600160a01b0316906384197dbb90604401602060405180830381865afa15801561231e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123429190612c7f565b60008981526002602090815260408083206001600160a01b038716845290915281206003015491925081831115612379578161237b565b825b600854604051633fb55c6160e01b81526001600160a01b03878116600483015260248201849052929350911690633fb55c6190604401600060405180830381600087803b1580156123cb57600080fd5b505af11580156123df573d6000803e3d6000fd5b505050505050505b8092506123f5565b50612408565b508061240081612ce8565b9150506121cc565b505050505050565b61241a8282611e68565b6116a1576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556124503390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61249e8282611e68565b156116a1576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008160010154600014806125125750600582015460ff165b1561251f57506000919050565b6005820154600090610100900460ff1661254957600483015483546125449190612c50565b61254f565b82600401545b9050428360020154116125625792915050565b826001015483600201546125769190612c68565b8184600101546125834290565b61258d9190612c68565b611f269190612c31565b6125a18282611e68565b6116a1576125b9816001600160a01b031660146125fb565b6125c48360206125fb565b6040516020016125d5929190612d55565b60408051601f198184030181529082905262461bcd60e51b825261074491600401612dca565b6060600061260a836002612c31565b612615906002612c50565b67ffffffffffffffff81111561262d5761262d612cd2565b6040519080825280601f01601f191660200182016040528015612657576020820181803683370190505b509050600360fc1b8160008151811061267257612672612c05565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126a1576126a1612c05565b60200101906001600160f81b031916908160001a90535060006126c5846002612c31565b6126d0906001612c50565b90505b6001811115612748576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061270457612704612c05565b1a60f81b82828151811061271a5761271a612c05565b60200101906001600160f81b031916908160001a90535060049490941c9361274181612dfd565b90506126d3565b508315611f305760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610744565b60405180604001604052806127e66040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001600081525090565b60006020828403121561280557600080fd5b81356001600160e01b031981168114611f3057600080fd5b6001600160a01b038116811461215557600080fd5b60006020828403121561284457600080fd5b8135611f308161281d565b60006020828403121561286157600080fd5b5035919050565b6000806040838503121561287b57600080fd5b82359150602083013561288d8161281d565b809150509250929050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a083015260c0810151151560c08301525050565b6020808252825182820181905260009190848201906040850190845b818110156129225761290f838551612898565b9284019260e092909201916001016128fc565b50909695505050505050565b6000806000806080858703121561294457600080fd5b5050823594602084013594506040840135936060013592509050565b801515811461215557600080fd5b6000806040838503121561298157600080fd5b82359150602083013561288d81612960565b600080600080608085870312156129a957600080fd5b843593506020850135925060408501356129c281612960565b915060608501356129d28161281d565b939692955090935050565b600080604083850312156129f057600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b82811015612aad57815180511515855280870151858801528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e0808201519086015261010080820151908601526101208082015190860152610140808201519086015261016090810151908501526101809093019290850190600101612a1c565b5091979650505050505050565b600080600060608486031215612acf57600080fd5b833592506020840135612ae18161281d565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b8181101561292257612b4e838551805182526020810151602083015260408101516040830152606081015115156060830152608081015160808301525050565b9284019260a09290920191600101612b0e565b6020808252825182820181905260009190848201906040850190845b81811015612922578351612b92848251612898565b85015160e08401529284019261010090920191600101612b7d565b600060208284031215612bbf57600080fd5b8135611f3081612960565b60a081016106958284805182526020810151602083015260408101516040830152606081015115156060830152608081015160808301525050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612c4b57612c4b612c1b565b500290565b60008219821115612c6357612c63612c1b565b500190565b600082821015612c7a57612c7a612c1b565b500390565b600060208284031215612c9157600080fd5b5051919050565b600060208284031215612caa57600080fd5b8151611f3081612960565b600060208284031215612cc757600080fd5b8151611f308161281d565b634e487b7160e01b600052604160045260246000fd5b6000600019821415612cfc57612cfc612c1b565b5060010190565b600082612d2057634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015612d40578181015183820152602001612d28565b83811115612d4f576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612d8d816017850160208801612d25565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612dbe816028840160208801612d25565b01602801949350505050565b6020815260008251806020840152612de9816040850160208701612d25565b601f01601f19169190910160400192915050565b600081612e0c57612e0c612c1b565b50600019019056fea26469706673582212206c0588a9ed5f745afe5a8281ece756c0f89e7ac59290acd375f68cb9e81b279764736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 178,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)173_storage)"
      },
      {
        "astId": 9447,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingPlans",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(StakingPlan)12385_storage)dyn_storage"
      },
      {
        "astId": 9454,
        "contract": "contracts/Staking.sol:Staking",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Staker)12413_storage))"
      },
      {
        "astId": 9457,
        "contract": "contracts/Staking.sol:Staking",
        "label": "PERCENTS_DIVIDER",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9460,
        "contract": "contracts/Staking.sol:Staking",
        "label": "TIME_STEP",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9465,
        "contract": "contracts/Staking.sol:Staking",
        "label": "MIN_STAKE_LIMIT",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9467,
        "contract": "contracts/Staking.sol:Staking",
        "label": "shouldAddReferrerOnToken2Stake",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 9470,
        "contract": "contracts/Staking.sol:Staking",
        "label": "token1",
        "offset": 1,
        "slot": "6",
        "type": "t_contract(ERC20Burnable)3142"
      },
      {
        "astId": 9473,
        "contract": "contracts/Staking.sol:Staking",
        "label": "token2",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ERC20Burnable)3142"
      },
      {
        "astId": 9476,
        "contract": "contracts/Staking.sol:Staking",
        "label": "referralManager",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IReferralManager)12321"
      },
      {
        "astId": 9479,
        "contract": "contracts/Staking.sol:Staking",
        "label": "squadsManager",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ISquads)12358"
      },
      {
        "astId": 9481,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardPool",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Stake)12400_storage)dyn_storage": {
        "base": "t_struct(Stake)12400_storage",
        "encoding": "dynamic_array",
        "label": "struct IStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StakingPlan)12385_storage)dyn_storage": {
        "base": "t_struct(StakingPlan)12385_storage",
        "encoding": "dynamic_array",
        "label": "struct IStaking.StakingPlan[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Burnable)3142": {
        "encoding": "inplace",
        "label": "contract ERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralManager)12321": {
        "encoding": "inplace",
        "label": "contract IReferralManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISquads)12358": {
        "encoding": "inplace",
        "label": "contract ISquads",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Staker)12413_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStaking.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)12413_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)173_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)173_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Staker)12413_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IStaking.Staker))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Staker)12413_storage)"
      },
      "t_struct(RoleData)173_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 170,
            "contract": "contracts/Staking.sol:Staking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 172,
            "contract": "contracts/Staking.sol:Staking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)12400_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.Stake",
        "members": [
          {
            "astId": 12387,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12389,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12391,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeEnd",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12393,
            "contract": "contracts/Staking.sol:Staking",
            "label": "profitPercent",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12395,
            "contract": "contracts/Staking.sol:Staking",
            "label": "profit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12397,
            "contract": "contracts/Staking.sol:Staking",
            "label": "isClaimed",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 12399,
            "contract": "contracts/Staking.sol:Staking",
            "label": "isToken2",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Staker)12413_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.Staker",
        "members": [
          {
            "astId": 12404,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Stake)12400_storage)dyn_storage"
          },
          {
            "astId": 12406,
            "contract": "contracts/Staking.sol:Staking",
            "label": "subscription",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12408,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12410,
            "contract": "contracts/Staking.sol:Staking",
            "label": "currentToken1Staked",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12412,
            "contract": "contracts/Staking.sol:Staking",
            "label": "currentToken2Staked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StakingPlan)12385_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.StakingPlan",
        "members": [
          {
            "astId": 12362,
            "contract": "contracts/Staking.sol:Staking",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12364,
            "contract": "contracts/Staking.sol:Staking",
            "label": "subscriptionCost",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12366,
            "contract": "contracts/Staking.sol:Staking",
            "label": "subscriptionDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12368,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakingDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12370,
            "contract": "contracts/Staking.sol:Staking",
            "label": "profitPercent",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12372,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakesToken1No",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12374,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakesToken2No",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12376,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakedToken1",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 12378,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakedToken2",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 12380,
            "contract": "contracts/Staking.sol:Staking",
            "label": "currentToken1Locked",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 12382,
            "contract": "contracts/Staking.sol:Staking",
            "label": "currentToken2Locked",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 12384,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}