{
  "language": "Solidity",
  "sources": {
    "contracts/extensions/Blacklist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n// Tests for this contract are in the BasicToken.test.ts file\nabstract contract Blacklist is Context {\n    mapping(address => bool) blacklist;\n    mapping(address => bool) whitelist;\n\n    bool public isWhitelistRestrictionMode;\n\n    event BlacklistAdded(address[] _addresses, address admin);\n    event BlacklistRemoved(address[] _addresses, address admin);\n    event WhitelistAdded(address[] _addresses, address admin);\n    event WhitelistRemoved(address[] _addresses, address admin);\n    event WhitelistEnabled(address admin);\n    event WhitelistDisabled(address admin);\n\n    function _addToBlacklist(address[] memory _addresses) internal virtual {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            blacklist[_addresses[i]] = true;\n        }\n        emit BlacklistAdded(_addresses, _msgSender());\n    }\n\n    function _removeFromBlacklist(address[] memory _addresses)\n        internal\n        virtual\n    {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            blacklist[_addresses[i]] = false;\n        }\n        emit BlacklistRemoved(_addresses, _msgSender());\n    }\n\n    function _addToWhitelist(address[] memory _addresses) internal virtual {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            whitelist[_addresses[i]] = true;\n        }\n        emit WhitelistAdded(_addresses, _msgSender());\n    }\n\n    function _removeFromWhitelist(address[] memory _addresses)\n        internal\n        virtual\n    {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            whitelist[_addresses[i]] = false;\n        }\n        emit WhitelistRemoved(_addresses, _msgSender());\n    }\n\n    // --------- Helper functions ---------\n    function isAddressInBlacklist(address _address) public view returns (bool) {\n        return blacklist[_address];\n    }\n\n    function isAddressInWhiteList(address _address) public view returns (bool) {\n        return whitelist[_address];\n    }\n\n    // --------- Administrative functions ---------\n    function _onWhitelistMode() internal virtual {\n        isWhitelistRestrictionMode = true;\n        emit WhitelistEnabled(_msgSender());\n    }\n\n    function _offWhitelistMode() internal virtual {\n        isWhitelistRestrictionMode = false;\n        emit WhitelistDisabled(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/extensions/ERC20Blacklist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./Blacklist.sol\";\n\nabstract contract ERC20Blacklist is ERC20, Blacklist {\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        if (isWhitelistRestrictionMode) {\n            require(\n                whitelist[from] || whitelist[to],\n                \"Whitelist: sender or receiver is not in whitelist\"\n            );\n        }\n        require(!blacklist[from], \"Blacklist: sender is in blacklist\");\n        require(!blacklist[to], \"Blacklist: receiver is in blacklist\");\n        if (from != _msgSender()) {\n            require(\n                !blacklist[_msgSender()],\n                \"Blacklist: spender is in blacklist\"\n            );\n        }\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/tokens/BasicToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"../extensions/ERC20Blacklist.sol\";\n\ncontract BasicToken is\n    ERC20,\n    ERC20Burnable,\n    ERC20Blacklist,\n    AccessControl,\n    Pausable\n{\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    uint256 private _totalMinted;\n\n    constructor(\n        uint256 initialSupply_,\n        address holderAddress_,\n        string memory name_,\n        string memory symbol_\n    ) ERC20(name_, symbol_) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _grantRole(PAUSER_ROLE, _msgSender());\n\n        _mint(holderAddress_, initialSupply_);\n    }\n\n    function totalBurn() public view virtual returns (uint256) {\n        return _totalMinted - totalSupply();\n    }\n\n    function totalMinted() public view virtual returns (uint256) {\n        return _totalMinted;\n    }\n\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        _totalMinted += amount;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20Blacklist, ERC20) whenNotPaused {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    function _checkRole(bytes32 role, address account)\n        internal\n        view\n        virtual\n        override\n    {\n        if (!hasRole(role, account) && !hasRole(DEFAULT_ADMIN_ROLE, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32),\n                        \" or \",\n                        Strings.toHexString(uint256(DEFAULT_ADMIN_ROLE), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    // --------- Administrative functions ---------\n    function pause() public onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function onWhitelistMode() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _onWhitelistMode();\n    }\n\n    function offWhitelistMode() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _offWhitelistMode();\n    }\n\n    function addToBlacklist(address[] calldata _addresses)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _addToBlacklist(_addresses);\n    }\n\n    function removeFromBlacklist(address[] calldata _addresses)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _removeFromBlacklist(_addresses);\n    }\n\n    function addToWhitelist(address[] calldata _addresses)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _addToWhitelist(_addresses);\n    }\n\n    function removeFromWhitelist(address[] calldata _addresses)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _removeFromWhitelist(_addresses);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Arrays.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n * total supply at the time are recorded for later access.\n *\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n * used to create an efficient ERC20 forking mechanism.\n *\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n * and the account address.\n *\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\n *\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\n * alternative consider {ERC20Votes}.\n *\n * ==== Gas Costs\n *\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\n *\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n * transfers will have normal cost until the next snapshot, and so on.\n */\n\nabstract contract ERC20Snapshot is ERC20 {\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n\n    using Arrays for uint256[];\n    using Counters for Counters.Counter;\n\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n    // Snapshot struct, but that would impede usage of functions that work on an array.\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalSupplySnapshots;\n\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\n    Counters.Counter private _currentSnapshotId;\n\n    /**\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n     */\n    event Snapshot(uint256 id);\n\n    /**\n     * @dev Creates a new snapshot and returns its snapshot id.\n     *\n     * Emits a {Snapshot} event that contains the same id.\n     *\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\n     *\n     * [WARNING]\n     * ====\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n     * you must consider that it can potentially be used by attackers in two ways.\n     *\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n     * section above.\n     *\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n     * ====\n     */\n    function _snapshot() internal virtual returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _getCurrentSnapshotId();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n     * @dev Get the current snapshotId\n     */\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\n        return _currentSnapshotId.current();\n    }\n\n    /**\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n        return snapshotted ? value : balanceOf(account);\n    }\n\n    /**\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n        return snapshotted ? value : totalSupply();\n    }\n\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) {\n            // mint\n            _updateAccountSnapshot(to);\n            _updateTotalSupplySnapshot();\n        } else if (to == address(0)) {\n            // burn\n            _updateAccountSnapshot(from);\n            _updateTotalSupplySnapshot();\n        } else {\n            // transfer\n            _updateAccountSnapshot(from);\n            _updateAccountSnapshot(to);\n        }\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n    }\n\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _getCurrentSnapshotId();\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n        if (ids.length == 0) {\n            return 0;\n        } else {\n            return ids[ids.length - 1];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/tokens/Token2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\";\nimport \"./BasicToken.sol\";\n\ncontract Token2 is BasicToken {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor(uint256 initialSupply_, address holderAddress_)\n        BasicToken(initialSupply_, holderAddress_, \"Test SAVR\", \"TSAVR\")\n    {\n        _grantRole(MINTER_ROLE, _msgSender());\n\n        isWhitelistRestrictionMode = true;\n        address[] memory whitelistAddresses = new address[](3);\n        whitelistAddresses[0] = _msgSender();\n        whitelistAddresses[1] = holderAddress_;\n        whitelistAddresses[2] = address(0); // For minting and burning\n        _addToWhitelist(whitelistAddresses);\n    }\n\n    function grantRole(bytes32 role, address account)\n        public\n        virtual\n        override\n        onlyRole(getRoleAdmin(role))\n    {\n        super.grantRole(role, account);\n        if (role == MINTER_ROLE) {\n            address[] memory addresses = new address[](1);\n            addresses[0] = account;\n            _addToWhitelist(addresses);\n        }\n    }\n\n    function revokeRole(bytes32 role, address account)\n        public\n        virtual\n        override\n        onlyRole(getRoleAdmin(role))\n    {\n        super.revokeRole(role, account);\n        if (role == MINTER_ROLE) {\n            address[] memory addresses = new address[](1);\n            addresses[0] = account;\n            _removeFromWhitelist(addresses);\n        }\n    }\n\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/mocks/ERC20BurnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract ERC20BurnableMock is ERC20, ERC20Burnable {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply\n    ) ERC20(name, symbol) {\n        _mint(msg.sender, initialSupply);\n    }\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./extensions/Subscribable.sol\";\nimport \"./interfaces/IReferralManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract Staking is AccessControl, Subscribable {\n    struct Stake {\n        uint256 stakeId;\n        uint256 amount;\n        uint256 timeStart;\n        uint256 timeEnd;\n        uint256 percent;\n        uint256 profit;\n        bool isClaimed;\n        bool isToken2;\n    }\n\n    struct User {\n        Stake[] stakes;\n        uint256 totalStakedToken1;\n        uint256 totalStakedToken2;\n        uint256 totalClaimed;\n        uint256 currentToken1Staked;\n    }\n\n    mapping(address => User) public users;\n\n    uint256 public PERCENTS_DIVIDER = 1000;\n    uint256 public TIME_STEP = 1 days;\n    uint256 public MIN_STAKE_LIMIT = 1 * 1e17; // 0.1 Token\n    address private _rewardPool;\n    uint256 public durationDays;\n    uint256 public reward; // percents, e.g. 70 == 7%\n\n    bool public isActive;\n    bool public shouldAddReferrerOnToken2Stake;\n\n    uint256 public totalStakesToken1No;\n    uint256 public totalStakesToken2No;\n    uint256 public totalStakedToken1;\n    uint256 public totalStakedToken2;\n    uint256 public totalClaimed;\n\n    IERC20 public token1;\n    ERC20Burnable public token2;\n    IReferralManager public referralManager;\n\n    event Staked(\n        address indexed user,\n        uint256 indexed stakeIndex,\n        uint256 amount,\n        uint256 profit,\n        bool isToken2,\n        uint256 indexed timestamp\n    );\n    event Claimed(\n        address indexed user,\n        uint256 indexed stakeIndex,\n        uint256 amount,\n        bool isToken2,\n        uint256 indexed timestamp\n    );\n    event ActivityChanged(bool isActive, address admin);\n\n    constructor(\n        address token1_,\n        address token2_,\n        address rewardPool_,\n        address referralManager_,\n        uint256 durationDays_,\n        uint256 rewardPercent_,\n        uint256 subscriptionCost_,\n        uint256 subscriptionPeriodDays_\n    ) Subscribable(token1_, subscriptionCost_, subscriptionPeriodDays_) {\n        require(token1_ != address(0));\n        require(token2_ != address(0));\n        require(rewardPool_ != address(0));\n        require(referralManager_ != address(0));\n        require(durationDays_ > 0);\n        require(rewardPercent_ > 0);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _rewardPool = rewardPool_;\n        durationDays = durationDays_;\n        reward = rewardPercent_;\n\n        token1 = IERC20(token1_);\n        token2 = ERC20Burnable(token2_);\n        referralManager = IReferralManager(referralManager_);\n    }\n\n    function deposit(\n        uint256 depositAmount_,\n        bool isToken2_,\n        address referrer\n    ) public whenActive subscribersOnly {\n        require(referrer != _msgSender(), \"Referrer can not be sender\");\n        require(\n            depositAmount_ >= MIN_STAKE_LIMIT,\n            \"Stake amount less than minimum value\"\n        );\n        uint256 profit = calculateStakeProfit(depositAmount_);\n\n        require(\n            profit <= token1.balanceOf(_rewardPool),\n            \"Not enough tokens for reward\"\n        );\n        if (isToken2_) {\n            token2.burnFrom(_msgSender(), depositAmount_);\n        } else {\n            token1.transferFrom(_msgSender(), address(this), depositAmount_);\n        }\n        token1.transferFrom(_rewardPool, address(this), profit);\n\n        User storage user = users[_msgSender()];\n        uint256 stakeId = user.stakes.length;\n\n        Stake memory newStake = Stake(\n            stakeId,\n            depositAmount_,\n            block.timestamp,\n            block.timestamp + durationDays * TIME_STEP,\n            reward,\n            profit,\n            false,\n            isToken2_\n        );\n\n        user.stakes.push(newStake);\n\n        if (isToken2_) {\n            user.totalStakedToken2 += depositAmount_;\n            totalStakedToken2 += depositAmount_;\n            totalStakesToken2No++;\n        } else {\n            user.totalStakedToken1 += depositAmount_;\n            user.currentToken1Staked += depositAmount_;\n            totalStakedToken1 += depositAmount_;\n            totalStakesToken1No++;\n        }\n        if (!isToken2_ || shouldAddReferrerOnToken2Stake) {\n            address userReferrer = referralManager.getUserReferrer(\n                _msgSender()\n            );\n            if (userReferrer == address(0) && referrer != address(0)) {\n                referralManager.setUserReferrer(_msgSender(), referrer);\n            }\n            _assignRefRewards(_msgSender(), depositAmount_);\n        }\n\n        emit Staked(\n            _msgSender(),\n            newStake.stakeId,\n            newStake.amount,\n            newStake.profit,\n            newStake.isToken2,\n            block.timestamp\n        );\n    }\n\n    function withdraw(uint256 stakeId_) public {\n        User storage user = users[_msgSender()];\n        require(stakeId_ < user.stakes.length, \"Invalid stake id\");\n\n        Stake storage stake = user.stakes[stakeId_];\n        require(!stake.isClaimed, \"Stake is already claimed\");\n        require(stake.timeEnd <= block.timestamp, \"Stake is not ready yet\");\n\n        uint256 withdrawAmount = _calculateStakeReward(stake);\n        stake.isClaimed = true;\n\n        token1.transfer(_msgSender(), withdrawAmount);\n        user.totalClaimed += withdrawAmount;\n        totalClaimed += withdrawAmount;\n        if (!stake.isToken2) {\n            user.currentToken1Staked -= stake.amount;\n        }\n\n        emit Claimed(\n            _msgSender(),\n            stake.stakeId,\n            withdrawAmount,\n            stake.isToken2,\n            block.timestamp\n        );\n    }\n\n    function _assignRefRewards(address depositSender, uint256 amount) internal {\n        uint256 totalLevels = referralManager.getReferralLevels();\n        address currentLevelUser = depositSender;\n\n        for (uint256 level = 1; level <= totalLevels; level++) {\n            address referrer = referralManager.getUserReferrer(\n                currentLevelUser\n            );\n\n            if (referrer != address(0)) {\n                if (referralManager.userHasSubscription(referrer, level)) {\n                    uint256 refReward = referralManager.calculateRefReward(\n                        amount,\n                        level\n                    );\n\n                    uint256 truncatedReward = min(\n                        refReward,\n                        users[referrer].currentToken1Staked\n                    );\n\n                    referralManager.addUserDividends(referrer, truncatedReward);\n                }\n\n                currentLevelUser = referrer;\n            } else break;\n        }\n    }\n\n    function subscribe() public whenActive {\n        _subscribe(_msgSender());\n    }\n\n    // --------- Helper functions ---------\n    function getContractInfo()\n        public\n        view\n        returns (\n            uint256 _durationDays,\n            uint256 _reward,\n            bool _isActive,\n            uint256 _totalStakesToken1No,\n            uint256 _totalStakesToken2No,\n            uint256 _totalStakedToken1,\n            uint256 _totalStakedToken2,\n            uint256 _totalClaimed,\n            uint256 _subscriptionCost,\n            uint256 _subscriptionPeriodDays\n        )\n    {\n        _durationDays = durationDays;\n        _reward = reward;\n        _isActive = isActive;\n        _totalStakesToken1No = totalStakesToken1No;\n        _totalStakesToken2No = totalStakesToken2No;\n        _totalStakedToken1 = totalStakedToken1;\n        _totalStakedToken2 = totalStakedToken2;\n        _totalClaimed = totalClaimed;\n        _subscriptionCost = subscriptionCost;\n        _subscriptionPeriodDays = subscriptionPeriodDays;\n    }\n\n    function getUserInfo(address userAddr_)\n        public\n        view\n        returns (\n            uint256 _totalStakedToken1,\n            uint256 _totalStakedToken2,\n            uint256 _totalClaimed,\n            uint256 _currentToken1Staked,\n            bool _subscribed,\n            uint256 _subscribedTill\n        )\n    {\n        User storage user = users[userAddr_];\n\n        _totalStakedToken1 = user.totalStakedToken1;\n        _totalStakedToken2 = user.totalStakedToken2;\n        _totalClaimed = user.totalClaimed;\n        _currentToken1Staked = user.currentToken1Staked;\n        _subscribed = isSubscriber(userAddr_);\n        _subscribedTill = _subscriptionExpiration(userAddr_);\n    }\n\n    function getUserStakes(address userAddr_)\n        public\n        view\n        returns (Stake[] memory stakes)\n    {\n        return users[userAddr_].stakes;\n    }\n\n    function getTimestamp() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function calculateStakeProfit(uint256 amount_)\n        public\n        view\n        returns (uint256)\n    {\n        return (amount_ * reward) / PERCENTS_DIVIDER;\n    }\n\n    function calculateStakeReward(address userAddr_, uint256 stakeId_)\n        public\n        view\n        returns (uint256)\n    {\n        return _calculateStakeReward(users[userAddr_].stakes[stakeId_]);\n    }\n\n    function _calculateStakeReward(Stake storage stake)\n        internal\n        view\n        returns (uint256)\n    {\n        if (stake.timeStart == 0 || stake.isClaimed) return 0;\n\n        uint256 stakeReward = stake.isToken2\n            ? stake.profit\n            : stake.amount + stake.profit;\n\n        if (stake.timeEnd <= block.timestamp) return stakeReward;\n\n        return\n            ((block.timestamp - stake.timeStart) * stakeReward) /\n            (stake.timeEnd - stake.timeStart);\n    }\n\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\n        return a <= b ? a : b;\n    }\n\n    modifier whenActive() {\n        require(isActive, \"Contract is not active\");\n        _;\n    }\n\n    // --------- Administrative functions ---------\n    function setActive(bool value_) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        isActive = value_;\n        emit ActivityChanged(value_, _msgSender());\n    }\n\n    function updateShouldAddReferrerOnToken2Stake(bool value)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        shouldAddReferrerOnToken2Stake = value;\n    }\n\n    function updateRewardPool(address poolAddress_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _rewardPool = poolAddress_;\n    }\n\n    function updateToken1(address token1_) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        token1 = IERC20(token1_);\n    }\n\n    function updateToken2(address token2_) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        token2 = ERC20Burnable(token2_);\n    }\n\n    function updateReferralManager(address referralManager_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        referralManager = IReferralManager(referralManager_);\n    }\n\n    function updatePercentDivider(uint256 divider_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        PERCENTS_DIVIDER = divider_;\n    }\n\n    function updateTimeStep(uint256 step_) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        TIME_STEP = step_;\n    }\n\n    function updateMinStakeLimit(uint256 minLimit_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        MIN_STAKE_LIMIT = minLimit_;\n    }\n\n    function updateDurationDays(uint256 duration_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        durationDays = duration_;\n    }\n\n    function updateReward(uint256 newReward_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        reward = newReward_;\n    }\n\n    function updateSubscriptionCost(uint256 cost_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _updateSubscriptionCost(cost_);\n    }\n\n    function updateSubscriptionPeriod(uint256 periodDays_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _updateSubscriptionPeriod(periodDays_);\n    }\n\n    function updateSubscriptionToken(address token_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _updateSubscriptionToken(token_);\n    }\n}\n"
    },
    "contracts/extensions/Subscribable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../tokens/Token1.sol\";\n\n// Tests for this contract are in the Staking.test.ts file\ncontract Subscribable is Context {\n    uint256 public subscriptionCost;\n    uint256 public subscriptionPeriodDays;\n\n    mapping(address => uint256) private _subscribers;\n\n    Token1 public subscriptionToken;\n\n    constructor(\n        address token_,\n        uint256 cost_,\n        uint256 periodDays_\n    ) {\n        require(\n            cost_ > 0,\n            \"Subscribable: subscription cost should be greater than 0\"\n        );\n        require(\n            periodDays_ > 0,\n            \"Subscribable: subscription period should be greater than 0\"\n        );\n        subscriptionToken = Token1(token_);\n        subscriptionCost = cost_;\n        subscriptionPeriodDays = periodDays_;\n    }\n\n    modifier subscribersOnly() virtual {\n        require(\n            isSubscriber(_msgSender()),\n            \"Subscribable: you are not subscribed\"\n        );\n        _;\n    }\n\n    function _subscribe(address addr_) internal virtual {\n        subscriptionToken.burnFrom(addr_, subscriptionCost);\n        _subscribers[addr_] = block.timestamp + subscriptionPeriodDays * 1 days;\n    }\n\n    // --------- Helper functions ---------\n    function isSubscriber(address addr_) public view virtual returns (bool) {\n        return _subscribers[addr_] >= block.timestamp;\n    }\n\n    function isSubscriber() public view virtual returns (bool) {\n        return isSubscriber(_msgSender());\n    }\n\n    function _subscriptionExpiration(address addr_)\n        internal\n        view\n        virtual\n        returns (uint256)\n    {\n        return _subscribers[addr_];\n    }\n\n    // --------- Administrative functions ---------\n    function _updateSubscriptionCost(uint256 cost_) internal {\n        subscriptionCost = cost_;\n    }\n\n    function _updateSubscriptionPeriod(uint256 periodDays_) internal {\n        subscriptionPeriodDays = periodDays_;\n    }\n\n    function _updateSubscriptionToken(address token_) internal {\n        subscriptionToken = Token1(token_);\n    }\n}\n"
    },
    "contracts/interfaces/IReferralManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\ninterface IReferralManager {\n    function getReferralLevels() external pure returns (uint256);\n\n    function addUserDividends(address user, uint256 reward) external;\n\n    function getUserReferrer(address user) external view returns (address);\n\n    function setUserReferrer(address user, address referrer) external;\n\n    function userHasSubscription(address user, uint256 level)\n        external\n        view\n        returns (bool);\n\n    function calculateRefReward(uint256 amount, uint256 level)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "contracts/tokens/Token1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\";\nimport \"./BasicToken.sol\";\n\ncontract Token1 is BasicToken, ERC20Snapshot {\n    bytes32 public constant SNAPSHOT_ROLE = keccak256(\"SNAPSHOT_ROLE\");\n\n    constructor(uint256 initialSupply_, address holderAddress_)\n        BasicToken(initialSupply_, holderAddress_, \"Test SAV\", \"TSAV\")\n    {\n        _grantRole(SNAPSHOT_ROLE, _msgSender());\n    }\n\n    function snapshot() public onlyRole(SNAPSHOT_ROLE) {\n        _snapshot();\n    }\n\n    function snapshotCount()\n        public\n        view\n        onlyRole(SNAPSHOT_ROLE)\n        returns (uint256)\n    {\n        return _getCurrentSnapshotId();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(BasicToken, ERC20Snapshot) whenNotPaused {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    function _mint(address account, uint256 amount)\n        internal\n        virtual\n        override(BasicToken, ERC20)\n    {\n        super._mint(account, amount);\n    }\n}\n"
    },
    "contracts/ReferralManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./interfaces/IReferralManager.sol\";\n\ncontract ReferralManager is IReferralManager, AccessControl {\n    uint256 public constant LEVELS = 10;\n    uint256 public SUBSCRIPTION_PERIOD_DAYS = 365;\n    uint256[] public REFERRAL_PERCENTS = [\n        100,\n        90,\n        80,\n        70,\n        60,\n        50,\n        40,\n        30,\n        20,\n        10\n    ];\n\n    struct User {\n        address referrer;\n        uint256[LEVELS] activeLevels;\n        uint256 totalRefDividends;\n        uint256 totalRefDividendsClaimed;\n        address[] referrals_1_lvl;\n        uint256[LEVELS] refCount;\n        bool isActive;\n    }\n\n    struct Referral {\n        address referralAddress;\n        uint256 level;\n    }\n\n    mapping(address => User) private users;\n    mapping(address => bool) private authorizedContracts;\n\n    ERC20Burnable public subscriptionToken;\n    IERC20 public rewardToken;\n    address private rewardPool;\n    uint256 public levelSubscriptionCost;\n    uint256 public fullSubscriptionCost;\n\n    event Subscribed(\n        address indexed subscriber,\n        uint256 levels,\n        uint256 indexed timestamp\n    );\n    event ReferralAdded(address indexed referrer, address indexed referral);\n\n    constructor(\n        address subscriptionToken_,\n        address rewardToken_,\n        address rewardPool_,\n        uint256 fullSubscriptionCost_,\n        uint256 levelSubscriptionCost_\n    ) {\n        require(subscriptionToken_ != address(0));\n        require(rewardToken_ != address(0));\n        require(rewardPool_ != address(0));\n        require(fullSubscriptionCost_ > 0);\n        require(levelSubscriptionCost_ > 0);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        subscriptionToken = ERC20Burnable(subscriptionToken_);\n        rewardToken = IERC20(rewardToken_);\n        rewardPool = rewardPool_;\n        fullSubscriptionCost = fullSubscriptionCost_;\n        levelSubscriptionCost = levelSubscriptionCost_;\n    }\n\n    function subscribeToLevels(uint256 levels) public {\n        require(levels > 0, \"Too low levels\");\n        require(levels <= LEVELS, \"Too much levels\");\n\n        uint256 price = levels * levelSubscriptionCost;\n        subscriptionToken.burnFrom(_msgSender(), price);\n\n        _setSubscription(_msgSender(), levels);\n    }\n\n    function subscribeToAllLevels() public {\n        subscriptionToken.burnFrom(_msgSender(), fullSubscriptionCost);\n        _setSubscription(_msgSender(), LEVELS);\n    }\n\n    function addUserDividends(address user, uint256 reward)\n        public\n        onlyAuthorizedContracts\n    {\n        users[user].totalRefDividends += reward;\n    }\n\n    function claimDividends(uint256 amount) public {\n        User storage user = users[_msgSender()];\n        require(\n            user.totalRefDividends - user.totalRefDividendsClaimed >= amount,\n            \"Insufficient amount\"\n        );\n\n        user.totalRefDividendsClaimed += amount;\n        rewardToken.transferFrom(rewardPool, _msgSender(), amount);\n    }\n\n    function setUserReferrer(address user, address referrer)\n        public\n        onlyAuthorizedContracts\n    {\n        require(user != address(0), \"User is zero address\");\n        require(referrer != address(0), \"Referrer is zero address\");\n        require(referrer != user, \"Referrer can not be user\");\n        require(\n            users[user].referrer == address(0),\n            \"Referrer is already specified\"\n        );\n        require(\n            userHasSubscription(referrer, 1),\n            \"Referrer has no subscription\"\n        );\n\n        users[user].referrer = referrer;\n        users[referrer].referrals_1_lvl.push(user);\n\n        address nextReferrer = referrer;\n        for (uint256 i = 0; i < LEVELS; i++) {\n            User storage ref = users[nextReferrer];\n            if (ref.isActive) {\n                ref.refCount[i] += 1;\n                nextReferrer = ref.referrer;\n            } else break;\n        }\n\n        emit ReferralAdded(referrer, user);\n    }\n\n    function _setSubscription(address subscriber, uint256 levels) internal {\n        uint256 subscriptionEnd = block.timestamp +\n            SUBSCRIPTION_PERIOD_DAYS *\n            1 days;\n\n        for (uint256 i = 0; i < levels; i++) {\n            users[subscriber].activeLevels[i] = subscriptionEnd;\n        }\n\n        users[subscriber].isActive = true;\n\n        emit Subscribed(subscriber, levels, block.timestamp);\n    }\n\n    // --------- Helper functions ---------\n    function getReferralLevels() public pure returns (uint256) {\n        return LEVELS;\n    }\n\n    function getUserInfo(address userAddress)\n        public\n        view\n        returns (\n            address referrer,\n            uint256 totalDividends,\n            uint256 totalClaimedDividends,\n            uint256 referrals_1_lvl,\n            uint256 totalReferrals\n        )\n    {\n        User storage user = users[userAddress];\n\n        referrer = user.referrer;\n        totalDividends = user.totalRefDividends;\n        totalClaimedDividends = user.totalRefDividendsClaimed;\n        referrals_1_lvl = user.referrals_1_lvl.length;\n        totalReferrals = _getUserReferralsCount(userAddress, 0);\n    }\n\n    function getUserReferrer(address user) public view returns (address) {\n        return users[user].referrer;\n    }\n\n    function getUser1LvlReferrals(address userAddress)\n        public\n        view\n        returns (address[] memory)\n    {\n        return users[userAddress].referrals_1_lvl;\n    }\n\n    function _getUserReferralsCount(address userAddress, uint256 currentLevel)\n        internal\n        view\n        returns (uint256)\n    {\n        User storage user = users[userAddress];\n        uint256 referralCounter = 0;\n\n        for (uint256 i = 0; i < LEVELS - currentLevel; i++) {\n            referralCounter += user.refCount[i];\n        }\n\n        return referralCounter;\n    }\n\n    // TODO: add staking info to referrals\n    function getUserReferrals(address userAddress, uint256 currentLevel)\n        public\n        view\n        returns (Referral[] memory)\n    {\n        uint256 referralsCount = _getUserReferralsCount(\n            userAddress,\n            currentLevel\n        );\n\n        uint256 nextReferralIndex = 0;\n        Referral[] memory referrals = new Referral[](referralsCount);\n\n        address[] memory level1Referrals = getUser1LvlReferrals(userAddress);\n\n        for (uint256 i = 0; i < level1Referrals.length; i++) {\n            referrals[nextReferralIndex] = Referral(\n                level1Referrals[i],\n                currentLevel + 1\n            );\n            nextReferralIndex++;\n\n            if (currentLevel + 1 < LEVELS) {\n                Referral[] memory theirReferrals = getUserReferrals(\n                    level1Referrals[i],\n                    currentLevel + 1\n                );\n\n                for (uint256 j = 0; j < theirReferrals.length; j++) {\n                    referrals[nextReferralIndex] = theirReferrals[j];\n                    nextReferralIndex++;\n                }\n            }\n        }\n\n        return referrals;\n    }\n\n    function userHasSubscription(address user, uint256 level)\n        public\n        view\n        returns (bool)\n    {\n        return users[user].activeLevels[level - 1] > block.timestamp;\n    }\n\n    function calculateRefReward(uint256 amount, uint256 level)\n        public\n        view\n        returns (uint256)\n    {\n        require(level > 0);\n        require(level <= LEVELS);\n        return (amount * REFERRAL_PERCENTS[level - 1]) / 100;\n    }\n\n    function isAuthorized(address contractAddress) public view returns (bool) {\n        return authorizedContracts[contractAddress];\n    }\n\n    modifier onlyAuthorizedContracts() {\n        require(isAuthorized(_msgSender()), \"Address not authorized\");\n        _;\n    }\n\n    // --------- Administrative functions ---------\n\n    function authorizeContract(address contractAddress)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        authorizedContracts[contractAddress] = true;\n    }\n\n    function removeContractAuthorization(address contractAddress)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        authorizedContracts[contractAddress] = false;\n    }\n\n    function updateSubscriptionPeriod(uint256 durationDays)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        SUBSCRIPTION_PERIOD_DAYS = durationDays;\n    }\n\n    function updateReferralPercent(uint256 level, uint256 percent)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(level > 0);\n        require(level <= LEVELS);\n        REFERRAL_PERCENTS[level - 1] = percent;\n    }\n\n    function updateSubscriptionToken(address token)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        subscriptionToken = ERC20Burnable(token);\n    }\n\n    function updateRewardToken(address token)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        rewardToken = IERC20(token);\n    }\n\n    function updateRewardPool(address poolAddress)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        rewardPool = poolAddress;\n    }\n\n    function updateLevelSubscriptionCost(uint256 cost)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        levelSubscriptionCost = cost;\n    }\n\n    function updateFullSubscriptionCost(uint256 cost)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        fullSubscriptionCost = cost;\n    }\n}\n"
    },
    "contracts/VendorSell.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract VendorSell is Context, AccessControl, Pausable {\n    using SafeERC20 for IERC20;\n\n    uint256 private SWAP_RATE_DIVIDER = 1000;\n    uint256 public swapRate; // divide on SWAP_RATE_DIVIDER\n    bool private _isSellAvailable;\n\n    IERC20 public token;\n    address private _tokenPool;\n    IERC20 public changeToken;\n    address private _changeTokenPool;\n\n    event TokensPurchased(\n        address indexed buyer,\n        uint256 amountToken,\n        uint256 amountChangeToken\n    );\n    event TokensSold(\n        address indexed seller,\n        uint256 amountToken,\n        uint256 amountChangeToken\n    );\n\n    constructor(\n        address tokenAddress_,\n        address tokenPool_,\n        address changeTokenAddress_,\n        address changeTokenPool_,\n        uint256 swapRate_\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        swapRate = swapRate_;\n\n        token = IERC20(tokenAddress_);\n        changeToken = IERC20(changeTokenAddress_);\n\n        _tokenPool = tokenPool_;\n        _changeTokenPool = changeTokenPool_;\n    }\n\n    // @params: _amountChangeToken - how much user spend\n    function buyTokens(uint256 _amountChangeToken) public whenNotPaused {\n        uint256 _amountToken = getEquivalentTokenEstimate(_amountChangeToken);\n        require(_amountToken > 0, \"Insufficient amount\");\n\n        require(\n            changeToken.transferFrom(\n                _msgSender(),\n                _changeTokenPool,\n                _amountChangeToken\n            ),\n            \"Change token transfer error\"\n        );\n        require(\n            token.transferFrom(_tokenPool, _msgSender(), _amountToken),\n            \"Token transfer error\"\n        );\n\n        emit TokensPurchased(_msgSender(), _amountToken, _amountChangeToken);\n    }\n\n    // @params: _amountToken - how much user spend\n    function sellTokens(uint256 _amountToken) public whenNotPaused {\n        require(_isSellAvailable, \"Selling is not available\");\n\n        uint256 _amountChangeToken = getEquivalentChangeTokenEstimate(\n            _amountToken\n        );\n        require(_amountChangeToken > 0, \"Insufficient amount\");\n\n        require(\n            token.transferFrom(_msgSender(), _tokenPool, _amountToken),\n            \"Token transfer error\"\n        );\n        require(\n            changeToken.transferFrom(\n                _changeTokenPool,\n                _msgSender(),\n                _amountChangeToken\n            ),\n            \"Change token transfer error\"\n        );\n\n        emit TokensSold(_msgSender(), _amountToken, _amountChangeToken);\n    }\n\n    // --------- Helper functions ---------\n    function getTokenReserve() public view returns (uint256) {\n        return token.balanceOf(_tokenPool);\n    }\n\n    function getChangeTokenReserve() public view returns (uint256) {\n        return changeToken.balanceOf(_changeTokenPool);\n    }\n\n    // !important: hope that decimals of tokens are the same\n    function getEquivalentChangeTokenEstimate(uint256 _amountToken)\n        public\n        view\n        returns (uint256)\n    {\n        return (_amountToken * SWAP_RATE_DIVIDER) / swapRate;\n    }\n\n    // !important: hope that decimals of tokens are the same\n    function getEquivalentTokenEstimate(uint256 _amountChangeToken)\n        public\n        view\n        returns (uint256)\n    {\n        return (_amountChangeToken * swapRate) / SWAP_RATE_DIVIDER;\n    }\n\n    function isSellAvailable() public view returns (bool) {\n        return _isSellAvailable;\n    }\n\n    // --------- Administrative functions ---------\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    function enableSell() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _isSellAvailable = true;\n    }\n\n    function disableSell() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _isSellAvailable = false;\n    }\n\n    function updateTokenPool(address pool) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        _tokenPool = pool;\n    }\n\n    function updateSwapRate(uint256 swapRate_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        swapRate = swapRate_;\n    }\n\n    function updateChangeTokenPool(address pool)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _changeTokenPool = pool;\n    }\n\n    function updateToken(IERC20 token_) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        token = token_;\n    }\n\n    function updateChangeToken(IERC20 token_)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        changeToken = token_;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/TokenVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract TokenVesting is AccessControl, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    struct VestingSchedule {\n        bool initialized;\n        // beneficiary of tokens after they are released\n        address beneficiary;\n        // cliff period in seconds\n        uint256 cliff;\n        // start time of the vesting period\n        uint256 start;\n        // duration of the vesting period in seconds\n        uint256 duration;\n        // duration of a slice period for the vesting in seconds\n        uint256 slicePeriodSeconds;\n        // whether or not the vesting is revocable\n        bool revocable;\n        // total amount of tokens to be released at the end of the vesting\n        uint256 amountTotal;\n        // amount of tokens released\n        uint256 released;\n        // whether or not the vesting has been revoked\n        bool revoked;\n    }\n\n    // address of the ERC20 token\n    IERC20 private immutable _token;\n    address payable private _vestingPool;\n\n    bytes32[] private vestingSchedulesIds;\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\n    mapping(address => uint256) private holdersVestingCount;\n\n    event Released(address to, uint256 amount);\n    event Revoked(bytes32 vestingScheduleId);\n\n    /**\n     * @dev Creates a vesting contract.\n     * @param token_ address of the ERC20 token contract\n     */\n    constructor(address token_, address pool_) {\n        require(token_ != address(0x0));\n        require(pool_ != address(0x0));\n        _token = IERC20(token_);\n        _vestingPool = payable(pool_);\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    /**\n     * @notice Creates a new vesting schedule for a beneficiary.\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n     * @param _start start time of the vesting period\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n     * @param _duration duration in seconds of the period in which the tokens will vest\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\n     * @param _revocable whether the vesting is revocable or not\n     * @param _amount total amount of tokens to be released at the end of the vesting\n     */\n    function createVestingSchedule(\n        address _beneficiary,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _duration,\n        uint256 _slicePeriodSeconds,\n        bool _revocable,\n        uint256 _amount\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(\n            this.getReservesBalance() >= _amount,\n            \"TokenVesting: cannot create vesting schedule because not sufficient tokens\"\n        );\n        require(_duration > 0, \"TokenVesting: duration must be > 0\");\n        require(_amount > 0, \"TokenVesting: amount must be > 0\");\n        require(\n            _slicePeriodSeconds >= 1,\n            \"TokenVesting: slicePeriodSeconds must be >= 1\"\n        );\n        bytes32 vestingScheduleId = this.computeNextVestingScheduleIdForHolder(\n            _beneficiary\n        );\n        uint256 cliff = _start.add(_cliff);\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\n            true,\n            _beneficiary,\n            cliff,\n            _start,\n            _duration,\n            _slicePeriodSeconds,\n            _revocable,\n            _amount,\n            0,\n            false\n        );\n        _token.safeTransferFrom(_vestingPool, address(this), _amount);\n        vestingSchedulesIds.push(vestingScheduleId);\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\n        holdersVestingCount[_beneficiary] = currentVestingCount.add(1);\n    }\n\n    /**\n     * @notice Release vested amount of tokens.\n     * @param vestingScheduleId the vesting schedule identifier\n     * @param amount the amount to release\n     */\n    function release(bytes32 vestingScheduleId, uint256 amount)\n        public\n        nonReentrant\n        onlyIfVestingScheduleExistsAndNotRevoked(vestingScheduleId)\n    {\n        VestingSchedule storage vestingSchedule = vestingSchedules[\n            vestingScheduleId\n        ];\n        bool isBeneficiary = _msgSender() == vestingSchedule.beneficiary;\n        bool isAdmin = hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        require(\n            isBeneficiary || isAdmin,\n            \"TokenVesting: only beneficiary and admin can release vested tokens\"\n        );\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\n        require(\n            vestedAmount >= amount,\n            \"TokenVesting: cannot release tokens, not enough vested tokens\"\n        );\n        vestingSchedule.released = vestingSchedule.released.add(amount);\n        address payable beneficiaryPayable = payable(\n            vestingSchedule.beneficiary\n        );\n        _token.safeTransfer(beneficiaryPayable, amount);\n        emit Released(beneficiaryPayable, amount);\n    }\n\n    /**\n     * @notice Revokes the vesting schedule for given identifier.\n     * @param vestingScheduleId the vesting schedule identifier\n     */\n    function revoke(bytes32 vestingScheduleId)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        onlyIfVestingScheduleExistsAndNotRevoked(vestingScheduleId)\n    {\n        VestingSchedule storage vestingSchedule = vestingSchedules[\n            vestingScheduleId\n        ];\n        require(\n            vestingSchedule.revocable == true,\n            \"TokenVesting: vesting is not revocable\"\n        );\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\n        if (vestedAmount > 0) {\n            release(vestingScheduleId, vestedAmount);\n        }\n        uint256 unreleased = vestingSchedule.amountTotal.sub(\n            vestingSchedule.released\n        );\n        _token.safeTransfer(_vestingPool, unreleased);\n        vestingSchedule.revoked = true;\n\n        emit Revoked(vestingScheduleId);\n    }\n\n    // --------- Helper functions ---------\n    /**\n     * @dev Returns the number of vesting schedules associated to a beneficiary.\n     * @return the number of vesting schedules\n     */\n    function getVestingSchedulesCountByBeneficiary(address _beneficiary)\n        external\n        view\n        returns (uint256)\n    {\n        return holdersVestingCount[_beneficiary];\n    }\n\n    /**\n     * @dev Returns the vesting schedule id at the given index.\n     * @return the vesting id\n     */\n    function getVestingIdAtIndex(uint256 index)\n        external\n        view\n        returns (bytes32)\n    {\n        require(\n            index < getVestingSchedulesCount(),\n            \"TokenVesting: index out of bounds\"\n        );\n        return vestingSchedulesIds[index];\n    }\n\n    /**\n     * @notice Returns the vesting schedule information for a given holder and index.\n     * @return the vesting schedule structure information\n     */\n    function getVestingScheduleByAddressAndIndex(address holder, uint256 index)\n        external\n        view\n        returns (VestingSchedule memory)\n    {\n        return\n            getVestingSchedule(\n                computeVestingScheduleIdForAddressAndIndex(holder, index)\n            );\n    }\n\n    /**\n     * @notice Returns the total amount of vesting schedules.\n     * @return the total amount of vesting schedules\n     */\n    function getVestingSchedulesTotalAmount() external view returns (uint256) {\n        return _token.balanceOf(address(this));\n    }\n\n    /**\n     * @dev Returns the address of the ERC20 token managed by the vesting contract.\n     */\n    function getToken() external view returns (address) {\n        return address(_token);\n    }\n\n    /**\n     * @dev Returns the number of vesting schedules managed by this contract.\n     * @return the number of vesting schedules\n     */\n    function getVestingSchedulesCount() public view returns (uint256) {\n        return vestingSchedulesIds.length;\n    }\n\n    /**\n     * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\n     * @return the vested amount\n     */\n    function computeReleasableAmount(bytes32 vestingScheduleId)\n        public\n        view\n        onlyIfVestingScheduleExistsAndNotRevoked(vestingScheduleId)\n        returns (uint256)\n    {\n        VestingSchedule storage vestingSchedule = vestingSchedules[\n            vestingScheduleId\n        ];\n        return _computeReleasableAmount(vestingSchedule);\n    }\n\n    /**\n     * @notice Returns the vesting schedule information for a given identifier.\n     * @return the vesting schedule structure information\n     */\n    function getVestingSchedule(bytes32 vestingScheduleId)\n        public\n        view\n        returns (VestingSchedule memory)\n    {\n        return vestingSchedules[vestingScheduleId];\n    }\n\n    /**\n     * @dev Returns the amount of tokens that can be withdrawn by the owner.\n     * @return the amount of tokens\n     */\n    function getReservesBalance() public view returns (uint256) {\n        return _token.balanceOf(_vestingPool);\n    }\n\n    /**\n     * @dev Computes the next vesting schedule identifier for a given holder address.\n     */\n    function computeNextVestingScheduleIdForHolder(address holder)\n        public\n        view\n        returns (bytes32)\n    {\n        return\n            computeVestingScheduleIdForAddressAndIndex(\n                holder,\n                holdersVestingCount[holder]\n            );\n    }\n\n    /**\n     * @dev Returns the last vesting schedule for a given holder address.\n     */\n    function getLastVestingScheduleForHolder(address holder)\n        public\n        view\n        returns (VestingSchedule memory)\n    {\n        return\n            vestingSchedules[\n                computeVestingScheduleIdForAddressAndIndex(\n                    holder,\n                    holdersVestingCount[holder] - 1\n                )\n            ];\n    }\n\n    /**\n     * @dev Computes the vesting schedule identifier for an address and an index.\n     */\n    function computeVestingScheduleIdForAddressAndIndex(\n        address holder,\n        uint256 index\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(holder, index));\n    }\n\n    /**\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\n     * @return the amount of releasable tokens\n     */\n    function _computeReleasableAmount(VestingSchedule memory vestingSchedule)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 currentTime = getCurrentTime();\n        if (\n            (currentTime < vestingSchedule.cliff) ||\n            vestingSchedule.revoked == true\n        ) {\n            return 0;\n        } else if (\n            currentTime >= vestingSchedule.cliff.add(vestingSchedule.duration)\n        ) {\n            return vestingSchedule.amountTotal.sub(vestingSchedule.released);\n        } else {\n            uint256 timeAfterCliff = currentTime.sub(vestingSchedule.cliff);\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\n            uint256 vestedSlicePeriods = timeAfterCliff.div(secondsPerSlice);\n            uint256 vestedSeconds = vestedSlicePeriods.mul(secondsPerSlice);\n            uint256 vestedAmount = vestingSchedule\n                .amountTotal\n                .mul(vestedSeconds)\n                .div(vestingSchedule.duration);\n            vestedAmount = vestedAmount.sub(vestingSchedule.released);\n            return vestedAmount;\n        }\n    }\n\n    function getCurrentTime() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n\n    /**\n     * @dev Reverts if the vesting schedule does not exist or has been revoked.\n     */\n    modifier onlyIfVestingScheduleExistsAndNotRevoked(\n        bytes32 vestingScheduleId\n    ) {\n        require(vestingSchedules[vestingScheduleId].initialized == true);\n        require(vestingSchedules[vestingScheduleId].revoked == false);\n        _;\n    }\n\n    // --------- Administrative functions ---------\n    function updateVestingPool(address pool)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            pool != address(0x0),\n            \"TokenVesting: pool can not be zero address\"\n        );\n        _vestingPool = payable(pool);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}