{
  "address": "0x29549BF22Db03E804552215C6Fa7640f3F538aCE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "squadsManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "durationDays_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPercent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionCost_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionPeriodDays_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "ActivityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isToken2",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isToken2",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_STAKE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTS_DIVIDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIME_STEP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "calculateStakeProfit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeId_",
          "type": "uint256"
        }
      ],
      "name": "calculateStakeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isToken2_",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "durationDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_durationDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_totalStakesToken1No",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalStakesToken2No",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalStakedToken1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalStakedToken2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionPeriodDays",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr_",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalStakedToken1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalStakedToken2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentToken1Staked",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_subscribed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_subscribedTill",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr_",
          "type": "address"
        }
      ],
      "name": "getUserStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profit",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isToken2",
              "type": "bool"
            }
          ],
          "internalType": "struct IStaking.Stake[]",
          "name": "stakes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSubscriber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr_",
          "type": "address"
        }
      ],
      "name": "isSubscriber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralManager",
      "outputs": [
        {
          "internalType": "contract IReferralManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value_",
          "type": "bool"
        }
      ],
      "name": "setActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldAddReferrerOnToken2Stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "squadsManager",
      "outputs": [
        {
          "internalType": "contract ISquads",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionPeriodDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionToken",
      "outputs": [
        {
          "internalType": "contract Token1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token2",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedToken1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedToken2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakesToken1No",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakesToken2No",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration_",
          "type": "uint256"
        }
      ],
      "name": "updateDurationDays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLimit_",
          "type": "uint256"
        }
      ],
      "name": "updateMinStakeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "divider_",
          "type": "uint256"
        }
      ],
      "name": "updatePercentDivider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        }
      ],
      "name": "updateReferralManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReward_",
          "type": "uint256"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress_",
          "type": "address"
        }
      ],
      "name": "updateRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "updateShouldAddReferrerOnToken2Stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "squadsManager_",
          "type": "address"
        }
      ],
      "name": "updateSquadsManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cost_",
          "type": "uint256"
        }
      ],
      "name": "updateSubscriptionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "periodDays_",
          "type": "uint256"
        }
      ],
      "name": "updateSubscriptionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "updateSubscriptionToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "step_",
          "type": "uint256"
        }
      ],
      "name": "updateTimeStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        }
      ],
      "name": "updateToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2_",
          "type": "address"
        }
      ],
      "name": "updateToken2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId_",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ebc3bfab12a71eb9c981e343dd22d7aa87bc1d9d3dbd601b9eca4fc82b9b945",
  "receipt": {
    "to": null,
    "from": "0x9E679eC533e68a280a97ABd619d9C42228096F81",
    "contractAddress": "0x29549BF22Db03E804552215C6Fa7640f3F538aCE",
    "transactionIndex": 1,
    "gasUsed": "2268763",
    "logsBloom": "0x
    "blockHash": "0xcf74e8bd27d1c5f7bf5a387acf0434b97d14f222481ddcc7d58bf6539ddfdecc",
    "transactionHash": "0x6ebc3bfab12a71eb9c981e343dd22d7aa87bc1d9d3dbd601b9eca4fc82b9b945",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 28445046,
        "transactionHash": "0x6ebc3bfab12a71eb9c981e343dd22d7aa87bc1d9d3dbd601b9eca4fc82b9b945",
        "address": "0x29549BF22Db03E804552215C6Fa7640f3F538aCE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xcf74e8bd27d1c5f7bf5a387acf0434b97d14f222481ddcc7d58bf6539ddfdecc"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28445046,
        "transactionHash": "0x6ebc3bfab12a71eb9c981e343dd22d7aa87bc1d9d3dbd601b9eca4fc82b9b945",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000509a477c604b3f0000000000000000000000000000000000000000000000000834eec146adc94f00000000000000000000000000000000000000000000160127521632663e479900000000000000000000000000000000000000000000000007e45479ca4d7e1000000000000000000000000000000000000000000000160127a2b079e29e92d8",
        "logIndex": 8,
        "blockHash": "0xcf74e8bd27d1c5f7bf5a387acf0434b97d14f222481ddcc7d58bf6539ddfdecc"
      }
    ],
    "blockNumber": 28445046,
    "cumulativeGasUsed": "2414364",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb971Bbda8043267e8047372A29A5bfA8B78A2D04",
    "0xbaD18847048E47f58f90B049A3C2b5A308Fb0E66",
    "0xf982D706f37Cb781D567395877EC35eDCB7Cf65C",
    "0x4C5d840E7742119278AdaBb63cdFca5099D7DAea",
    "0x0000000000000000000000000000000000000000",
    7,
    500,
    "15000000000000000000",
    365
  ],
  "numDeployments": 7,
  "solcInputHash": "03aed533e319a0a39f891012129b9a07",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"squadsManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"durationDays_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionCost_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionPeriodDays_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ActivityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"calculateStakeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId_\",\"type\":\"uint256\"}],\"name\":\"calculateStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isToken2_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakesToken1No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakesToken2No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakedToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakedToken2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionPeriodDays\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr_\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStakedToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakedToken2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentToken1Staked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_subscribed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_subscribedTill\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr_\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSubscriber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"isSubscriber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralManager\",\"outputs\":[{\"internalType\":\"contract IReferralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAddReferrerOnToken2Stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squadsManager\",\"outputs\":[{\"internalType\":\"contract ISquads\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPeriodDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionToken\",\"outputs\":[{\"internalType\":\"contract Token1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedToken1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedToken2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesToken1No\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesToken2No\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"}],\"name\":\"updateDurationDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLimit_\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"divider_\",\"type\":\"uint256\"}],\"name\":\"updatePercentDivider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"}],\"name\":\"updateReferralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward_\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress_\",\"type\":\"address\"}],\"name\":\"updateRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateShouldAddReferrerOnToken2Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"squadsManager_\",\"type\":\"address\"}],\"name\":\"updateSquadsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost_\",\"type\":\"uint256\"}],\"name\":\"updateSubscriptionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodDays_\",\"type\":\"uint256\"}],\"name\":\"updateSubscriptionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"updateSubscriptionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"step_\",\"type\":\"uint256\"}],\"name\":\"updateTimeStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"name\":\"updateToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2_\",\"type\":\"address\"}],\"name\":\"updateToken2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Arrays.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\n *\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\n * alternative consider {ERC20Votes}.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\n\\nabstract contract ERC20Snapshot is ERC20 {\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using Arrays for uint256[];\\n    using Counters for Counters.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    Counters.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _getCurrentSnapshotId();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Get the current snapshotId\\n     */\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\n        return _currentSnapshotId.current();\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        } else if (to == address(0)) {\\n            // burn\\n            _updateAccountSnapshot(from);\\n            _updateTotalSupplySnapshot();\\n        } else {\\n            // transfer\\n            _updateAccountSnapshot(from);\\n            _updateAccountSnapshot(to);\\n        }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9f3a9fc338edd87bff11d626ee6f365ac72f03a8841c4a2938438ef81e8cf1d9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7bc891be2bc5948340a8fb14ad36c8846230c9086269e37f3febf0dc239c9f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./extensions/Subscribable.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/ISquads.sol\\\";\\nimport \\\"./interfaces/IReferralManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ncontract Staking is IStaking, AccessControl, Subscribable {\\n    mapping(address => User) private users;\\n\\n    uint256 public PERCENTS_DIVIDER = 1000;\\n    uint256 public TIME_STEP = 1 days;\\n    uint256 public MIN_STAKE_LIMIT = 1 * 1e17; // 0.1 Token\\n    address private _rewardPool;\\n    uint256 public durationDays;\\n    uint256 public reward; // percents, e.g. 70 == 7%\\n\\n    bool public isActive;\\n    bool public shouldAddReferrerOnToken2Stake;\\n\\n    uint256 public totalStakesToken1No;\\n    uint256 public totalStakesToken2No;\\n    uint256 public totalStakedToken1;\\n    uint256 public totalStakedToken2;\\n    uint256 public totalClaimed;\\n\\n    IERC20 public token1;\\n    ERC20Burnable public token2;\\n    IReferralManager public referralManager;\\n    ISquads public squadsManager;\\n\\n    event Staked(\\n        address indexed user,\\n        uint256 indexed stakeIndex,\\n        uint256 amount,\\n        uint256 profit,\\n        bool isToken2,\\n        uint256 indexed timestamp\\n    );\\n    event Claimed(\\n        address indexed user,\\n        uint256 indexed stakeIndex,\\n        uint256 amount,\\n        bool isToken2,\\n        uint256 indexed timestamp\\n    );\\n    event ActivityChanged(bool isActive, address admin);\\n\\n    constructor(\\n        address token1_,\\n        address token2_,\\n        address rewardPool_,\\n        address referralManager_,\\n        address squadsManager_,\\n        uint256 durationDays_,\\n        uint256 rewardPercent_,\\n        uint256 subscriptionCost_,\\n        uint256 subscriptionPeriodDays_\\n    ) Subscribable(token1_, subscriptionCost_, subscriptionPeriodDays_) {\\n        require(token1_ != address(0));\\n        require(token2_ != address(0));\\n        require(rewardPool_ != address(0));\\n        require(referralManager_ != address(0));\\n        require(durationDays_ > 0);\\n        require(rewardPercent_ > 0);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _rewardPool = rewardPool_;\\n        durationDays = durationDays_;\\n        reward = rewardPercent_;\\n\\n        token1 = IERC20(token1_);\\n        token2 = ERC20Burnable(token2_);\\n        referralManager = IReferralManager(referralManager_);\\n        squadsManager = ISquads(squadsManager_);\\n    }\\n\\n    function deposit(\\n        uint256 depositAmount_,\\n        bool isToken2_,\\n        address referrer\\n    ) public whenActive subscribersOnly {\\n        require(referrer != _msgSender(), \\\"Referrer can not be sender\\\");\\n        require(\\n            depositAmount_ >= MIN_STAKE_LIMIT,\\n            \\\"Stake amount less than minimum value\\\"\\n        );\\n        uint256 stakingReward = calculateStakeProfit(depositAmount_);\\n\\n        require(\\n            stakingReward <= token1.balanceOf(_rewardPool),\\n            \\\"Not enough tokens for reward\\\"\\n        );\\n        if (isToken2_) {\\n            token2.burnFrom(_msgSender(), depositAmount_);\\n        } else {\\n            token1.transferFrom(_msgSender(), address(this), depositAmount_);\\n        }\\n        token1.transferFrom(_rewardPool, address(this), stakingReward);\\n\\n        User storage user = users[_msgSender()];\\n        uint256 stakeId = user.stakes.length;\\n\\n        Stake memory newStake = Stake(\\n            stakeId,\\n            depositAmount_,\\n            block.timestamp,\\n            block.timestamp + durationDays * TIME_STEP,\\n            reward,\\n            stakingReward,\\n            false,\\n            isToken2_\\n        );\\n\\n        user.stakes.push(newStake);\\n\\n        if (isToken2_) {\\n            user.totalStakedToken2 += depositAmount_;\\n            totalStakedToken2 += depositAmount_;\\n            totalStakesToken2No++;\\n        } else {\\n            user.totalStakedToken1 += depositAmount_;\\n            user.currentToken1Staked += depositAmount_;\\n            totalStakedToken1 += depositAmount_;\\n            totalStakesToken1No++;\\n        }\\n\\n        // Referrals\\n        if (!isToken2_ || shouldAddReferrerOnToken2Stake) {\\n            address userReferrer = referralManager.getUserReferrer(\\n                _msgSender()\\n            );\\n            if (userReferrer == address(0) && referrer != address(0)) {\\n                referralManager.setUserReferrer(_msgSender(), referrer);\\n                userReferrer = referralManager.getUserReferrer(_msgSender());\\n            }\\n            _assignRefRewards(_msgSender(), stakingReward);\\n\\n            // Squads\\n            if (\\n                address(squadsManager) != address(0) &&\\n                userReferrer != address(0)\\n            ) {\\n                squadsManager.tryToAddMember(\\n                    userReferrer,\\n                    _msgSender(),\\n                    depositAmount_\\n                );\\n            }\\n        }\\n\\n        emit Staked(\\n            _msgSender(),\\n            newStake.stakeId,\\n            newStake.amount,\\n            newStake.profit,\\n            newStake.isToken2,\\n            block.timestamp\\n        );\\n    }\\n\\n    function withdraw(uint256 stakeId_) public {\\n        User storage user = users[_msgSender()];\\n        require(stakeId_ < user.stakes.length, \\\"Invalid stake id\\\");\\n\\n        Stake storage stake = user.stakes[stakeId_];\\n        require(!stake.isClaimed, \\\"Stake is already claimed\\\");\\n        require(stake.timeEnd <= block.timestamp, \\\"Stake is not ready yet\\\");\\n\\n        uint256 withdrawAmount = _calculateStakeReward(stake);\\n        stake.isClaimed = true;\\n\\n        token1.transfer(_msgSender(), withdrawAmount);\\n        user.totalClaimed += withdrawAmount;\\n        totalClaimed += withdrawAmount;\\n        if (!stake.isToken2) {\\n            user.currentToken1Staked -= stake.amount;\\n        }\\n\\n        emit Claimed(\\n            _msgSender(),\\n            stake.stakeId,\\n            withdrawAmount,\\n            stake.isToken2,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _assignRefRewards(address depositSender, uint256 stakingReward)\\n        internal\\n    {\\n        uint256 totalLevels = referralManager.getReferralLevels();\\n        address currentLevelUser = depositSender;\\n\\n        for (uint256 level = 1; level <= totalLevels; level++) {\\n            address referrer = referralManager.getUserReferrer(\\n                currentLevelUser\\n            );\\n\\n            if (referrer != address(0)) {\\n                if (referralManager.userHasSubscription(referrer, level)) {\\n                    uint256 refReward = referralManager.calculateRefReward(\\n                        stakingReward,\\n                        level\\n                    );\\n\\n                    uint256 truncatedReward = min(\\n                        refReward,\\n                        users[referrer].currentToken1Staked\\n                    );\\n\\n                    referralManager.addUserDividends(referrer, truncatedReward);\\n                }\\n\\n                currentLevelUser = referrer;\\n            } else break;\\n        }\\n    }\\n\\n    function subscribe() public whenActive {\\n        _subscribe(_msgSender());\\n    }\\n\\n    // --------- Helper functions ---------\\n    function getContractInfo()\\n        public\\n        view\\n        returns (\\n            uint256 _durationDays,\\n            uint256 _reward,\\n            bool _isActive,\\n            uint256 _totalStakesToken1No,\\n            uint256 _totalStakesToken2No,\\n            uint256 _totalStakedToken1,\\n            uint256 _totalStakedToken2,\\n            uint256 _totalClaimed,\\n            uint256 _subscriptionCost,\\n            uint256 _subscriptionPeriodDays\\n        )\\n    {\\n        _durationDays = durationDays;\\n        _reward = reward;\\n        _isActive = isActive;\\n        _totalStakesToken1No = totalStakesToken1No;\\n        _totalStakesToken2No = totalStakesToken2No;\\n        _totalStakedToken1 = totalStakedToken1;\\n        _totalStakedToken2 = totalStakedToken2;\\n        _totalClaimed = totalClaimed;\\n        _subscriptionCost = subscriptionCost;\\n        _subscriptionPeriodDays = subscriptionPeriodDays;\\n    }\\n\\n    function getUserInfo(address userAddr_)\\n        public\\n        view\\n        returns (\\n            uint256 _totalStakedToken1,\\n            uint256 _totalStakedToken2,\\n            uint256 _totalClaimed,\\n            uint256 _currentToken1Staked,\\n            bool _subscribed,\\n            uint256 _subscribedTill\\n        )\\n    {\\n        User storage user = users[userAddr_];\\n\\n        _totalStakedToken1 = user.totalStakedToken1;\\n        _totalStakedToken2 = user.totalStakedToken2;\\n        _totalClaimed = user.totalClaimed;\\n        _currentToken1Staked = user.currentToken1Staked;\\n        _subscribed = isSubscriber(userAddr_);\\n        _subscribedTill = _subscriptionExpiration(userAddr_);\\n    }\\n\\n    function getUserStakes(address userAddr_)\\n        public\\n        view\\n        returns (Stake[] memory stakes)\\n    {\\n        return users[userAddr_].stakes;\\n    }\\n\\n    function getTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function calculateStakeProfit(uint256 amount_)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return (amount_ * reward) / PERCENTS_DIVIDER;\\n    }\\n\\n    function calculateStakeReward(address userAddr_, uint256 stakeId_)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _calculateStakeReward(users[userAddr_].stakes[stakeId_]);\\n    }\\n\\n    function _calculateStakeReward(Stake storage stake)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (stake.timeStart == 0 || stake.isClaimed) return 0;\\n\\n        uint256 stakeReward = stake.isToken2\\n            ? stake.profit\\n            : stake.amount + stake.profit;\\n\\n        if (stake.timeEnd <= block.timestamp) return stakeReward;\\n\\n        return\\n            ((block.timestamp - stake.timeStart) * stakeReward) /\\n            (stake.timeEnd - stake.timeStart);\\n    }\\n\\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    modifier whenActive() {\\n        require(isActive, \\\"Contract is not active\\\");\\n        _;\\n    }\\n\\n    // --------- Administrative functions ---------\\n    function setActive(bool value_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        isActive = value_;\\n        emit ActivityChanged(value_, _msgSender());\\n    }\\n\\n    function updateShouldAddReferrerOnToken2Stake(bool value)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        shouldAddReferrerOnToken2Stake = value;\\n    }\\n\\n    function updateRewardPool(address poolAddress_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _rewardPool = poolAddress_;\\n    }\\n\\n    function updateToken1(address token1_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        token1 = IERC20(token1_);\\n    }\\n\\n    function updateToken2(address token2_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        token2 = ERC20Burnable(token2_);\\n    }\\n\\n    function updateReferralManager(address referralManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        referralManager = IReferralManager(referralManager_);\\n    }\\n\\n    function updateSquadsManager(address squadsManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        squadsManager = ISquads(squadsManager_);\\n    }\\n\\n    function updatePercentDivider(uint256 divider_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        PERCENTS_DIVIDER = divider_;\\n    }\\n\\n    function updateTimeStep(uint256 step_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        TIME_STEP = step_;\\n    }\\n\\n    function updateMinStakeLimit(uint256 minLimit_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        MIN_STAKE_LIMIT = minLimit_;\\n    }\\n\\n    function updateDurationDays(uint256 duration_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        durationDays = duration_;\\n    }\\n\\n    function updateReward(uint256 newReward_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        reward = newReward_;\\n    }\\n\\n    function updateSubscriptionCost(uint256 cost_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _updateSubscriptionCost(cost_);\\n    }\\n\\n    function updateSubscriptionPeriod(uint256 periodDays_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _updateSubscriptionPeriod(periodDays_);\\n    }\\n\\n    function updateSubscriptionToken(address token_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _updateSubscriptionToken(token_);\\n    }\\n}\\n\",\"keccak256\":\"0xbeb727fd7207c75b208be01a85ec541431d34f67b49901f6223fbb97b246593c\",\"license\":\"MIT\"},\"contracts/extensions/Blacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n// Tests for this contract are in the BasicToken.test.ts file\\nabstract contract Blacklist is Context {\\n    mapping(address => bool) blacklist;\\n    mapping(address => bool) whitelist;\\n\\n    bool public isWhitelistRestrictionMode;\\n\\n    event BlacklistAdded(address[] _addresses, address admin);\\n    event BlacklistRemoved(address[] _addresses, address admin);\\n    event WhitelistAdded(address[] _addresses, address admin);\\n    event WhitelistRemoved(address[] _addresses, address admin);\\n    event WhitelistEnabled(address admin);\\n    event WhitelistDisabled(address admin);\\n\\n    function _addToBlacklist(address[] memory _addresses) internal virtual {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            blacklist[_addresses[i]] = true;\\n        }\\n        emit BlacklistAdded(_addresses, _msgSender());\\n    }\\n\\n    function _removeFromBlacklist(address[] memory _addresses)\\n        internal\\n        virtual\\n    {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            blacklist[_addresses[i]] = false;\\n        }\\n        emit BlacklistRemoved(_addresses, _msgSender());\\n    }\\n\\n    function _addToWhitelist(address[] memory _addresses) internal virtual {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            whitelist[_addresses[i]] = true;\\n        }\\n        emit WhitelistAdded(_addresses, _msgSender());\\n    }\\n\\n    function _removeFromWhitelist(address[] memory _addresses)\\n        internal\\n        virtual\\n    {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            whitelist[_addresses[i]] = false;\\n        }\\n        emit WhitelistRemoved(_addresses, _msgSender());\\n    }\\n\\n    // --------- Helper functions ---------\\n    function isAddressInBlacklist(address _address) public view returns (bool) {\\n        return blacklist[_address];\\n    }\\n\\n    function isAddressInWhiteList(address _address) public view returns (bool) {\\n        return whitelist[_address];\\n    }\\n\\n    // --------- Administrative functions ---------\\n    function _onWhitelistMode() internal virtual {\\n        isWhitelistRestrictionMode = true;\\n        emit WhitelistEnabled(_msgSender());\\n    }\\n\\n    function _offWhitelistMode() internal virtual {\\n        isWhitelistRestrictionMode = false;\\n        emit WhitelistDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc0679b30934541a57cebe466cffabbfa33a0b7af2b29203531f88ee04fc29e8c\",\"license\":\"MIT\"},\"contracts/extensions/ERC20Blacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./Blacklist.sol\\\";\\n\\nabstract contract ERC20Blacklist is ERC20, Blacklist {\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (isWhitelistRestrictionMode) {\\n            require(\\n                whitelist[from] || whitelist[to],\\n                \\\"Whitelist: sender or receiver is not in whitelist\\\"\\n            );\\n        }\\n        require(!blacklist[from], \\\"Blacklist: sender is in blacklist\\\");\\n        require(!blacklist[to], \\\"Blacklist: receiver is in blacklist\\\");\\n        if (from != _msgSender()) {\\n            require(\\n                !blacklist[_msgSender()],\\n                \\\"Blacklist: spender is in blacklist\\\"\\n            );\\n        }\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x73e5ae94d5996f01dc3029ecfc861a7bda08f7c2ae9f63af108f1b18b8d440ac\",\"license\":\"MIT\"},\"contracts/extensions/Subscribable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../tokens/Token1.sol\\\";\\n\\n// Tests for this contract are in the Staking.test.ts file\\ncontract Subscribable is Context {\\n    uint256 public subscriptionCost;\\n    uint256 public subscriptionPeriodDays;\\n\\n    mapping(address => uint256) private _subscribers;\\n\\n    Token1 public subscriptionToken;\\n\\n    constructor(\\n        address token_,\\n        uint256 cost_,\\n        uint256 periodDays_\\n    ) {\\n        require(\\n            cost_ > 0,\\n            \\\"Subscribable: subscription cost should be greater than 0\\\"\\n        );\\n        require(\\n            periodDays_ > 0,\\n            \\\"Subscribable: subscription period should be greater than 0\\\"\\n        );\\n        subscriptionToken = Token1(token_);\\n        subscriptionCost = cost_;\\n        subscriptionPeriodDays = periodDays_;\\n    }\\n\\n    modifier subscribersOnly() virtual {\\n        require(\\n            isSubscriber(_msgSender()),\\n            \\\"Subscribable: you are not subscribed\\\"\\n        );\\n        _;\\n    }\\n\\n    function _subscribe(address addr_) internal virtual {\\n        subscriptionToken.burnFrom(addr_, subscriptionCost);\\n        _subscribers[addr_] = block.timestamp + subscriptionPeriodDays * 1 days;\\n    }\\n\\n    // --------- Helper functions ---------\\n    function isSubscriber(address addr_) public view virtual returns (bool) {\\n        return _subscribers[addr_] >= block.timestamp;\\n    }\\n\\n    function isSubscriber() public view virtual returns (bool) {\\n        return isSubscriber(_msgSender());\\n    }\\n\\n    function _subscriptionExpiration(address addr_)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return _subscribers[addr_];\\n    }\\n\\n    // --------- Administrative functions ---------\\n    function _updateSubscriptionCost(uint256 cost_) internal {\\n        subscriptionCost = cost_;\\n    }\\n\\n    function _updateSubscriptionPeriod(uint256 periodDays_) internal {\\n        subscriptionPeriodDays = periodDays_;\\n    }\\n\\n    function _updateSubscriptionToken(address token_) internal {\\n        subscriptionToken = Token1(token_);\\n    }\\n}\\n\",\"keccak256\":\"0x684761bccfc5d717e09ae1adb981a19471c6ac6ee6bb699b28a28cec5c26d593\",\"license\":\"MIT\"},\"contracts/interfaces/IReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IReferralManager {\\n    function getReferralLevels() external pure returns (uint256);\\n\\n    function addUserDividends(address user, uint256 reward) external;\\n\\n    function getUserReferrer(address user) external view returns (address);\\n\\n    function setUserReferrer(address user, address referrer) external;\\n\\n    function userHasSubscription(address user, uint256 level)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateRefReward(uint256 amount, uint256 level)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x223e1b6d368a6f8c9c86c385e32f505567625f364d786e482b02cfa113f56b73\",\"license\":\"MIT\"},\"contracts/interfaces/ISquads.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ISquads {\\n    function subscribe(uint256 planId) external;\\n\\n    function tryToAddMember(\\n        address user,\\n        address member,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function userHasPlanSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getSufficientPlanIdByStakingAmount(uint256 amount)\\n        external\\n        view\\n        returns (int256);\\n}\\n\",\"keccak256\":\"0xa2ba4ffc0e0d96eaa4fc90ce6a71f48eba6dd53c485f65db461164fe793519d4\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IStaking {\\n    struct Stake {\\n        uint256 stakeId;\\n        uint256 amount;\\n        uint256 timeStart;\\n        uint256 timeEnd;\\n        uint256 percent;\\n        uint256 profit;\\n        bool isClaimed;\\n        bool isToken2;\\n    }\\n\\n    struct User {\\n        Stake[] stakes;\\n        uint256 totalStakedToken1;\\n        uint256 totalStakedToken2;\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n    }\\n\\n    function deposit(\\n        uint256 depositAmount_,\\n        bool isToken2_,\\n        address referrer\\n    ) external;\\n\\n    function withdraw(uint256 stakeId_) external;\\n\\n    function subscribe() external;\\n\\n    // --------- Helper functions ---------\\n    function getContractInfo()\\n        external\\n        view\\n        returns (\\n            uint256 _durationDays,\\n            uint256 _reward,\\n            bool _isActive,\\n            uint256 _totalStakesToken1No,\\n            uint256 _totalStakesToken2No,\\n            uint256 _totalStakedToken1,\\n            uint256 _totalStakedToken2,\\n            uint256 _totalClaimed,\\n            uint256 _subscriptionCost,\\n            uint256 _subscriptionPeriodDays\\n        );\\n\\n    function getUserInfo(address userAddr_)\\n        external\\n        view\\n        returns (\\n            uint256 _totalStakedToken1,\\n            uint256 _totalStakedToken2,\\n            uint256 _totalClaimed,\\n            uint256 _currentToken1Staked,\\n            bool _subscribed,\\n            uint256 _subscribedTill\\n        );\\n\\n    function getUserStakes(address userAddr_)\\n        external\\n        view\\n        returns (Stake[] memory stakes);\\n\\n    function getTimestamp() external view returns (uint256);\\n\\n    function calculateStakeProfit(uint256 amount_)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateStakeReward(address userAddr_, uint256 stakeId_)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function min(uint256 a, uint256 b) external pure returns (uint256);\\n\\n    // --------- Administrative functions ---------\\n    function setActive(bool value_) external;\\n\\n    function updateShouldAddReferrerOnToken2Stake(bool value) external;\\n\\n    function updateRewardPool(address poolAddress_) external;\\n\\n    function updateToken1(address token1_) external;\\n\\n    function updateToken2(address token2_) external;\\n\\n    function updateReferralManager(address referralManager_) external;\\n\\n    function updatePercentDivider(uint256 divider_) external;\\n\\n    function updateTimeStep(uint256 step_) external;\\n\\n    function updateMinStakeLimit(uint256 minLimit_) external;\\n\\n    function updateDurationDays(uint256 duration_) external;\\n\\n    function updateReward(uint256 newReward_) external;\\n\\n    function updateSubscriptionCost(uint256 cost_) external;\\n\\n    function updateSubscriptionPeriod(uint256 periodDays_) external;\\n\\n    function updateSubscriptionToken(address token_) external;\\n}\\n\",\"keccak256\":\"0x6aa74aeeb1197883dda30be454aef6e58c92eca22267f6a85bc228604fb0618a\",\"license\":\"MIT\"},\"contracts/tokens/BasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../extensions/ERC20Blacklist.sol\\\";\\n\\ncontract BasicToken is\\n    ERC20,\\n    ERC20Burnable,\\n    ERC20Blacklist,\\n    AccessControl,\\n    Pausable\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    uint256 private _totalMinted;\\n\\n    constructor(\\n        uint256 initialSupply_,\\n        address holderAddress_,\\n        string memory name_,\\n        string memory symbol_\\n    ) ERC20(name_, symbol_) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _grantRole(PAUSER_ROLE, _msgSender());\\n\\n        _mint(holderAddress_, initialSupply_);\\n    }\\n\\n    function totalBurn() public view virtual returns (uint256) {\\n        return _totalMinted - totalSupply();\\n    }\\n\\n    function totalMinted() public view virtual returns (uint256) {\\n        return _totalMinted;\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        _totalMinted += amount;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Blacklist, ERC20) whenNotPaused {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function _checkRole(bytes32 role, address account)\\n        internal\\n        view\\n        virtual\\n        override\\n    {\\n        if (!hasRole(role, account) && !hasRole(DEFAULT_ADMIN_ROLE, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32),\\n                        \\\" or \\\",\\n                        Strings.toHexString(uint256(DEFAULT_ADMIN_ROLE), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    // --------- Administrative functions ---------\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function onWhitelistMode() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _onWhitelistMode();\\n    }\\n\\n    function offWhitelistMode() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _offWhitelistMode();\\n    }\\n\\n    function addToBlacklist(address[] calldata _addresses)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _addToBlacklist(_addresses);\\n    }\\n\\n    function removeFromBlacklist(address[] calldata _addresses)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _removeFromBlacklist(_addresses);\\n    }\\n\\n    function addToWhitelist(address[] calldata _addresses)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _addToWhitelist(_addresses);\\n    }\\n\\n    function removeFromWhitelist(address[] calldata _addresses)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _removeFromWhitelist(_addresses);\\n    }\\n}\\n\",\"keccak256\":\"0x3ac9a0c9e37327e3f92e81554e531e8603ca7ba5624ca147bb8a803b0c2c8600\",\"license\":\"MIT\"},\"contracts/tokens/Token1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\\\";\\nimport \\\"./BasicToken.sol\\\";\\n\\ncontract Token1 is BasicToken, ERC20Snapshot {\\n    bytes32 public constant SNAPSHOT_ROLE = keccak256(\\\"SNAPSHOT_ROLE\\\");\\n\\n    constructor(uint256 initialSupply_, address holderAddress_)\\n        BasicToken(initialSupply_, holderAddress_, \\\"Test SAV\\\", \\\"TSAV\\\")\\n    {\\n        _grantRole(SNAPSHOT_ROLE, _msgSender());\\n    }\\n\\n    function snapshot() public onlyRole(SNAPSHOT_ROLE) {\\n        _snapshot();\\n    }\\n\\n    function snapshotCount()\\n        public\\n        view\\n        onlyRole(SNAPSHOT_ROLE)\\n        returns (uint256)\\n    {\\n        return _getCurrentSnapshotId();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(BasicToken, ERC20Snapshot) whenNotPaused {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount)\\n        internal\\n        virtual\\n        override(BasicToken, ERC20)\\n    {\\n        super._mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5eb18be39cdc6d56683f972b33862f9fe23c8a34235c6eb19025171a98589005\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526103e86006556201518060075567016345785d8a00006008553480156200002a57600080fd5b5060405162002627380380620026278339810160408190526200004d9162000303565b88828260008211620000cc5760405162461bcd60e51b815260206004820152603860248201527f537562736372696261626c653a20737562736372697074696f6e20636f73742060448201527f73686f756c642062652067726561746572207468616e2030000000000000000060648201526084015b60405180910390fd5b60008111620001445760405162461bcd60e51b815260206004820152603a60248201527f537562736372696261626c653a20737562736372697074696f6e20706572696f60448201527f642073686f756c642062652067726561746572207468616e20300000000000006064820152608401620000c3565b600480546001600160a01b0319166001600160a01b0394851617905560019190915560025589166200017557600080fd5b6001600160a01b0388166200018957600080fd5b6001600160a01b0387166200019d57600080fd5b6001600160a01b038616620001b157600080fd5b60008411620001bf57600080fd5b60008311620001cd57600080fd5b620001da60003362000245565b5050600980546001600160a01b03199081166001600160a01b0397881617909155600a92909255600b5560128054821696851696909617909555601380548616948416949094179093556014805485169183169190911790556015805490931691161790556200039a565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002e2576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002a13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b0381168114620002fe57600080fd5b919050565b60008060008060008060008060006101208a8c0312156200032357600080fd5b6200032e8a620002e6565b98506200033e60208b01620002e6565b97506200034e60408b01620002e6565b96506200035e60608b01620002e6565b95506200036e60808b01620002e6565b945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b61227d80620003aa6000396000f3fe608060405234801561001057600080fd5b50600436106103275760003560e01c80637cc1f867116101b8578063ae1fc32411610104578063d54ad2a1116100a2578063dce4b29b1161007c578063dce4b29b1461076e578063dfc8bb2314610781578063e256617314610794578063ed10dda31461079d57600080fd5b8063d54ad2a11461073f578063d5fbac3a14610748578063d6672e1c1461075b57600080fd5b8063c4804ef0116100de578063c4804ef0146106da578063cd69d3d914610706578063d21220a714610719578063d547741f1461072c57600080fd5b8063ae1fc324146106a2578063afa83085146106b5578063b3ea1e7c146106c757600080fd5b806391d14854116101715780639cd56d031161014b5780639cd56d031461066b578063a217fddf14610674578063a243d5ac1461067c578063acec338a1461068f57600080fd5b806391d148541461063c57806395319e231461064f5780639918d6ff1461066257600080fd5b80637cc1f8671461057d5780637dd39fa7146105ef57806380ed71e4146105f8578063842e29811461060b5780638f449a051461062b5780639163f95b1461063357600080fd5b80632f2ff15d1161027757806360391c9211610230578063717f90071161020a578063717f900714610531578063736560b5146105445780637ae2b5c7146105575780637c67b3391461056a57600080fd5b806360391c92146104885780636386c1c71461049b5780636f03ddf21461051e57600080fd5b80632f2ff15d1461043457806332bc298c1461044757806336568abe146104505780633efc639f14610463578063425c8abd1461046c5780635904112d1461047f57600080fd5b80631fcb4ee4116102e4578063248a9ca3116102be578063248a9ca3146103c057806325be124e146103e35780632ccd96231461040e5780632e1a7d4d1461042157600080fd5b80631fcb4ee4146103a2578063228cb733146103aa57806322f3e2d4146103b357600080fd5b806301c234a81461032c57806301ffc9a714610348578063064e67801461036b578063143ad15314610380578063188ec3561461038957806318e7b6ca1461038f575b600080fd5b61033560065481565b6040519081526020015b60405180910390f35b61035b610356366004611e47565b6107b0565b604051901515815260200161033f565b61037e610379366004611e86565b6107e7565b005b610335600f5481565b42610335565b61037e61039d366004611ea3565b610815565b61035b61082d565b610335600b5481565b600c5461035b9060ff1681565b6103356103ce366004611ea3565b60009081526020819052604090206001015490565b6013546103f6906001600160a01b031681565b6040516001600160a01b03909116815260200161033f565b6014546103f6906001600160a01b031681565b61037e61042f366004611ea3565b61083d565b61037e610442366004611ebc565b610abc565b61033560075481565b61037e61045e366004611ebc565b610ae6565b61033560025481565b61037e61047a366004611ea3565b610b60565b610335600d5481565b610335610496366004611eec565b610b71565b6104ef6104a9366004611e86565b6001600160a01b03166000908152600560209081526040808320600181015460028201546003808401546004909401549552929094205493949193909291428210159190565b6040805196875260208701959095529385019290925260608401521515608083015260a082015260c00161033f565b61037e61052c366004611ea3565b610bba565b61037e61053f366004611ea3565b610bcb565b61037e610552366004611ea3565b610bdc565b610335610565366004611f18565b610bf0565b61037e610578366004611e86565b610c07565b600a54600b54600c54600d54600e54600f54601054601154600154600254604080519a8b5260208b019990995260ff9097161515978901979097526060880194909452608087019290925260a086015260c085015260e08401526101008301919091526101208201526101400161033f565b61033560015481565b61037e610606366004611f48565b610c35565b61061e610619366004611e86565b611477565b60405161033f9190611f8a565b61037e611542565b61033560105481565b61035b61064a366004611ebc565b611598565b61037e61065d36600461201b565b6115c1565b610335600e5481565b610335600a5481565b610335600081565b61037e61068a366004611e86565b6115e7565b61037e61069d36600461201b565b611611565b61037e6106b0366004611e86565b611673565b600c5461035b90610100900460ff1681565b61037e6106d5366004611ea3565b6116a1565b61035b6106e8366004611e86565b6001600160a01b031660009081526003602052604090205442111590565b61037e610714366004611e86565b6116b2565b6012546103f6906001600160a01b031681565b61037e61073a366004611ebc565b6116e0565b61033560115481565b61037e610756366004611e86565b611705565b6004546103f6906001600160a01b031681565b61037e61077c366004611ea3565b611733565b61033561078f366004611ea3565b611744565b61033560085481565b6015546103f6906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806107e157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107f281611761565b50601280546001600160a01b0319166001600160a01b0392909216919091179055565b600061082081611761565b61082982600155565b5050565b6000610838336106e8565b905090565b336000908152600560205260409020805482106108945760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081cdd185ad9481a5960821b60448201526064015b60405180910390fd5b60008160000183815481106108ab576108ab612038565b60009182526020909120600790910201600681015490915060ff16156109135760405162461bcd60e51b815260206004820152601860248201527f5374616b6520697320616c726561647920636c61696d65640000000000000000604482015260640161088b565b42816003015411156109605760405162461bcd60e51b815260206004820152601660248201527514dd185ad9481a5cc81b9bdd081c9958591e481e595d60521b604482015260640161088b565b600061096b8261176e565b60068301805460ff191660011790556012549091506001600160a01b031663a9059cbb6109953390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a06919061204e565b5080836003016000828254610a1b9190612081565b925050819055508060116000828254610a349190612081565b90915550506006820154610100900460ff16610a68578160010154836004016000828254610a629190612099565b90915550505b815460068301546040805184815261010090920460ff161515602083015242929133917ff699097e5f4ba680794c00e32cc2194a99d3054d5b0a65e54b6eebd3181328af910160405180910390a450505050565b600082815260208190526040902060010154610ad781611761565b610ae18383611813565b505050565b6001600160a01b0381163314610b565760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161088b565b6108298282611897565b6000610b6b81611761565b50600b55565b6001600160a01b03821660009081526005602052604081208054610bb3919084908110610ba057610ba0612038565b906000526020600020906007020161176e565b9392505050565b6000610bc581611761565b50600a55565b6000610bd681611761565b50600855565b6000610be781611761565b61082982600255565b600081831115610c005781610bb3565b5090919050565b6000610c1281611761565b50601480546001600160a01b0319166001600160a01b0392909216919091179055565b600c5460ff16610c805760405162461bcd60e51b8152602060048201526016602482015275436f6e7472616374206973206e6f742061637469766560501b604482015260640161088b565b610c89336106e8565b610ce15760405162461bcd60e51b8152602060048201526024808201527f537562736372696261626c653a20796f7520617265206e6f74207375627363726044820152631a58995960e21b606482015260840161088b565b6001600160a01b038116331415610d3a5760405162461bcd60e51b815260206004820152601a60248201527f52656665727265722063616e206e6f742062652073656e646572000000000000604482015260640161088b565b600854831015610d985760405162461bcd60e51b8152602060048201526024808201527f5374616b6520616d6f756e74206c657373207468616e206d696e696d756d2076604482015263616c756560e01b606482015260840161088b565b6000610da384611744565b6012546009546040516370a0823160e01b81526001600160a01b03918216600482015292935016906370a0823190602401602060405180830381865afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1591906120b0565b811115610e645760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820746f6b656e7320666f722072657761726400000000604482015260640161088b565b8215610ee1576013546001600160a01b03166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b50505050610f6c565b6012546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018790526064016020604051808303816000875af1158015610f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6a919061204e565b505b6012546009546040516323b872dd60e01b81526001600160a01b039182166004820152306024820152604481018490529116906323b872dd906064016020604051808303816000875af1158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb919061204e565b5033600090815260056020908152604080832080548251610100810184528181529384018990524292840192909252600754600a5491949293916060830191611033916120c9565b61103d9042612081565b8152600b546020808301919091526040808301889052600060608085018290528b158015608096870152895460018181018c558b8552938690208851600790920201908155948701519285019290925591850151600284015590840151600383015591830151600482015560a0830151600582015560c08301516006909101805460e085015115156101000261ff00199315159390931661ffff199091161791909117905590915061113557868360020160008282546110fd9190612081565b9250508190555086601060008282546111169190612081565b9091555050600e805490600061112b836120e8565b9190505550611198565b868360010160008282546111499190612081565b92505081905550868360040160008282546111649190612081565b9250508190555086600f600082825461117d9190612081565b9091555050600d8054906000611192836120e8565b91905055505b8515806111ac5750600c54610100900460ff165b15611406576014546000906001600160a01b03166336144c9a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190612103565b90506001600160a01b03811615801561124f57506001600160a01b03861615155b15611346576014546001600160a01b031663f8d0e6ec336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529089166024820152604401600060405180830381600087803b1580156112af57600080fd5b505af11580156112c3573d6000803e3d6000fd5b50506014546001600160a01b031691506336144c9a9050336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561131f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113439190612103565b90505b61135033866118fc565b6015546001600160a01b03161580159061137257506001600160a01b03811615155b15611404576015546001600160a01b03166386bc287282336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018b90526064016020604051808303816000875af11580156113de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611402919061204e565b505b505b80514290336001600160a01b03167fe2bc599317152df44441d7033af34022736103301cd1276068addd8aa19b8b9d84602001518560a001518660e001516040516114669392919092835260208301919091521515604082015260600190565b60405180910390a450505050505050565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609492939192909184015b828210156115375760008481526020908190206040805161010080820183526007870290930180548252600180820154838701526002820154938301939093526003810154606083015260048101546080830152600581015460a08301526006015460ff808216151560c0840152939004909216151560e083015290835290920191016114af565b505050509050919050565b600c5460ff1661158d5760405162461bcd60e51b8152602060048201526016602482015275436f6e7472616374206973206e6f742061637469766560501b604482015260640161088b565b61159633611ba4565b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006115cc81611761565b50600c80549115156101000261ff0019909216919091179055565b60006115f281611761565b600480546001600160a01b0319166001600160a01b0384161790555050565b600061161c81611761565b600c805460ff19168315151790557f2df08ff8e8f68f3091085198803300a5b35e0b5f5b6d2d8ceda5dc49a91d10cb82336040805192151583526001600160a01b0390911660208301520160405180910390a15050565b600061167e81611761565b50601380546001600160a01b0319166001600160a01b0392909216919091179055565b60006116ac81611761565b50600655565b60006116bd81611761565b50601580546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081905260409020600101546116fb81611761565b610ae18383611897565b600061171081611761565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b600061173e81611761565b50600755565b6000600654600b548361175791906120c9565b6107e19190612120565b61176b8133611c47565b50565b60008160020154600014806117875750600682015460ff165b1561179457506000919050565b6006820154600090610100900460ff166117c157826005015483600101546117bc9190612081565b6117c7565b82600501545b9050428360030154116117da5792915050565b826002015483600301546117ee9190612099565b818460020154426117ff9190612099565b61180991906120c9565b610bb39190612120565b61181d8282611598565b610829576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118533390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118a18282611598565b15610829576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6014546040805163070d451f60e01b815290516000926001600160a01b03169163070d451f9160048083019260209291908290030181865afa158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a91906120b0565b90508260015b828111611b9d57601454604051631b0a264d60e11b81526001600160a01b03848116600483015260009216906336144c9a90602401602060405180830381865afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612103565b90506001600160a01b03811615611b84576014546040516303fea6cb60e11b81526001600160a01b03838116600483015260248201859052909116906307fd4d9690604401602060405180830381865afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6c919061204e565b15611b7c576014546040516384197dbb60e01b815260048101879052602481018490526000916001600160a01b0316906384197dbb90604401602060405180830381865afa158015611ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae691906120b0565b6001600160a01b03831660009081526005602052604081206004015491925090611b11908390610bf0565b601454604051633fb55c6160e01b81526001600160a01b03868116600483015260248201849052929350911690633fb55c6190604401600060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b5050505050505b809250611b8a565b50611b9d565b5080611b95816120e8565b915050611970565b5050505050565b6004805460015460405163079cc67960e41b81526001600160a01b038581169482019490945260248101919091529116906379cc679090604401600060405180830381600087803b158015611bf857600080fd5b505af1158015611c0c573d6000803e3d6000fd5b5050505060025462015180611c2191906120c9565b611c2b9042612081565b6001600160a01b03909116600090815260036020526040902055565b611c518282611598565b61082957611c69816001600160a01b03166014611cab565b611c74836020611cab565b604051602001611c85929190612172565b60408051601f198184030181529082905262461bcd60e51b825261088b916004016121e7565b60606000611cba8360026120c9565b611cc5906002612081565b67ffffffffffffffff811115611cdd57611cdd61221a565b6040519080825280601f01601f191660200182016040528015611d07576020820181803683370190505b509050600360fc1b81600081518110611d2257611d22612038565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d5157611d51612038565b60200101906001600160f81b031916908160001a9053506000611d758460026120c9565b611d80906001612081565b90505b6001811115611df8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611db457611db4612038565b1a60f81b828281518110611dca57611dca612038565b60200101906001600160f81b031916908160001a90535060049490941c93611df181612230565b9050611d83565b508315610bb35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161088b565b600060208284031215611e5957600080fd5b81356001600160e01b031981168114610bb357600080fd5b6001600160a01b038116811461176b57600080fd5b600060208284031215611e9857600080fd5b8135610bb381611e71565b600060208284031215611eb557600080fd5b5035919050565b60008060408385031215611ecf57600080fd5b823591506020830135611ee181611e71565b809150509250929050565b60008060408385031215611eff57600080fd5b8235611f0a81611e71565b946020939093013593505050565b60008060408385031215611f2b57600080fd5b50508035926020909101359150565b801515811461176b57600080fd5b600080600060608486031215611f5d57600080fd5b833592506020840135611f6f81611f3a565b91506040840135611f7f81611e71565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b8281101561200e5781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c08082015115159086015260e0908101511515908501526101009093019290850190600101611fa7565b5091979650505050505050565b60006020828403121561202d57600080fd5b8135610bb381611f3a565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561206057600080fd5b8151610bb381611f3a565b634e487b7160e01b600052601160045260246000fd5b600082198211156120945761209461206b565b500190565b6000828210156120ab576120ab61206b565b500390565b6000602082840312156120c257600080fd5b5051919050565b60008160001904831182151516156120e3576120e361206b565b500290565b60006000198214156120fc576120fc61206b565b5060010190565b60006020828403121561211557600080fd5b8151610bb381611e71565b60008261213d57634e487b7160e01b600052601260045260246000fd5b500490565b60005b8381101561215d578181015183820152602001612145565b8381111561216c576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516121aa816017850160208801612142565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516121db816028840160208801612142565b01602801949350505050565b6020815260008251806020840152612206816040850160208701612142565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60008161223f5761223f61206b565b50600019019056fea26469706673582212209fced5112f5faabab72c3d238e5aeb012924e1a668b94fe9f701a0872585ecde64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103275760003560e01c80637cc1f867116101b8578063ae1fc32411610104578063d54ad2a1116100a2578063dce4b29b1161007c578063dce4b29b1461076e578063dfc8bb2314610781578063e256617314610794578063ed10dda31461079d57600080fd5b8063d54ad2a11461073f578063d5fbac3a14610748578063d6672e1c1461075b57600080fd5b8063c4804ef0116100de578063c4804ef0146106da578063cd69d3d914610706578063d21220a714610719578063d547741f1461072c57600080fd5b8063ae1fc324146106a2578063afa83085146106b5578063b3ea1e7c146106c757600080fd5b806391d14854116101715780639cd56d031161014b5780639cd56d031461066b578063a217fddf14610674578063a243d5ac1461067c578063acec338a1461068f57600080fd5b806391d148541461063c57806395319e231461064f5780639918d6ff1461066257600080fd5b80637cc1f8671461057d5780637dd39fa7146105ef57806380ed71e4146105f8578063842e29811461060b5780638f449a051461062b5780639163f95b1461063357600080fd5b80632f2ff15d1161027757806360391c9211610230578063717f90071161020a578063717f900714610531578063736560b5146105445780637ae2b5c7146105575780637c67b3391461056a57600080fd5b806360391c92146104885780636386c1c71461049b5780636f03ddf21461051e57600080fd5b80632f2ff15d1461043457806332bc298c1461044757806336568abe146104505780633efc639f14610463578063425c8abd1461046c5780635904112d1461047f57600080fd5b80631fcb4ee4116102e4578063248a9ca3116102be578063248a9ca3146103c057806325be124e146103e35780632ccd96231461040e5780632e1a7d4d1461042157600080fd5b80631fcb4ee4146103a2578063228cb733146103aa57806322f3e2d4146103b357600080fd5b806301c234a81461032c57806301ffc9a714610348578063064e67801461036b578063143ad15314610380578063188ec3561461038957806318e7b6ca1461038f575b600080fd5b61033560065481565b6040519081526020015b60405180910390f35b61035b610356366004611e47565b6107b0565b604051901515815260200161033f565b61037e610379366004611e86565b6107e7565b005b610335600f5481565b42610335565b61037e61039d366004611ea3565b610815565b61035b61082d565b610335600b5481565b600c5461035b9060ff1681565b6103356103ce366004611ea3565b60009081526020819052604090206001015490565b6013546103f6906001600160a01b031681565b6040516001600160a01b03909116815260200161033f565b6014546103f6906001600160a01b031681565b61037e61042f366004611ea3565b61083d565b61037e610442366004611ebc565b610abc565b61033560075481565b61037e61045e366004611ebc565b610ae6565b61033560025481565b61037e61047a366004611ea3565b610b60565b610335600d5481565b610335610496366004611eec565b610b71565b6104ef6104a9366004611e86565b6001600160a01b03166000908152600560209081526040808320600181015460028201546003808401546004909401549552929094205493949193909291428210159190565b6040805196875260208701959095529385019290925260608401521515608083015260a082015260c00161033f565b61037e61052c366004611ea3565b610bba565b61037e61053f366004611ea3565b610bcb565b61037e610552366004611ea3565b610bdc565b610335610565366004611f18565b610bf0565b61037e610578366004611e86565b610c07565b600a54600b54600c54600d54600e54600f54601054601154600154600254604080519a8b5260208b019990995260ff9097161515978901979097526060880194909452608087019290925260a086015260c085015260e08401526101008301919091526101208201526101400161033f565b61033560015481565b61037e610606366004611f48565b610c35565b61061e610619366004611e86565b611477565b60405161033f9190611f8a565b61037e611542565b61033560105481565b61035b61064a366004611ebc565b611598565b61037e61065d36600461201b565b6115c1565b610335600e5481565b610335600a5481565b610335600081565b61037e61068a366004611e86565b6115e7565b61037e61069d36600461201b565b611611565b61037e6106b0366004611e86565b611673565b600c5461035b90610100900460ff1681565b61037e6106d5366004611ea3565b6116a1565b61035b6106e8366004611e86565b6001600160a01b031660009081526003602052604090205442111590565b61037e610714366004611e86565b6116b2565b6012546103f6906001600160a01b031681565b61037e61073a366004611ebc565b6116e0565b61033560115481565b61037e610756366004611e86565b611705565b6004546103f6906001600160a01b031681565b61037e61077c366004611ea3565b611733565b61033561078f366004611ea3565b611744565b61033560085481565b6015546103f6906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806107e157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006107f281611761565b50601280546001600160a01b0319166001600160a01b0392909216919091179055565b600061082081611761565b61082982600155565b5050565b6000610838336106e8565b905090565b336000908152600560205260409020805482106108945760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081cdd185ad9481a5960821b60448201526064015b60405180910390fd5b60008160000183815481106108ab576108ab612038565b60009182526020909120600790910201600681015490915060ff16156109135760405162461bcd60e51b815260206004820152601860248201527f5374616b6520697320616c726561647920636c61696d65640000000000000000604482015260640161088b565b42816003015411156109605760405162461bcd60e51b815260206004820152601660248201527514dd185ad9481a5cc81b9bdd081c9958591e481e595d60521b604482015260640161088b565b600061096b8261176e565b60068301805460ff191660011790556012549091506001600160a01b031663a9059cbb6109953390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a06919061204e565b5080836003016000828254610a1b9190612081565b925050819055508060116000828254610a349190612081565b90915550506006820154610100900460ff16610a68578160010154836004016000828254610a629190612099565b90915550505b815460068301546040805184815261010090920460ff161515602083015242929133917ff699097e5f4ba680794c00e32cc2194a99d3054d5b0a65e54b6eebd3181328af910160405180910390a450505050565b600082815260208190526040902060010154610ad781611761565b610ae18383611813565b505050565b6001600160a01b0381163314610b565760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161088b565b6108298282611897565b6000610b6b81611761565b50600b55565b6001600160a01b03821660009081526005602052604081208054610bb3919084908110610ba057610ba0612038565b906000526020600020906007020161176e565b9392505050565b6000610bc581611761565b50600a55565b6000610bd681611761565b50600855565b6000610be781611761565b61082982600255565b600081831115610c005781610bb3565b5090919050565b6000610c1281611761565b50601480546001600160a01b0319166001600160a01b0392909216919091179055565b600c5460ff16610c805760405162461bcd60e51b8152602060048201526016602482015275436f6e7472616374206973206e6f742061637469766560501b604482015260640161088b565b610c89336106e8565b610ce15760405162461bcd60e51b8152602060048201526024808201527f537562736372696261626c653a20796f7520617265206e6f74207375627363726044820152631a58995960e21b606482015260840161088b565b6001600160a01b038116331415610d3a5760405162461bcd60e51b815260206004820152601a60248201527f52656665727265722063616e206e6f742062652073656e646572000000000000604482015260640161088b565b600854831015610d985760405162461bcd60e51b8152602060048201526024808201527f5374616b6520616d6f756e74206c657373207468616e206d696e696d756d2076604482015263616c756560e01b606482015260840161088b565b6000610da384611744565b6012546009546040516370a0823160e01b81526001600160a01b03918216600482015292935016906370a0823190602401602060405180830381865afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1591906120b0565b811115610e645760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820746f6b656e7320666f722072657761726400000000604482015260640161088b565b8215610ee1576013546001600160a01b03166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b50505050610f6c565b6012546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018790526064016020604051808303816000875af1158015610f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6a919061204e565b505b6012546009546040516323b872dd60e01b81526001600160a01b039182166004820152306024820152604481018490529116906323b872dd906064016020604051808303816000875af1158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb919061204e565b5033600090815260056020908152604080832080548251610100810184528181529384018990524292840192909252600754600a5491949293916060830191611033916120c9565b61103d9042612081565b8152600b546020808301919091526040808301889052600060608085018290528b158015608096870152895460018181018c558b8552938690208851600790920201908155948701519285019290925591850151600284015590840151600383015591830151600482015560a0830151600582015560c08301516006909101805460e085015115156101000261ff00199315159390931661ffff199091161791909117905590915061113557868360020160008282546110fd9190612081565b9250508190555086601060008282546111169190612081565b9091555050600e805490600061112b836120e8565b9190505550611198565b868360010160008282546111499190612081565b92505081905550868360040160008282546111649190612081565b9250508190555086600f600082825461117d9190612081565b9091555050600d8054906000611192836120e8565b91905055505b8515806111ac5750600c54610100900460ff165b15611406576014546000906001600160a01b03166336144c9a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190612103565b90506001600160a01b03811615801561124f57506001600160a01b03861615155b15611346576014546001600160a01b031663f8d0e6ec336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529089166024820152604401600060405180830381600087803b1580156112af57600080fd5b505af11580156112c3573d6000803e3d6000fd5b50506014546001600160a01b031691506336144c9a9050336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561131f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113439190612103565b90505b61135033866118fc565b6015546001600160a01b03161580159061137257506001600160a01b03811615155b15611404576015546001600160a01b03166386bc287282336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018b90526064016020604051808303816000875af11580156113de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611402919061204e565b505b505b80514290336001600160a01b03167fe2bc599317152df44441d7033af34022736103301cd1276068addd8aa19b8b9d84602001518560a001518660e001516040516114669392919092835260208301919091521515604082015260600190565b60405180910390a450505050505050565b6001600160a01b0381166000908152600560209081526040808320805482518185028101850190935280835260609492939192909184015b828210156115375760008481526020908190206040805161010080820183526007870290930180548252600180820154838701526002820154938301939093526003810154606083015260048101546080830152600581015460a08301526006015460ff808216151560c0840152939004909216151560e083015290835290920191016114af565b505050509050919050565b600c5460ff1661158d5760405162461bcd60e51b8152602060048201526016602482015275436f6e7472616374206973206e6f742061637469766560501b604482015260640161088b565b61159633611ba4565b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006115cc81611761565b50600c80549115156101000261ff0019909216919091179055565b60006115f281611761565b600480546001600160a01b0319166001600160a01b0384161790555050565b600061161c81611761565b600c805460ff19168315151790557f2df08ff8e8f68f3091085198803300a5b35e0b5f5b6d2d8ceda5dc49a91d10cb82336040805192151583526001600160a01b0390911660208301520160405180910390a15050565b600061167e81611761565b50601380546001600160a01b0319166001600160a01b0392909216919091179055565b60006116ac81611761565b50600655565b60006116bd81611761565b50601580546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152602081905260409020600101546116fb81611761565b610ae18383611897565b600061171081611761565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b600061173e81611761565b50600755565b6000600654600b548361175791906120c9565b6107e19190612120565b61176b8133611c47565b50565b60008160020154600014806117875750600682015460ff165b1561179457506000919050565b6006820154600090610100900460ff166117c157826005015483600101546117bc9190612081565b6117c7565b82600501545b9050428360030154116117da5792915050565b826002015483600301546117ee9190612099565b818460020154426117ff9190612099565b61180991906120c9565b610bb39190612120565b61181d8282611598565b610829576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118533390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118a18282611598565b15610829576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6014546040805163070d451f60e01b815290516000926001600160a01b03169163070d451f9160048083019260209291908290030181865afa158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a91906120b0565b90508260015b828111611b9d57601454604051631b0a264d60e11b81526001600160a01b03848116600483015260009216906336144c9a90602401602060405180830381865afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612103565b90506001600160a01b03811615611b84576014546040516303fea6cb60e11b81526001600160a01b03838116600483015260248201859052909116906307fd4d9690604401602060405180830381865afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6c919061204e565b15611b7c576014546040516384197dbb60e01b815260048101879052602481018490526000916001600160a01b0316906384197dbb90604401602060405180830381865afa158015611ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae691906120b0565b6001600160a01b03831660009081526005602052604081206004015491925090611b11908390610bf0565b601454604051633fb55c6160e01b81526001600160a01b03868116600483015260248201849052929350911690633fb55c6190604401600060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b5050505050505b809250611b8a565b50611b9d565b5080611b95816120e8565b915050611970565b5050505050565b6004805460015460405163079cc67960e41b81526001600160a01b038581169482019490945260248101919091529116906379cc679090604401600060405180830381600087803b158015611bf857600080fd5b505af1158015611c0c573d6000803e3d6000fd5b5050505060025462015180611c2191906120c9565b611c2b9042612081565b6001600160a01b03909116600090815260036020526040902055565b611c518282611598565b61082957611c69816001600160a01b03166014611cab565b611c74836020611cab565b604051602001611c85929190612172565b60408051601f198184030181529082905262461bcd60e51b825261088b916004016121e7565b60606000611cba8360026120c9565b611cc5906002612081565b67ffffffffffffffff811115611cdd57611cdd61221a565b6040519080825280601f01601f191660200182016040528015611d07576020820181803683370190505b509050600360fc1b81600081518110611d2257611d22612038565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d5157611d51612038565b60200101906001600160f81b031916908160001a9053506000611d758460026120c9565b611d80906001612081565b90505b6001811115611df8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611db457611db4612038565b1a60f81b828281518110611dca57611dca612038565b60200101906001600160f81b031916908160001a90535060049490941c93611df181612230565b9050611d83565b508315610bb35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161088b565b600060208284031215611e5957600080fd5b81356001600160e01b031981168114610bb357600080fd5b6001600160a01b038116811461176b57600080fd5b600060208284031215611e9857600080fd5b8135610bb381611e71565b600060208284031215611eb557600080fd5b5035919050565b60008060408385031215611ecf57600080fd5b823591506020830135611ee181611e71565b809150509250929050565b60008060408385031215611eff57600080fd5b8235611f0a81611e71565b946020939093013593505050565b60008060408385031215611f2b57600080fd5b50508035926020909101359150565b801515811461176b57600080fd5b600080600060608486031215611f5d57600080fd5b833592506020840135611f6f81611f3a565b91506040840135611f7f81611e71565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b8281101561200e5781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c08082015115159086015260e0908101511515908501526101009093019290850190600101611fa7565b5091979650505050505050565b60006020828403121561202d57600080fd5b8135610bb381611f3a565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561206057600080fd5b8151610bb381611f3a565b634e487b7160e01b600052601160045260246000fd5b600082198211156120945761209461206b565b500190565b6000828210156120ab576120ab61206b565b500390565b6000602082840312156120c257600080fd5b5051919050565b60008160001904831182151516156120e3576120e361206b565b500290565b60006000198214156120fc576120fc61206b565b5060010190565b60006020828403121561211557600080fd5b8151610bb381611e71565b60008261213d57634e487b7160e01b600052601260045260246000fd5b500490565b60005b8381101561215d578181015183820152602001612145565b8381111561216c576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516121aa816017850160208801612142565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516121db816028840160208801612142565b01602801949350505050565b6020815260008251806020840152612206816040850160208701612142565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60008161223f5761223f61206b565b50600019019056fea26469706673582212209fced5112f5faabab72c3d238e5aeb012924e1a668b94fe9f701a0872585ecde64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 7864,
        "contract": "contracts/Staking.sol:Staking",
        "label": "subscriptionCost",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7866,
        "contract": "contracts/Staking.sol:Staking",
        "label": "subscriptionPeriodDays",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7870,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_subscribers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7873,
        "contract": "contracts/Staking.sol:Staking",
        "label": "subscriptionToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Token1)8700"
      },
      {
        "astId": 5329,
        "contract": "contracts/Staking.sol:Staking",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(User)8132_storage)"
      },
      {
        "astId": 5332,
        "contract": "contracts/Staking.sol:Staking",
        "label": "PERCENTS_DIVIDER",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5335,
        "contract": "contracts/Staking.sol:Staking",
        "label": "TIME_STEP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5340,
        "contract": "contracts/Staking.sol:Staking",
        "label": "MIN_STAKE_LIMIT",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5342,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_rewardPool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5344,
        "contract": "contracts/Staking.sol:Staking",
        "label": "durationDays",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5346,
        "contract": "contracts/Staking.sol:Staking",
        "label": "reward",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5348,
        "contract": "contracts/Staking.sol:Staking",
        "label": "isActive",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 5350,
        "contract": "contracts/Staking.sol:Staking",
        "label": "shouldAddReferrerOnToken2Stake",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 5352,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalStakesToken1No",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5354,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalStakesToken2No",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5356,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalStakedToken1",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 5358,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalStakedToken2",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5360,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5363,
        "contract": "contracts/Staking.sol:Staking",
        "label": "token1",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IERC20)1204"
      },
      {
        "astId": 5366,
        "contract": "contracts/Staking.sol:Staking",
        "label": "token2",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(ERC20Burnable)1248"
      },
      {
        "astId": 5369,
        "contract": "contracts/Staking.sol:Staking",
        "label": "referralManager",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IReferralManager)8065"
      },
      {
        "astId": 5372,
        "contract": "contracts/Staking.sol:Staking",
        "label": "squadsManager",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(ISquads)8100"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Stake)8119_storage)dyn_storage": {
        "base": "t_struct(Stake)8119_storage",
        "encoding": "dynamic_array",
        "label": "struct IStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Burnable)1248": {
        "encoding": "inplace",
        "label": "contract ERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1204": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralManager)8065": {
        "encoding": "inplace",
        "label": "contract IReferralManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISquads)8100": {
        "encoding": "inplace",
        "label": "contract ISquads",
        "numberOfBytes": "20"
      },
      "t_contract(Token1)8700": {
        "encoding": "inplace",
        "label": "contract Token1",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)8132_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStaking.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)8132_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Staking.sol:Staking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Staking.sol:Staking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)8119_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.Stake",
        "members": [
          {
            "astId": 8104,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8106,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8108,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8110,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeEnd",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8112,
            "contract": "contracts/Staking.sol:Staking",
            "label": "percent",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8114,
            "contract": "contracts/Staking.sol:Staking",
            "label": "profit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8116,
            "contract": "contracts/Staking.sol:Staking",
            "label": "isClaimed",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 8118,
            "contract": "contracts/Staking.sol:Staking",
            "label": "isToken2",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(User)8132_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.User",
        "members": [
          {
            "astId": 8123,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Stake)8119_storage)dyn_storage"
          },
          {
            "astId": 8125,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakedToken1",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8127,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakedToken2",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8129,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8131,
            "contract": "contracts/Staking.sol:Staking",
            "label": "currentToken1Staked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}