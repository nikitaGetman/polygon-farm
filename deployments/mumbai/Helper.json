{
  "address": "0x9D4047BA0F46680D77E4cB6AfA4680FFc4E44743",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referralManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_squads",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "getUserReferralsFullInfoByLevel",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token2Balance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReferralSubscriptionActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isStakingSubscriptionActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Helper.ReferralFullInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserSquadInfo",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "subscription",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "squadsFilled",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISquads.Squad",
              "name": "squadStatus",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "subscriptionCost",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "reward",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakingThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "squadSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakingPlanId",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isActive",
                  "type": "bool"
                }
              ],
              "internalType": "struct ISquads.SquadPlan",
              "name": "plan",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "members",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "userHasSufficientStaking",
              "type": "bool"
            }
          ],
          "internalType": "struct Helper.UserSquadInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserSquadsInfo",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "subscription",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "squadsFilled",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISquads.Squad",
              "name": "squadStatus",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "subscriptionCost",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "reward",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakingThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "squadSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakingPlanId",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isActive",
                  "type": "bool"
                }
              ],
              "internalType": "struct ISquads.SquadPlan",
              "name": "plan",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "members",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "userHasSufficientStaking",
              "type": "bool"
            }
          ],
          "internalType": "struct Helper.UserSquadInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralManager",
      "outputs": [
        {
          "internalType": "contract IReferralManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "squads",
      "outputs": [
        {
          "internalType": "contract ISquads",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token2",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referralManager",
          "type": "address"
        }
      ],
      "name": "updateReferralManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_squads",
          "type": "address"
        }
      ],
      "name": "updateSquads",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "updateStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "updateToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token2",
          "type": "address"
        }
      ],
      "name": "updateToken2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b7b284db77c1dbc30ebfc7b587b84351aacb1253c3872d0468ac6948b7e9505",
  "receipt": {
    "to": null,
    "from": "0x9E679eC533e68a280a97ABd619d9C42228096F81",
    "contractAddress": "0x9D4047BA0F46680D77E4cB6AfA4680FFc4E44743",
    "transactionIndex": 8,
    "gasUsed": "1206158",
    "logsBloom": "0x
    "blockHash": "0xd1b246c6ed5d5bcda27efc2e07a179cec5d9a15812d8c2903fb8fdbf2ef16272",
    "transactionHash": "0x0b7b284db77c1dbc30ebfc7b587b84351aacb1253c3872d0468ac6948b7e9505",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 29347553,
        "transactionHash": "0x0b7b284db77c1dbc30ebfc7b587b84351aacb1253c3872d0468ac6948b7e9505",
        "address": "0x9D4047BA0F46680D77E4cB6AfA4680FFc4E44743",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0xd1b246c6ed5d5bcda27efc2e07a179cec5d9a15812d8c2903fb8fdbf2ef16272"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 29347553,
        "transactionHash": "0x0b7b284db77c1dbc30ebfc7b587b84351aacb1253c3872d0468ac6948b7e9505",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000ab67c5bd51e0000000000000000000000000000000000000000000000000001026f80bbc9ea67000000000000000000000000000000000000000000000004b70e6589da334fe200000000000000000000000000000000000000000000000000f7b9045ff4cc67000000000000000000000000000000000000000000000004b7191c0636086de2",
        "logIndex": 22,
        "blockHash": "0xd1b246c6ed5d5bcda27efc2e07a179cec5d9a15812d8c2903fb8fdbf2ef16272"
      }
    ],
    "blockNumber": 29347553,
    "cumulativeGasUsed": "1845478",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb971Bbda8043267e8047372A29A5bfA8B78A2D04",
    "0xbaD18847048E47f58f90B049A3C2b5A308Fb0E66",
    "0xcE75Aab2eDd23a49A2314869D5a659379E051E0F",
    "0x05F3EB0023b4d7a0aCa0C7A83c64FD1814F7f9F6",
    "0x7cc1EBC03577933Bef4F1CFfA333A5691Db0609d"
  ],
  "numDeployments": 3,
  "solcInputHash": "e23148095cf4e17aff1553d96c3c29f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referralManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_squads\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getUserReferralsFullInfoByLevel\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2Balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReferralSubscriptionActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStakingSubscriptionActive\",\"type\":\"bool\"}],\"internalType\":\"struct Helper.ReferralFullInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserSquadInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadsFilled\",\"type\":\"uint256\"}],\"internalType\":\"struct ISquads.Squad\",\"name\":\"squadStatus\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct ISquads.SquadPlan\",\"name\":\"plan\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"userHasSufficientStaking\",\"type\":\"bool\"}],\"internalType\":\"struct Helper.UserSquadInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserSquadsInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadsFilled\",\"type\":\"uint256\"}],\"internalType\":\"struct ISquads.Squad\",\"name\":\"squadStatus\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct ISquads.SquadPlan\",\"name\":\"plan\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"userHasSufficientStaking\",\"type\":\"bool\"}],\"internalType\":\"struct Helper.UserSquadInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralManager\",\"outputs\":[{\"internalType\":\"contract IReferralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squads\",\"outputs\":[{\"internalType\":\"contract ISquads\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralManager\",\"type\":\"address\"}],\"name\":\"updateReferralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_squads\",\"type\":\"address\"}],\"name\":\"updateSquads\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"updateStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"updateToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"}],\"name\":\"updateToken2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Helper.sol\":\"Helper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IReferralManager.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/ISquads.sol\\\";\\n\\ncontract Helper is Ownable {\\n    IERC20 public token1;\\n    IERC20 public token2;\\n    IStaking public staking;\\n    IReferralManager public referralManager;\\n    ISquads public squads;\\n\\n    constructor(\\n        address _token1,\\n        address _token2,\\n        address _staking,\\n        address _referralManager,\\n        address _squads\\n    ) Ownable() {\\n        token1 = IERC20(_token1);\\n        token2 = IERC20(_token2);\\n        staking = IStaking(_staking);\\n        referralManager = IReferralManager(_referralManager);\\n        squads = ISquads(_squads);\\n    }\\n\\n    // ------- HELPER FUNCTIONS -------\\n    struct ReferralFullInfo {\\n        address referralAddress;\\n        uint256 level;\\n        uint256 activationDate;\\n        uint256 token1Balance;\\n        uint256 token2Balance;\\n        bool isReferralSubscriptionActive;\\n        bool isStakingSubscriptionActive;\\n    }\\n\\n    // level = 1..10\\n    function getUserReferralsFullInfoByLevel(address user, uint256 level)\\n        public\\n        view\\n        returns (ReferralFullInfo[] memory)\\n    {\\n        IReferralManager.Referral[] memory referrals = referralManager\\n            .getUserReferralsByLevel(user, level);\\n\\n        ReferralFullInfo[] memory referralsFullInfo = new ReferralFullInfo[](\\n            referrals.length\\n        );\\n\\n        for (uint256 i = 0; i < referrals.length; i++) {\\n            address refAddress = referrals[i].referralAddress;\\n            referralsFullInfo[i] = ReferralFullInfo({\\n                referralAddress: refAddress,\\n                level: referrals[i].level,\\n                activationDate: referrals[i].activationDate,\\n                isReferralSubscriptionActive: referrals[i]\\n                    .isReferralSubscriptionActive,\\n                token1Balance: token1.balanceOf(refAddress),\\n                token2Balance: token2.balanceOf(refAddress),\\n                isStakingSubscriptionActive: staking.hasAnySubscription(\\n                    refAddress\\n                )\\n            });\\n        }\\n\\n        return referralsFullInfo;\\n    }\\n\\n    // Squads\\n    struct UserSquadInfo {\\n        ISquads.Squad squadStatus;\\n        ISquads.SquadPlan plan;\\n        address[] members;\\n        bool userHasSufficientStaking;\\n    }\\n\\n    function getUserSquadInfo(uint256 planId, address user)\\n        public\\n        view\\n        returns (UserSquadInfo memory)\\n    {\\n        ISquads.Squad memory squadStatus = squads.getUserSubscription(\\n            user,\\n            planId\\n        );\\n        ISquads.SquadPlan memory plan = squads.getPlan(planId);\\n        address[] memory members = squads.getUserSquadMembers(user, planId);\\n        bool hasStaking = squads.userHasSufficientStaking(user, planId);\\n\\n        return UserSquadInfo(squadStatus, plan, members, hasStaking);\\n    }\\n\\n    function getUserSquadsInfo(address user)\\n        public\\n        view\\n        returns (UserSquadInfo[] memory)\\n    {\\n        uint256 length = squads.getPlans().length;\\n\\n        UserSquadInfo[] memory squadsInfo = new UserSquadInfo[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            squadsInfo[i] = getUserSquadInfo(i, user);\\n        }\\n\\n        return squadsInfo;\\n    }\\n\\n    // --------------------------------\\n\\n    function updateToken1(address _token1) public onlyOwner {\\n        token1 = IERC20(_token1);\\n    }\\n\\n    function updateToken2(address _token2) public onlyOwner {\\n        token2 = IERC20(_token2);\\n    }\\n\\n    function updateStaking(address _staking) public onlyOwner {\\n        staking = IStaking(_staking);\\n    }\\n\\n    function updateReferralManager(address _referralManager) public onlyOwner {\\n        referralManager = IReferralManager(_referralManager);\\n    }\\n\\n    function updateSquads(address _squads) public onlyOwner {\\n        squads = ISquads(_squads);\\n    }\\n}\\n\",\"keccak256\":\"0x52f8289031af63ac6a27b54e7be438cc19fe54fcfe42d7b570bf9d3667c57bf5\",\"license\":\"MIT\"},\"contracts/interfaces/IReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IReferralManager {\\n    struct Referral {\\n        address referralAddress;\\n        uint256 level;\\n        uint256 activationDate;\\n        bool isReferralSubscriptionActive;\\n    }\\n\\n    struct AddDividendsParams {\\n        address user;\\n        uint256 reward;\\n        address referral;\\n        uint256 level;\\n        uint256 depositAmount;\\n        uint256 stakingPlanId;\\n        // REASONS:\\n        // 0 - full reward\\n        // 1 - no ref subscription\\n        // 2 - no user stake\\n        // 3 - trancated by user stake\\n        uint256 reason;\\n    }\\n\\n    function getReferralLevels() external pure returns (uint256);\\n\\n    function addUserDividends(AddDividendsParams memory params) external;\\n\\n    function getUserReferrer(address user) external view returns (address);\\n\\n    function setUserReferrer(address user, address referrer) external;\\n\\n    function userHasSubscription(address user, uint256 level)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateRefReward(uint256 amount, uint256 level)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUserReferralsByLevel(address userAddress, uint256 level)\\n        external\\n        view\\n        returns (Referral[] memory);\\n}\\n\",\"keccak256\":\"0x025e28692dc5fd619553216d46dc8bbfc6cf8a64ca3e29048490808b1e69f501\",\"license\":\"MIT\"},\"contracts/interfaces/ISquads.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ISquads {\\n    struct Squad {\\n        uint256 subscription; // when subscription expire\\n        uint256 squadsFilled; // how much squads user filled\\n    }\\n\\n    struct SquadPlan {\\n        uint256 subscriptionCost;\\n        uint256 reward; // reward for filling full squad\\n        uint256 stakingThreshold; // min staking amount that member should do\\n        uint256 squadSize; // amount of squad members\\n        uint256 stakingPlanId;\\n        bool isActive;\\n    }\\n\\n    function subscribe(uint256 planId) external;\\n\\n    function tryToAddMember(\\n        uint256 stakingPlanId,\\n        address user,\\n        address member,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function getUserSquadMembers(address user, uint256 planId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function userHasSufficientStaking(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getUserSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (Squad memory);\\n\\n    function userHasPlanSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getSufficientPlanIdByStakingAmount(uint256 amount)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getPlan(uint256 planId) external view returns (SquadPlan memory);\\n\\n    function getPlans() external view returns (SquadPlan[] memory);\\n}\\n\",\"keccak256\":\"0x158bfc2859e9530a5f757c62d5b32bb02c18a43b646cec9059942e28a80221fc\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IStaking {\\n    struct StakingPlan {\\n        bool isActive;\\n        uint256 subscriptionCost;\\n        uint256 subscriptionDuration;\\n        uint256 stakingDuration;\\n        uint256 profitPercent;\\n        uint256 totalStakesToken1No;\\n        uint256 totalStakesToken2No;\\n        uint256 totalStakedToken1;\\n        uint256 totalStakedToken2;\\n        uint256 currentToken1Locked;\\n        uint256 currentToken2Locked;\\n        uint256 totalClaimed;\\n    }\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 timeStart;\\n        uint256 timeEnd;\\n        uint256 profitPercent;\\n        uint256 profit;\\n        bool isClaimed;\\n        bool isToken2;\\n    }\\n\\n    struct Staker {\\n        Stake[] stakes;\\n        uint256 subscription;\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n    }\\n\\n    struct UserStakingInfo {\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n        bool isSubscribed;\\n        uint256 subscribedTill;\\n    }\\n\\n    struct StakeWithRewardsInfo {\\n        Stake stake;\\n        uint256 reward;\\n    }\\n\\n    function deposit(\\n        uint256 planId,\\n        uint256 depositAmount,\\n        bool isToken2,\\n        address referrer\\n    ) external;\\n\\n    function withdraw(uint256 planId, uint256 stakeId) external;\\n\\n    function subscribe(uint256 planId) external;\\n\\n    // --------- Helper functions ---------\\n    function getUserPlanInfo(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (UserStakingInfo memory);\\n\\n    function getUserStakes(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (Stake[] memory stakes);\\n\\n    function getAvailableStakeReward(\\n        uint256 planId,\\n        address userAddress,\\n        uint256 stakeId\\n    ) external view returns (uint256);\\n\\n    function hasSubscription(uint256 planId, address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function hasAnySubscription(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xeedc77957bfd6fde55c0dfc474bddbf9a0d20a0ce9dc41538e1b9ee9884ea7ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806378fd900011610097578063ae1fc32411610066578063ae1fc32414610219578063cefaefb61461022c578063d21220a71461024c578063f2fde38b1461025f57600080fd5b806378fd9000146101cf5780637c67b339146101e25780638da5cb5b146101f5578063a345f38d1461020657600080fd5b80632ccd9623116100d35780632ccd9623146101815780634cf088d914610194578063622f46a4146101a7578063715018a6146101c757600080fd5b8063064e6780146101055780631e6f30cb1461011a578063232b9d901461014357806325be124e14610156575b600080fd5b610118610113366004610bb3565b610272565b005b61012d610128366004610bd7565b61029c565b60405161013a9190610cd1565b60405180910390f35b610118610151366004610bb3565b6104b1565b600254610169906001600160a01b031681565b6040516001600160a01b03909116815260200161013a565b600454610169906001600160a01b031681565b600354610169906001600160a01b031681565b6101ba6101b5366004610bb3565b6104db565b60405161013a9190610ce4565b610118610601565b600554610169906001600160a01b031681565b6101186101f0366004610bb3565b610615565b6000546001600160a01b0316610169565b610118610214366004610bb3565b61063f565b610118610227366004610bb3565b610669565b61023f61023a366004610d46565b610693565b60405161013a9190610d72565b600154610169906001600160a01b031681565b61011861026d366004610bb3565b610a04565b61027a610a82565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6102a4610b2c565b60055460405163cc5d19c160e01b81526001600160a01b03848116600483015260248201869052600092169063cc5d19c1906044016040805180830381865afa1580156102f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103199190610e71565b6005546040516309b3549d60e21b8152600481018790529192506000916001600160a01b03909116906326cd52749060240160c060405180830381865afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190610f56565b6005546040516315a1072560e31b81526001600160a01b038781166004830152602482018990529293506000929091169063ad08392890604401600060405180830381865afa1580156103e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261040b9190810190610f96565b600554604051634c96e16d60e11b81526001600160a01b038881166004830152602482018a90529293506000929091169063992dc2da90604401602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190611035565b6040805160808101825295865260208601949094529284019190915250151560608201529392505050565b6104b9610a82565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60606000600560009054906101000a90046001600160a01b03166001600160a01b031663d94a862b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610532573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261055a9190810190611050565b51905060008167ffffffffffffffff81111561057857610578610e01565b6040519080825280602002602001820160405280156105b157816020015b61059e610b2c565b8152602001906001900390816105965790505b50905060005b828110156105f9576105c9818661029c565b8282815181106105db576105db6110ea565b602002602001018190525080806105f190611100565b9150506105b7565b509392505050565b610609610a82565b6106136000610adc565b565b61061d610a82565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610647610a82565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610671610a82565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6004805460405163b09b334f60e01b81526001600160a01b038581169382019390935260248101849052606092600092169063b09b334f90604401600060405180830381865afa1580156106eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107139190810190611129565b90506000815167ffffffffffffffff81111561073157610731610e01565b6040519080825280602002602001820160405280156107af57816020015b61079c6040518060e0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b81526020019060019003908161074f5790505b50905060005b82518110156109fb5760008382815181106107d2576107d26110ea565b60200260200101516000015190506040518060e00160405280826001600160a01b0316815260200185848151811061080c5761080c6110ea565b602002602001015160200151815260200185848151811061082f5761082f6110ea565b602090810291909101810151604090810151835260015490516370a0823160e01b81526001600160a01b038681166004830152939092019216906370a0823190602401602060405180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b391906111f9565b81526002546040516370a0823160e01b81526001600160a01b038581166004830152602090930192909116906370a0823190602401602060405180830381865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092991906111f9565b8152602001858481518110610940576109406110ea565b6020908102919091018101516060015115158252600354604051632b58a66f60e21b81526001600160a01b0386811660048301529390920192169063ad6299bc90602401602060405180830381865afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190611035565b15158152508383815181106109dc576109dc6110ea565b60200260200101819052505080806109f390611100565b9150506107b5565b50949350505050565b610a0c610a82565b6001600160a01b038116610a765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610a7f81610adc565b50565b6000546001600160a01b031633146106135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a6d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160c0810190915260006080820181815260a083019190915281908152602001610b8a6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b815260606020820152600060409091015290565b6001600160a01b0381168114610a7f57600080fd5b600060208284031215610bc557600080fd5b8135610bd081610b9e565b9392505050565b60008060408385031215610bea57600080fd5b823591506020830135610bfc81610b9e565b809150509250929050565b600081518084526020808501945080840160005b83811015610c405781516001600160a01b031687529582019590820190600101610c1b565b509495945050505050565b600061014082518051855260208101516020860152506020830151805160408601526020810151606086015260408101516080860152606081015160a0860152608081015160c086015260a0810151151560e086015250604083015181610100860152610cba82860182610c07565b91505060608301516105f961012086018215159052565b602081526000610bd06020830184610c4b565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d3957603f19888603018452610d27858351610c4b565b94509285019290850190600101610d0b565b5092979650505050505050565b60008060408385031215610d5957600080fd5b8235610d6481610b9e565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015610df457815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080808201519086015260a08082015115159086015260c09081015115159085015260e09093019290850190600101610d8f565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610e3a57610e3a610e01565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610e6957610e69610e01565b604052919050565b600060408284031215610e8357600080fd5b6040516040810181811067ffffffffffffffff82111715610ea657610ea6610e01565b604052825181526020928301519281019290925250919050565b80518015158114610ed057600080fd5b919050565b600060c08284031215610ee757600080fd5b60405160c0810181811067ffffffffffffffff82111715610f0a57610f0a610e01565b80604052508091508251815260208301516020820152604083015160408201526060830151606082015260808301516080820152610f4a60a08401610ec0565b60a08201525092915050565b600060c08284031215610f6857600080fd5b610bd08383610ed5565b600067ffffffffffffffff821115610f8c57610f8c610e01565b5060051b60200190565b60006020808385031215610fa957600080fd5b825167ffffffffffffffff811115610fc057600080fd5b8301601f81018513610fd157600080fd5b8051610fe4610fdf82610f72565b610e40565b81815260059190911b8201830190838101908783111561100357600080fd5b928401925b8284101561102a57835161101b81610b9e565b82529284019290840190611008565b979650505050505050565b60006020828403121561104757600080fd5b610bd082610ec0565b6000602080838503121561106357600080fd5b825167ffffffffffffffff81111561107a57600080fd5b8301601f8101851361108b57600080fd5b8051611099610fdf82610f72565b81815260c091820283018401918482019190888411156110b857600080fd5b938501935b838510156110de576110cf8986610ed5565b835293840193918501916110bd565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561112257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602080838503121561113c57600080fd5b825167ffffffffffffffff81111561115357600080fd5b8301601f8101851361116457600080fd5b8051611172610fdf82610f72565b81815260079190911b8201830190838101908783111561119157600080fd5b928401925b8284101561102a57608084890312156111af5760008081fd5b6111b7610e17565b84516111c281610b9e565b815284860151868201526040808601519082015260606111e3818701610ec0565b9082015282526080939093019290840190611196565b60006020828403121561120b57600080fd5b505191905056fea2646970667358221220ce14b1fe8145ee3837eb65356fea052d979f563bb042d8be4b4fd9c7f343b14364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 554,
        "contract": "contracts/Helper.sol:Helper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5379,
        "contract": "contracts/Helper.sol:Helper",
        "label": "token1",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3098"
      },
      {
        "astId": 5382,
        "contract": "contracts/Helper.sol:Helper",
        "label": "token2",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)3098"
      },
      {
        "astId": 5385,
        "contract": "contracts/Helper.sol:Helper",
        "label": "staking",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IStaking)12763"
      },
      {
        "astId": 5388,
        "contract": "contracts/Helper.sol:Helper",
        "label": "referralManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IReferralManager)12520"
      },
      {
        "astId": 5391,
        "contract": "contracts/Helper.sol:Helper",
        "label": "squads",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISquads)12619"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3098": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralManager)12520": {
        "encoding": "inplace",
        "label": "contract IReferralManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISquads)12619": {
        "encoding": "inplace",
        "label": "contract ISquads",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)12763": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      }
    }
  }
}