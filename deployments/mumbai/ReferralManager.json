{
  "address": "0x5010f7806A07706A80Ac5F22E742694a2cE7eE3f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardPool_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fullSubscriptionCost_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "levelSubscriptionCost_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reason",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DividendsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "ReferralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "levels",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEVELS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "REFERRAL_PERCENTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCRIPTION_PERIOD_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referral",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakingPlanId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reason",
              "type": "uint256"
            }
          ],
          "internalType": "struct IReferralManager.AddDividendsParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "addUserDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "authorizeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "calculateRefReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fullSubscriptionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReferralLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUser1LvlReferrals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256[10]",
          "name": "activeLevels",
          "type": "uint256[10]"
        },
        {
          "internalType": "uint256",
          "name": "totalDividends",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimedDividends",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "referrals_1_lvl",
          "type": "address[]"
        },
        {
          "internalType": "uint256[10]",
          "name": "refCount",
          "type": "uint256[10]"
        },
        {
          "internalType": "uint256",
          "name": "totalReferrals",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActiveSubscriber",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "activationDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "getUserReferralsByLevel",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activationDate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isReferralSubscriptionActive",
              "type": "bool"
            }
          ],
          "internalType": "struct IReferralManager.Referral[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReferrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levelSubscriptionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "removeContractAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "setMyReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "setUserReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscribeToAllLevels",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "subscribeToLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionToken",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "updateFullSubscriptionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "updateLevelSubscriptionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "updateReferralPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "updateRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "updateRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "durationDays",
          "type": "uint256"
        }
      ],
      "name": "updateSubscriptionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "updateSubscriptionToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userHasAnySubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "userHasSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc79539598bef7545fc8b06d5ae7f78e15f2d2c485e090b75a659babc2b68bedb",
  "receipt": {
    "to": null,
    "from": "0xd1F77Ccb2dE84f34516090F08BB10d3Fe870DFaE",
    "contractAddress": "0x5010f7806A07706A80Ac5F22E742694a2cE7eE3f",
    "transactionIndex": 5,
    "gasUsed": "2235877",
    "logsBloom": "0x00000004000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000004000000000000000000000000000000000000800000000000800000000000000000000100000000000800000000020000000000000000000800000000000000000080000000000000000000000000000000000000000000800000000000000000000000000000000000200000000000000020000000000040000001000000000000001000000000004000000000000000000001000000000000000000000000000100100000000020000000000000000000000000000000000000000000000000000000000000300000",
    "blockHash": "0xc4c04a3b257972951f9d01869b7cf3069bf12b1f66c74bd40f5285eb2d4e1569",
    "transactionHash": "0xc79539598bef7545fc8b06d5ae7f78e15f2d2c485e090b75a659babc2b68bedb",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 30571168,
        "transactionHash": "0xc79539598bef7545fc8b06d5ae7f78e15f2d2c485e090b75a659babc2b68bedb",
        "address": "0x5010f7806A07706A80Ac5F22E742694a2cE7eE3f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1f77ccb2de84f34516090f08bb10d3fe870dfae",
          "0x000000000000000000000000d1f77ccb2de84f34516090f08bb10d3fe870dfae"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xc4c04a3b257972951f9d01869b7cf3069bf12b1f66c74bd40f5285eb2d4e1569"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 30571168,
        "transactionHash": "0xc79539598bef7545fc8b06d5ae7f78e15f2d2c485e090b75a659babc2b68bedb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d1f77ccb2de84f34516090f08bb10d3fe870dfae",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000bea4705850b000000000000000000000000000000000000000000000000000281f5468b87d6bd0000000000000000000000000000000000000000000018c66f0f525bf814a7b700000000000000000000000000000000000000000000000002760aff8602cbbd0000000000000000000000000000000000000000000018c66f1b3ca2fd99b2b7",
        "logIndex": 12,
        "blockHash": "0xc4c04a3b257972951f9d01869b7cf3069bf12b1f66c74bd40f5285eb2d4e1569"
      }
    ],
    "blockNumber": 30571168,
    "cumulativeGasUsed": "2719156",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6e6B9420DDE50C4678F470cFE696ac2ccbAc3ABF",
    "0x29a9a9Cc0d2e5163f4e38d00c33EC12Dd1f0AEc2",
    "0xf982D706f37Cb781D567395877EC35eDCB7Cf65C",
    "5000000000000000000",
    "1000000000000000000"
  ],
  "numDeployments": 2,
  "solcInputHash": "03ca36f09628810065892d1ca270a172",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPool_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fullSubscriptionCost_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelSubscriptionCost_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DividendsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"ReferralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"levels\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEVELS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_PERIOD_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"internalType\":\"struct IReferralManager.AddDividendsParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addUserDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"authorizeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"calculateRefReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullSubscriptionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser1LvlReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256[10]\",\"name\":\"activeLevels\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedDividends\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"referrals_1_lvl\",\"type\":\"address[]\"},{\"internalType\":\"uint256[10]\",\"name\":\"refCount\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256\",\"name\":\"totalReferrals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActiveSubscriber\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activationDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getUserReferralsByLevel\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReferralSubscriptionActive\",\"type\":\"bool\"}],\"internalType\":\"struct IReferralManager.Referral[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelSubscriptionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"removeContractAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setMyReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setUserReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribeToAllLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"subscribeToLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionToken\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"updateFullSubscriptionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"updateLevelSubscriptionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateReferralPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"updateRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"}],\"name\":\"updateSubscriptionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateSubscriptionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasAnySubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"userHasSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReferralManager.sol\":\"ReferralManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IReferralManager.sol\\\";\\n\\ncontract ReferralManager is IReferralManager, AccessControl {\\n    uint256 public constant LEVELS = 10;\\n    uint256 public SUBSCRIPTION_PERIOD_DAYS = 365;\\n    uint256[] public REFERRAL_PERCENTS = [\\n        100,\\n        90,\\n        80,\\n        70,\\n        60,\\n        50,\\n        40,\\n        30,\\n        20,\\n        10\\n    ];\\n\\n    struct User {\\n        address referrer;\\n        uint256[LEVELS] activeLevels;\\n        uint256 totalRefDividends;\\n        uint256 totalRefDividendsClaimed;\\n        address[] referrals_1_lvl;\\n        uint256[LEVELS] refCount;\\n        bool isActiveSubscriber;\\n        uint256 activationDate;\\n    }\\n    uint256 public levelSubscriptionCost;\\n    uint256 public fullSubscriptionCost;\\n\\n    mapping(address => User) private users;\\n    mapping(address => bool) private authorizedContracts;\\n\\n    ERC20Burnable public subscriptionToken;\\n    IERC20 public rewardToken;\\n    address private rewardPool;\\n\\n    event Subscribed(\\n        address indexed subscriber,\\n        uint256 levels,\\n        uint256 indexed timestamp\\n    );\\n    event ReferralAdded(address indexed referrer, address indexed referral);\\n    event DividendsAdded(\\n        address indexed referrer,\\n        address indexed referral,\\n        uint256 indexed level,\\n        uint256 depositAmount,\\n        uint256 rewardAmount,\\n        uint256 stakingPlanId,\\n        uint256 reason,\\n        uint256 timestamp\\n    );\\n\\n    constructor(\\n        address subscriptionToken_,\\n        address rewardToken_,\\n        address rewardPool_,\\n        uint256 fullSubscriptionCost_,\\n        uint256 levelSubscriptionCost_\\n    ) {\\n        require(subscriptionToken_ != address(0));\\n        require(rewardToken_ != address(0));\\n        require(rewardPool_ != address(0));\\n        require(fullSubscriptionCost_ > 0);\\n        require(levelSubscriptionCost_ > 0);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        subscriptionToken = ERC20Burnable(subscriptionToken_);\\n        rewardToken = IERC20(rewardToken_);\\n        rewardPool = rewardPool_;\\n        fullSubscriptionCost = fullSubscriptionCost_;\\n        levelSubscriptionCost = levelSubscriptionCost_;\\n    }\\n\\n    // LEVEL = 1...10\\n    function subscribeToLevel(uint256 level) public {\\n        require(level > 0, \\\"Too low level\\\");\\n        require(level <= LEVELS, \\\"Too big level\\\");\\n\\n        address subscriber = _msgSender();\\n\\n        subscriptionToken.burnFrom(subscriber, levelSubscriptionCost);\\n\\n        uint256 startDate = users[subscriber].activeLevels[level - 1] <\\n            getTimestamp()\\n            ? getTimestamp()\\n            : users[subscriber].activeLevels[level - 1];\\n        users[subscriber].activeLevels[level - 1] =\\n            startDate +\\n            SUBSCRIPTION_PERIOD_DAYS *\\n            1 days;\\n\\n        users[subscriber].isActiveSubscriber = true;\\n        emit Subscribed(subscriber, level, startDate);\\n    }\\n\\n    function subscribeToAllLevels() public {\\n        address subscriber = _msgSender();\\n\\n        subscriptionToken.burnFrom(subscriber, fullSubscriptionCost);\\n        uint256 subscriptionEnd = getTimestamp() +\\n            SUBSCRIPTION_PERIOD_DAYS *\\n            1 days;\\n\\n        for (uint256 i = 0; i < LEVELS; i++) {\\n            users[subscriber].activeLevels[i] = subscriptionEnd;\\n        }\\n\\n        users[subscriber].isActiveSubscriber = true;\\n        emit Subscribed(subscriber, LEVELS + 1, block.timestamp);\\n    }\\n\\n    function addUserDividends(AddDividendsParams memory params)\\n        public\\n        onlyAuthorizedContracts\\n    {\\n        users[params.user].totalRefDividends += params.reward;\\n        emit DividendsAdded(\\n            params.user,\\n            params.referral,\\n            params.level,\\n            params.depositAmount,\\n            params.reward,\\n            params.stakingPlanId,\\n            params.reason,\\n            getTimestamp()\\n        );\\n    }\\n\\n    function claimDividends(uint256 amount) public {\\n        User storage user = users[_msgSender()];\\n        require(\\n            user.totalRefDividends - user.totalRefDividendsClaimed >= amount,\\n            \\\"Insufficient amount\\\"\\n        );\\n\\n        user.totalRefDividendsClaimed += amount;\\n        require(\\n            rewardToken.balanceOf(rewardPool) >= amount,\\n            \\\"Not enough tokens in pool\\\"\\n        );\\n        rewardToken.transferFrom(rewardPool, _msgSender(), amount);\\n    }\\n\\n    function setMyReferrer(address referrer) public {\\n        return _setUserReferrer(_msgSender(), referrer);\\n    }\\n\\n    function setUserReferrer(address user, address referrer)\\n        public\\n        onlyAuthorizedContracts\\n    {\\n        return _setUserReferrer(user, referrer);\\n    }\\n\\n    function _setUserReferrer(address user, address referrer) internal {\\n        require(user != address(0), \\\"User is zero address\\\");\\n        require(referrer != address(0), \\\"Referrer is zero address\\\");\\n        require(referrer != user, \\\"Referrer can not be user\\\");\\n        require(\\n            users[user].referrer == address(0),\\n            \\\"Referrer is already specified\\\"\\n        );\\n        require(\\n            userHasSubscription(referrer, 1),\\n            \\\"Referrer has no subscription\\\"\\n        );\\n\\n        users[user].referrer = referrer;\\n        users[user].activationDate = getTimestamp();\\n        users[referrer].referrals_1_lvl.push(user);\\n\\n        address nextReferrer = referrer;\\n        for (uint256 i = 0; i < LEVELS; i++) {\\n            require(nextReferrer != user, \\\"Cyclic chain!\\\");\\n            User storage ref = users[nextReferrer];\\n            if (ref.isActiveSubscriber) {\\n                ref.refCount[i] += 1;\\n                nextReferrer = ref.referrer;\\n            } else break;\\n        }\\n\\n        emit ReferralAdded(referrer, user);\\n    }\\n\\n    // --------- Helper functions ---------\\n    function getReferralLevels() public pure returns (uint256) {\\n        return LEVELS;\\n    }\\n\\n    function getUserInfo(address userAddress)\\n        public\\n        view\\n        returns (\\n            address referrer,\\n            uint256[LEVELS] memory activeLevels,\\n            uint256 totalDividends,\\n            uint256 totalClaimedDividends,\\n            address[] memory referrals_1_lvl,\\n            uint256[LEVELS] memory refCount,\\n            uint256 totalReferrals,\\n            bool isActiveSubscriber,\\n            uint256 activationDate\\n        )\\n    {\\n        User storage user = users[userAddress];\\n\\n        referrer = user.referrer;\\n        activeLevels = user.activeLevels;\\n        totalDividends = user.totalRefDividends;\\n        totalClaimedDividends = user.totalRefDividendsClaimed;\\n        referrals_1_lvl = user.referrals_1_lvl;\\n        refCount = user.refCount;\\n        totalReferrals = _getUserTotalReferralsCount(userAddress, 0);\\n        isActiveSubscriber = user.isActiveSubscriber;\\n        activationDate = user.activationDate;\\n    }\\n\\n    function getUserReferrer(address user) public view returns (address) {\\n        return users[user].referrer;\\n    }\\n\\n    function getUser1LvlReferrals(address userAddress)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return users[userAddress].referrals_1_lvl;\\n    }\\n\\n    function _getUserTotalReferralsCount(\\n        address userAddress,\\n        uint256 currentLevel\\n    ) internal view returns (uint256) {\\n        User storage user = users[userAddress];\\n        uint256 referralCounter = 0;\\n\\n        for (uint256 i = 0; i < LEVELS - currentLevel; i++) {\\n            referralCounter += user.refCount[i];\\n        }\\n\\n        return referralCounter;\\n    }\\n\\n    // LEVEL = 1...10\\n    function getUserReferralsByLevel(address userAddress, uint256 level)\\n        public\\n        view\\n        returns (Referral[] memory)\\n    {\\n        return _getUserReferrals(userAddress, level, 1);\\n    }\\n\\n    // Experimental function, probably may fail on a large data\\n    // requiredLevel = 1..10\\n    // currentLevel = 1..10\\n    function _getUserReferrals(\\n        address userAddress,\\n        uint256 requiredLevel,\\n        uint256 currentLevel\\n    ) internal view returns (Referral[] memory) {\\n        require(currentLevel <= requiredLevel, \\\"Current level > level\\\");\\n\\n        address[] memory level1Referrals = getUser1LvlReferrals(userAddress);\\n        uint256 refCount = users[userAddress].refCount[\\n            requiredLevel - currentLevel\\n        ];\\n        Referral[] memory referrals = new Referral[](refCount);\\n        uint256 nextReferralIndex = 0;\\n\\n        for (uint256 i = 0; i < level1Referrals.length; i++) {\\n            address referralAddress = level1Referrals[i];\\n\\n            if (currentLevel == requiredLevel) {\\n                referrals[i] = Referral({\\n                    referralAddress: referralAddress,\\n                    level: currentLevel,\\n                    activationDate: users[referralAddress].activationDate,\\n                    isReferralSubscriptionActive: userHasAnySubscription(\\n                        referralAddress\\n                    )\\n                });\\n            } else {\\n                Referral[] memory theirReferrals = _getUserReferrals(\\n                    referralAddress,\\n                    requiredLevel,\\n                    currentLevel + 1\\n                );\\n\\n                for (uint256 j = 0; j < theirReferrals.length; j++) {\\n                    referrals[nextReferralIndex] = theirReferrals[j];\\n                    nextReferralIndex++;\\n                }\\n            }\\n        }\\n\\n        return referrals;\\n    }\\n\\n    // LEVEL = 1...10\\n    function userHasSubscription(address user, uint256 level)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return users[user].activeLevels[level - 1] > getTimestamp();\\n    }\\n\\n    function userHasAnySubscription(address user) public view returns (bool) {\\n        for (uint256 i = 1; i <= LEVELS; i++) {\\n            if (userHasSubscription(user, i)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // LEVEL = 1...10\\n    function calculateRefReward(uint256 amount, uint256 level)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(level > 0);\\n        require(level <= LEVELS);\\n        return (amount * REFERRAL_PERCENTS[level - 1]) / 100;\\n    }\\n\\n    function getTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function isAuthorized(address contractAddress) public view returns (bool) {\\n        return authorizedContracts[contractAddress];\\n    }\\n\\n    modifier onlyAuthorizedContracts() {\\n        require(isAuthorized(_msgSender()), \\\"Address not authorized\\\");\\n        _;\\n    }\\n\\n    // --------- Administrative functions ---------\\n\\n    function authorizeContract(address contractAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        authorizedContracts[contractAddress] = true;\\n    }\\n\\n    function removeContractAuthorization(address contractAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        authorizedContracts[contractAddress] = false;\\n    }\\n\\n    function updateSubscriptionPeriod(uint256 durationDays)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        SUBSCRIPTION_PERIOD_DAYS = durationDays;\\n    }\\n\\n    // LEVEL = 1...10\\n    function updateReferralPercent(uint256 level, uint256 percent)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(level > 0);\\n        require(level <= LEVELS);\\n        REFERRAL_PERCENTS[level - 1] = percent;\\n    }\\n\\n    function updateSubscriptionToken(address token)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        subscriptionToken = ERC20Burnable(token);\\n    }\\n\\n    function updateRewardToken(address token)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        rewardToken = IERC20(token);\\n    }\\n\\n    function updateRewardPool(address poolAddress)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        rewardPool = poolAddress;\\n    }\\n\\n    function updateLevelSubscriptionCost(uint256 cost)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        levelSubscriptionCost = cost;\\n    }\\n\\n    function updateFullSubscriptionCost(uint256 cost)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        fullSubscriptionCost = cost;\\n    }\\n}\\n\",\"keccak256\":\"0x313408da7b94f3102ee3ff122043842a8eb112b612e50c811c14dbcdaa262a57\",\"license\":\"MIT\"},\"contracts/interfaces/IReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IReferralManager {\\n    struct Referral {\\n        address referralAddress;\\n        uint256 level;\\n        uint256 activationDate;\\n        bool isReferralSubscriptionActive;\\n    }\\n\\n    struct AddDividendsParams {\\n        address user;\\n        uint256 reward;\\n        address referral;\\n        uint256 level;\\n        uint256 depositAmount;\\n        uint256 stakingPlanId;\\n        // REASONS:\\n        // 0 - full reward\\n        // 1 - no ref subscription\\n        // 2 - no user stake\\n        // 3 - trancated by user stake\\n        // 4 - team\\n        uint256 reason;\\n    }\\n\\n    function getReferralLevels() external pure returns (uint256);\\n\\n    function addUserDividends(AddDividendsParams memory params) external;\\n\\n    function getUserReferrer(address user) external view returns (address);\\n\\n    function setUserReferrer(address user, address referrer) external;\\n\\n    function userHasSubscription(address user, uint256 level)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateRefReward(uint256 amount, uint256 level)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUserReferralsByLevel(address userAddress, uint256 level)\\n        external\\n        view\\n        returns (Referral[] memory);\\n}\\n\",\"keccak256\":\"0x760235771d939da15193c05f7d1c24cfff3f583cdc37f92b42bef5b304491f5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016d6001556101c060405260646080908152605a60a052605060c052604660e052603c61010052603261012052602861014052601e61016052601461018052600a6101a08190526200005591600291620001d9565b503480156200006357600080fd5b50604051620022ce380380620022ce833981016040819052620000869162000262565b6001600160a01b0385166200009a57600080fd5b6001600160a01b038416620000ae57600080fd5b6001600160a01b038316620000c257600080fd5b60008211620000d057600080fd5b60008111620000de57600080fd5b620000eb60003362000138565b600780546001600160a01b03199081166001600160a01b039788161790915560088054821695871695909517909455600980549094169290941691909117909155600455600355620002bf565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001d5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001943390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b8280548282559060005260206000209081019282156200021c579160200282015b828111156200021c578251829060ff16905591602001919060010190620001fa565b506200022a9291506200022e565b5090565b5b808211156200022a57600081556001016200022f565b80516001600160a01b03811681146200025d57600080fd5b919050565b600080600080600060a086880312156200027b57600080fd5b620002868662000245565b9450620002966020870162000245565b9350620002a66040870162000245565b6060870151608090970151959894975095949392505050565b611fff80620002cf6000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c806391d148541161013b578063d547741f116100b8578063e39092ba1161007c578063e39092ba14610501578063f7c618c114610514578063f8cf31cb14610527578063f8d0e6ec1461053a578063fe9fbb801461054d57600080fd5b8063d547741f146104ad578063d5fbac3a146104c0578063d6672e1c146104d3578063dc6492a5146104e6578063e2adba8c146104f957600080fd5b8063aaa138a2116100ff578063aaa138a214610455578063acb101631461045e578063b09b334f14610471578063b32cf5cf14610491578063bd7047c41461049a57600080fd5b806391d14854146104015780639581f527146104145780639d7594a714610427578063a217fddf1461043a578063a243d5ac1461044257600080fd5b80635919adac116101c95780637f24f0f21161018d5780637f24f0f2146103aa57806384197dbb146103bd57806389b684f5146103d05780638ebb3c81146103d957806391a9e4a2146103f957600080fd5b80635919adac14610336578063600d20ce146103495780636386c1c71461035c57806367561d9314610384578063736560b51461039757600080fd5b8063188ec35611610210578063188ec356146102a3578063248a9ca3146102a95780632f2ff15d146102cc57806336144c9a146102df57806336568abe1461032357600080fd5b806301ffc9a714610242578063070d451f1461026a57806307fd4d961461027b5780630dcb3c8a1461028e575b600080fd5b610255610250366004611aba565b610579565b60405190151581526020015b60405180910390f35b600a5b604051908152602001610261565b610255610289366004611b00565b6105b0565b6102a161029c366004611b2a565b6105f5565b005b4261026d565b61026d6102b7366004611b2a565b60009081526020819052604090206001015490565b6102a16102da366004611b43565b610606565b61030b6102ed366004611b6f565b6001600160a01b039081166000908152600560205260409020541690565b6040516001600160a01b039091168152602001610261565b6102a1610331366004611b43565b610630565b6102a1610344366004611b6f565b6106b3565b61026d610357366004611b2a565b6106c0565b61036f61036a366004611b6f565b6106e1565b60405161026199989796959493929190611bf7565b6102a1610392366004611b6f565b610824565b6102a16103a5366004611b2a565b610854565b6102a16103b8366004611b6f565b610865565b61026d6103cb366004611c6a565b610892565b61026d60035481565b6103ec6103e7366004611b6f565b6108f4565b6040516102619190611c8c565b6102a161096d565b61025561040f366004611b43565b610abb565b6102a1610422366004611cb5565b610ae4565b6102a1610435366004611b2a565b610bf7565b61026d600081565b6102a1610450366004611b6f565b610e2e565b61026d60015481565b6102a161046c366004611b2a565b610e5c565b61048461047f366004611b00565b610e6d565b6040516102619190611d53565b61026d60045481565b6102a16104a8366004611b2a565b610e7b565b6102a16104bb366004611b43565b611050565b6102a16104ce366004611b6f565b611075565b60075461030b906001600160a01b031681565b6102a16104f4366004611c6a565b6110a3565b61026d600a81565b61025561050f366004611b6f565b6110f8565b60085461030b906001600160a01b031681565b6102a1610535366004611b6f565b611138565b6102a1610548366004611dc2565b611166565b61025561055b366004611b6f565b6001600160a01b031660009081526006602052604090205460ff1690565b60006001600160e01b03198216637965db0b60e01b14806105aa57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000426001600160a01b03841660009081526005602052604090206001908101906105db9085611e02565b600a81106105eb576105eb611e19565b0154119392505050565b6000610600816111be565b50600355565b600082815260208190526040902060010154610621816111be565b61062b83836111c8565b505050565b6001600160a01b03811633146106a55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106af828261124c565b5050565b6106bd33826112b1565b50565b600281815481106106d057600080fd5b600091825260209091200154905081565b60006106eb611a9b565b60008060606106f8611a9b565b6001600160a01b0387811660009081526005602052604080822080548251610140810193849052941699509192839283929091906001830190600a9082845b815481526020019060010190808311610737575050505050985080600b0154975080600c0154965080600d018054806020026020016040519081016040528092919081815260200182805480156107b757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610799575b505060408051610140810191829052949a50600e86019350600a9250905082845b8154815260200190600101908083116107d857505050505094506107fd8b60006115f1565b60188201546019909201549a9c999b509799969895979496949560ff909116949350915050565b600061082f816111be565b506001600160a01b03166000908152600660205260409020805460ff19166001179055565b600061085f816111be565b50600155565b6000610870816111be565b506001600160a01b03166000908152600660205260409020805460ff19169055565b60008082116108a057600080fd5b600a8211156108ae57600080fd5b606460026108bd600185611e02565b815481106108cd576108cd611e19565b9060005260206000200154846108e39190611e2f565b6108ed9190611e4e565b9392505050565b6001600160a01b038116600090815260056020908152604091829020600d0180548351818402810184019094528084526060939283018282801561096157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610943575b50505050509050919050565b6000336007546004805460405163079cc67960e41b81526001600160a01b0380861693820193909352602481019190915292935016906379cc679090604401600060405180830381600087803b1580156109c657600080fd5b505af11580156109da573d6000803e3d6000fd5b505050506000600154620151806109f19190611e2f565b6109fb9042611e70565b905060005b600a811015610a4b576001600160a01b0383166000908152600560205260409020829060010182600a8110610a3757610a37611e19565b015580610a4381611e88565b915050610a00565b506001600160a01b0382166000818152600560205260409020601801805460ff191660019081179091554291907ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f90610aa690600a90611e70565b60405190815260200160405180910390a35050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610aed3361055b565b610b325760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc81b9bdd08185d5d1a1bdc9a5e995960521b604482015260640161069c565b60208082015182516001600160a01b03166000908152600590925260408220600b01805491929091610b65908490611e70565b92505081905550806060015181604001516001600160a01b031682600001516001600160a01b03167f71e87ac6e13bd74c97691b2342cbc5cb5ca3bdf594c00dd1357f7cfbe6645a16846080015185602001518660a001518760c00151610bc94290565b604080519586526020860194909452928401919091526060830152608082015260a00160405180910390a450565b60008111610c375760405162461bcd60e51b815260206004820152600d60248201526c151bdbc81b1bddc81b195d995b609a1b604482015260640161069c565b600a811115610c785760405162461bcd60e51b815260206004820152600d60248201526c151bdbc8189a59c81b195d995b609a1b604482015260640161069c565b60003360075460035460405163079cc67960e41b81526001600160a01b038085166004830152602482019290925292935016906379cc679090604401600060405180830381600087803b158015610cce57600080fd5b505af1158015610ce2573d6000803e3d6000fd5b505050506000610cef4290565b6001600160a01b0383166000908152600560205260409020600190810190610d179086611e02565b600a8110610d2757610d27611e19565b015410610d6d576001600160a01b0382166000908152600560205260409020600190810190610d569085611e02565b600a8110610d6657610d66611e19565b0154610d6f565b425b905060015462015180610d829190611e2f565b610d8c9082611e70565b6001600160a01b0383166000908152600560205260409020600190810190610db49086611e02565b600a8110610dc457610dc4611e19565b01556001600160a01b03821660008181526005602052604090819020601801805460ff19166001179055518291907ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f90610e219087815260200190565b60405180910390a3505050565b6000610e39816111be565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e67816111be565b50600455565b60606108ed8383600161165c565b336000908152600560205260409020600c810154600b8201548391610e9f91611e02565b1015610ee35760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b604482015260640161069c565b8181600c016000828254610ef79190611e70565b90915550506008546009546040516370a0823160e01b81526001600160a01b039182166004820152849291909116906370a0823190602401602060405180830381865afa158015610f4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f709190611ea3565b1015610fbe5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820746f6b656e7320696e20706f6f6c00000000000000604482015260640161069c565b6008546009546001600160a01b03918216916323b872dd9116336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018590526064016020604051808303816000875af115801561102c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190611ebc565b60008281526020819052604090206001015461106b816111be565b61062b838361124c565b6000611080816111be565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60006110ae816111be565b600083116110bb57600080fd5b600a8311156110c957600080fd5b8160026110d7600186611e02565b815481106110e7576110e7611e19565b600091825260209091200155505050565b600060015b600a811161112f5761110f83826105b0565b1561111d5750600192915050565b8061112781611e88565b9150506110fd565b50600092915050565b6000611143816111be565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b61116f3361055b565b6111b45760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc81b9bdd08185d5d1a1bdc9a5e995960521b604482015260640161069c565b6106af82826112b1565b6106bd813361189b565b6111d28282610abb565b6106af576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556112083390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112568282610abb565b156106af576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0382166112fe5760405162461bcd60e51b815260206004820152601460248201527355736572206973207a65726f206164647265737360601b604482015260640161069c565b6001600160a01b0381166113545760405162461bcd60e51b815260206004820152601860248201527f5265666572726572206973207a65726f20616464726573730000000000000000604482015260640161069c565b816001600160a01b0316816001600160a01b031614156113b65760405162461bcd60e51b815260206004820152601860248201527f52656665727265722063616e206e6f7420626520757365720000000000000000604482015260640161069c565b6001600160a01b03828116600090815260056020526040902054161561141e5760405162461bcd60e51b815260206004820152601d60248201527f526566657272657220697320616c726561647920737065636966696564000000604482015260640161069c565b6114298160016105b0565b6114755760405162461bcd60e51b815260206004820152601c60248201527f526566657272657220686173206e6f20737562736372697074696f6e00000000604482015260640161069c565b6001600160a01b03828116600081815260056020908152604080832080549587166001600160a01b0319968716811782554260199092019190915583528220600d01805460018101825590835290822001805490931690911790915581905b600a8110156115ab57836001600160a01b0316826001600160a01b0316141561152f5760405162461bcd60e51b815260206004820152600d60248201526c4379636c696320636861696e2160981b604482015260640161069c565b6001600160a01b0382166000908152600560205260409020601881015460ff161561159257600181600e0183600a811061156b5761156b611e19565b01600082825461157b9190611e70565b909155505080546001600160a01b03169250611598565b506115ab565b50806115a381611e88565b9150506114d4565b50826001600160a01b0316826001600160a01b03167f3f6a300e641007b6c88b17485d36e2d83c20409a1c5e79bfa1f4eb69ea09469560405160405180910390a3505050565b6001600160a01b038216600090815260056020526040812081805b61161785600a611e02565b8110156116535782600e0181600a811061163357611633611e19565b015461163f9083611e70565b91508061164b81611e88565b91505061160c565b50949350505050565b6060828211156116a65760405162461bcd60e51b815260206004820152601560248201527410dd5c9c995b9d081b195d995b080f881b195d995b605a1b604482015260640161069c565b60006116b1856108f4565b6001600160a01b038616600090815260056020526040812091925090600e016116da8587611e02565b600a81106116ea576116ea611e19565b0154905060008167ffffffffffffffff81111561170957611709611c9f565b60405190808252806020026020018201604052801561175b57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816117275790505b5090506000805b845181101561188e57600085828151811061177f5761177f611e19565b60200260200101519050888814156117fb57604080516080810182526001600160a01b03831680825260208083018c90526000918252600590528290206019015491810191909152606081016117d4836110f8565b15158152508483815181106117eb576117eb611e19565b602002602001018190525061187b565b6000611812828b61180d8c6001611e70565b61165c565b905060005b81518110156118785781818151811061183257611832611e19565b602002602001015186868151811061184c5761184c611e19565b6020026020010181905250848061186290611e88565b955050808061187090611e88565b915050611817565b50505b508061188681611e88565b915050611762565b5090979650505050505050565b6118a58282610abb565b6106af576118bd816001600160a01b031660146118ff565b6118c88360206118ff565b6040516020016118d9929190611f0a565b60408051601f198184030181529082905262461bcd60e51b825261069c91600401611f7f565b6060600061190e836002611e2f565b611919906002611e70565b67ffffffffffffffff81111561193157611931611c9f565b6040519080825280601f01601f19166020018201604052801561195b576020820181803683370190505b509050600360fc1b8160008151811061197657611976611e19565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119a5576119a5611e19565b60200101906001600160f81b031916908160001a90535060006119c9846002611e2f565b6119d4906001611e70565b90505b6001811115611a4c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a0857611a08611e19565b1a60f81b828281518110611a1e57611a1e611e19565b60200101906001600160f81b031916908160001a90535060049490941c93611a4581611fb2565b90506119d7565b5083156108ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161069c565b604051806101400160405280600a906020820280368337509192915050565b600060208284031215611acc57600080fd5b81356001600160e01b0319811681146108ed57600080fd5b80356001600160a01b0381168114611afb57600080fd5b919050565b60008060408385031215611b1357600080fd5b611b1c83611ae4565b946020939093013593505050565b600060208284031215611b3c57600080fd5b5035919050565b60008060408385031215611b5657600080fd5b82359150611b6660208401611ae4565b90509250929050565b600060208284031215611b8157600080fd5b6108ed82611ae4565b8060005b600a811015611bad578151845260209384019390910190600101611b8e565b50505050565b600081518084526020808501945080840160005b83811015611bec5781516001600160a01b031687529582019590820190600101611bc7565b509495945050505050565b6001600160a01b038a1681526000610360611c15602084018c611b8a565b8961016084015288610180840152806101a0840152611c3681840189611bb3565b915050611c476101c0830187611b8a565b610300820194909452911515610320830152610340909101529695505050505050565b60008060408385031215611c7d57600080fd5b50508035926020909101359150565b6020815260006108ed6020830184611bb3565b634e487b7160e01b600052604160045260246000fd5b600060e08284031215611cc757600080fd5b60405160e0810181811067ffffffffffffffff82111715611cf857634e487b7160e01b600052604160045260246000fd5b604052611d0483611ae4565b815260208301356020820152611d1c60408401611ae4565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b602080825282518282018190526000919060409081850190868401855b82811015611db557815180516001600160a01b031685528681015187860152858101518686015260609081015115159085015260809093019290850190600101611d70565b5091979650505050505050565b60008060408385031215611dd557600080fd5b611dde83611ae4565b9150611b6660208401611ae4565b634e487b7160e01b600052601160045260246000fd5b600082821015611e1457611e14611dec565b500390565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611e4957611e49611dec565b500290565b600082611e6b57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611e8357611e83611dec565b500190565b6000600019821415611e9c57611e9c611dec565b5060010190565b600060208284031215611eb557600080fd5b5051919050565b600060208284031215611ece57600080fd5b815180151581146108ed57600080fd5b60005b83811015611ef9578181015183820152602001611ee1565b83811115611bad5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f42816017850160208801611ede565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f73816028840160208801611ede565b01602801949350505050565b6020815260008251806020840152611f9e816040850160208701611ede565b601f01601f19169190910160400192915050565b600081611fc157611fc1611dec565b50600019019056fea26469706673582212201c3e96e2813ca43c9f95cdfe7cb0ba5594a9a69123f86eab762a3e522a82207564736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c806391d148541161013b578063d547741f116100b8578063e39092ba1161007c578063e39092ba14610501578063f7c618c114610514578063f8cf31cb14610527578063f8d0e6ec1461053a578063fe9fbb801461054d57600080fd5b8063d547741f146104ad578063d5fbac3a146104c0578063d6672e1c146104d3578063dc6492a5146104e6578063e2adba8c146104f957600080fd5b8063aaa138a2116100ff578063aaa138a214610455578063acb101631461045e578063b09b334f14610471578063b32cf5cf14610491578063bd7047c41461049a57600080fd5b806391d14854146104015780639581f527146104145780639d7594a714610427578063a217fddf1461043a578063a243d5ac1461044257600080fd5b80635919adac116101c95780637f24f0f21161018d5780637f24f0f2146103aa57806384197dbb146103bd57806389b684f5146103d05780638ebb3c81146103d957806391a9e4a2146103f957600080fd5b80635919adac14610336578063600d20ce146103495780636386c1c71461035c57806367561d9314610384578063736560b51461039757600080fd5b8063188ec35611610210578063188ec356146102a3578063248a9ca3146102a95780632f2ff15d146102cc57806336144c9a146102df57806336568abe1461032357600080fd5b806301ffc9a714610242578063070d451f1461026a57806307fd4d961461027b5780630dcb3c8a1461028e575b600080fd5b610255610250366004611aba565b610579565b60405190151581526020015b60405180910390f35b600a5b604051908152602001610261565b610255610289366004611b00565b6105b0565b6102a161029c366004611b2a565b6105f5565b005b4261026d565b61026d6102b7366004611b2a565b60009081526020819052604090206001015490565b6102a16102da366004611b43565b610606565b61030b6102ed366004611b6f565b6001600160a01b039081166000908152600560205260409020541690565b6040516001600160a01b039091168152602001610261565b6102a1610331366004611b43565b610630565b6102a1610344366004611b6f565b6106b3565b61026d610357366004611b2a565b6106c0565b61036f61036a366004611b6f565b6106e1565b60405161026199989796959493929190611bf7565b6102a1610392366004611b6f565b610824565b6102a16103a5366004611b2a565b610854565b6102a16103b8366004611b6f565b610865565b61026d6103cb366004611c6a565b610892565b61026d60035481565b6103ec6103e7366004611b6f565b6108f4565b6040516102619190611c8c565b6102a161096d565b61025561040f366004611b43565b610abb565b6102a1610422366004611cb5565b610ae4565b6102a1610435366004611b2a565b610bf7565b61026d600081565b6102a1610450366004611b6f565b610e2e565b61026d60015481565b6102a161046c366004611b2a565b610e5c565b61048461047f366004611b00565b610e6d565b6040516102619190611d53565b61026d60045481565b6102a16104a8366004611b2a565b610e7b565b6102a16104bb366004611b43565b611050565b6102a16104ce366004611b6f565b611075565b60075461030b906001600160a01b031681565b6102a16104f4366004611c6a565b6110a3565b61026d600a81565b61025561050f366004611b6f565b6110f8565b60085461030b906001600160a01b031681565b6102a1610535366004611b6f565b611138565b6102a1610548366004611dc2565b611166565b61025561055b366004611b6f565b6001600160a01b031660009081526006602052604090205460ff1690565b60006001600160e01b03198216637965db0b60e01b14806105aa57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000426001600160a01b03841660009081526005602052604090206001908101906105db9085611e02565b600a81106105eb576105eb611e19565b0154119392505050565b6000610600816111be565b50600355565b600082815260208190526040902060010154610621816111be565b61062b83836111c8565b505050565b6001600160a01b03811633146106a55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106af828261124c565b5050565b6106bd33826112b1565b50565b600281815481106106d057600080fd5b600091825260209091200154905081565b60006106eb611a9b565b60008060606106f8611a9b565b6001600160a01b0387811660009081526005602052604080822080548251610140810193849052941699509192839283929091906001830190600a9082845b815481526020019060010190808311610737575050505050985080600b0154975080600c0154965080600d018054806020026020016040519081016040528092919081815260200182805480156107b757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610799575b505060408051610140810191829052949a50600e86019350600a9250905082845b8154815260200190600101908083116107d857505050505094506107fd8b60006115f1565b60188201546019909201549a9c999b509799969895979496949560ff909116949350915050565b600061082f816111be565b506001600160a01b03166000908152600660205260409020805460ff19166001179055565b600061085f816111be565b50600155565b6000610870816111be565b506001600160a01b03166000908152600660205260409020805460ff19169055565b60008082116108a057600080fd5b600a8211156108ae57600080fd5b606460026108bd600185611e02565b815481106108cd576108cd611e19565b9060005260206000200154846108e39190611e2f565b6108ed9190611e4e565b9392505050565b6001600160a01b038116600090815260056020908152604091829020600d0180548351818402810184019094528084526060939283018282801561096157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610943575b50505050509050919050565b6000336007546004805460405163079cc67960e41b81526001600160a01b0380861693820193909352602481019190915292935016906379cc679090604401600060405180830381600087803b1580156109c657600080fd5b505af11580156109da573d6000803e3d6000fd5b505050506000600154620151806109f19190611e2f565b6109fb9042611e70565b905060005b600a811015610a4b576001600160a01b0383166000908152600560205260409020829060010182600a8110610a3757610a37611e19565b015580610a4381611e88565b915050610a00565b506001600160a01b0382166000818152600560205260409020601801805460ff191660019081179091554291907ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f90610aa690600a90611e70565b60405190815260200160405180910390a35050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610aed3361055b565b610b325760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc81b9bdd08185d5d1a1bdc9a5e995960521b604482015260640161069c565b60208082015182516001600160a01b03166000908152600590925260408220600b01805491929091610b65908490611e70565b92505081905550806060015181604001516001600160a01b031682600001516001600160a01b03167f71e87ac6e13bd74c97691b2342cbc5cb5ca3bdf594c00dd1357f7cfbe6645a16846080015185602001518660a001518760c00151610bc94290565b604080519586526020860194909452928401919091526060830152608082015260a00160405180910390a450565b60008111610c375760405162461bcd60e51b815260206004820152600d60248201526c151bdbc81b1bddc81b195d995b609a1b604482015260640161069c565b600a811115610c785760405162461bcd60e51b815260206004820152600d60248201526c151bdbc8189a59c81b195d995b609a1b604482015260640161069c565b60003360075460035460405163079cc67960e41b81526001600160a01b038085166004830152602482019290925292935016906379cc679090604401600060405180830381600087803b158015610cce57600080fd5b505af1158015610ce2573d6000803e3d6000fd5b505050506000610cef4290565b6001600160a01b0383166000908152600560205260409020600190810190610d179086611e02565b600a8110610d2757610d27611e19565b015410610d6d576001600160a01b0382166000908152600560205260409020600190810190610d569085611e02565b600a8110610d6657610d66611e19565b0154610d6f565b425b905060015462015180610d829190611e2f565b610d8c9082611e70565b6001600160a01b0383166000908152600560205260409020600190810190610db49086611e02565b600a8110610dc457610dc4611e19565b01556001600160a01b03821660008181526005602052604090819020601801805460ff19166001179055518291907ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f90610e219087815260200190565b60405180910390a3505050565b6000610e39816111be565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e67816111be565b50600455565b60606108ed8383600161165c565b336000908152600560205260409020600c810154600b8201548391610e9f91611e02565b1015610ee35760405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d08185b5bdd5b9d606a1b604482015260640161069c565b8181600c016000828254610ef79190611e70565b90915550506008546009546040516370a0823160e01b81526001600160a01b039182166004820152849291909116906370a0823190602401602060405180830381865afa158015610f4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f709190611ea3565b1015610fbe5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820746f6b656e7320696e20706f6f6c00000000000000604482015260640161069c565b6008546009546001600160a01b03918216916323b872dd9116336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018590526064016020604051808303816000875af115801561102c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190611ebc565b60008281526020819052604090206001015461106b816111be565b61062b838361124c565b6000611080816111be565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60006110ae816111be565b600083116110bb57600080fd5b600a8311156110c957600080fd5b8160026110d7600186611e02565b815481106110e7576110e7611e19565b600091825260209091200155505050565b600060015b600a811161112f5761110f83826105b0565b1561111d5750600192915050565b8061112781611e88565b9150506110fd565b50600092915050565b6000611143816111be565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b61116f3361055b565b6111b45760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc81b9bdd08185d5d1a1bdc9a5e995960521b604482015260640161069c565b6106af82826112b1565b6106bd813361189b565b6111d28282610abb565b6106af576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556112083390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112568282610abb565b156106af576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0382166112fe5760405162461bcd60e51b815260206004820152601460248201527355736572206973207a65726f206164647265737360601b604482015260640161069c565b6001600160a01b0381166113545760405162461bcd60e51b815260206004820152601860248201527f5265666572726572206973207a65726f20616464726573730000000000000000604482015260640161069c565b816001600160a01b0316816001600160a01b031614156113b65760405162461bcd60e51b815260206004820152601860248201527f52656665727265722063616e206e6f7420626520757365720000000000000000604482015260640161069c565b6001600160a01b03828116600090815260056020526040902054161561141e5760405162461bcd60e51b815260206004820152601d60248201527f526566657272657220697320616c726561647920737065636966696564000000604482015260640161069c565b6114298160016105b0565b6114755760405162461bcd60e51b815260206004820152601c60248201527f526566657272657220686173206e6f20737562736372697074696f6e00000000604482015260640161069c565b6001600160a01b03828116600081815260056020908152604080832080549587166001600160a01b0319968716811782554260199092019190915583528220600d01805460018101825590835290822001805490931690911790915581905b600a8110156115ab57836001600160a01b0316826001600160a01b0316141561152f5760405162461bcd60e51b815260206004820152600d60248201526c4379636c696320636861696e2160981b604482015260640161069c565b6001600160a01b0382166000908152600560205260409020601881015460ff161561159257600181600e0183600a811061156b5761156b611e19565b01600082825461157b9190611e70565b909155505080546001600160a01b03169250611598565b506115ab565b50806115a381611e88565b9150506114d4565b50826001600160a01b0316826001600160a01b03167f3f6a300e641007b6c88b17485d36e2d83c20409a1c5e79bfa1f4eb69ea09469560405160405180910390a3505050565b6001600160a01b038216600090815260056020526040812081805b61161785600a611e02565b8110156116535782600e0181600a811061163357611633611e19565b015461163f9083611e70565b91508061164b81611e88565b91505061160c565b50949350505050565b6060828211156116a65760405162461bcd60e51b815260206004820152601560248201527410dd5c9c995b9d081b195d995b080f881b195d995b605a1b604482015260640161069c565b60006116b1856108f4565b6001600160a01b038616600090815260056020526040812091925090600e016116da8587611e02565b600a81106116ea576116ea611e19565b0154905060008167ffffffffffffffff81111561170957611709611c9f565b60405190808252806020026020018201604052801561175b57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816117275790505b5090506000805b845181101561188e57600085828151811061177f5761177f611e19565b60200260200101519050888814156117fb57604080516080810182526001600160a01b03831680825260208083018c90526000918252600590528290206019015491810191909152606081016117d4836110f8565b15158152508483815181106117eb576117eb611e19565b602002602001018190525061187b565b6000611812828b61180d8c6001611e70565b61165c565b905060005b81518110156118785781818151811061183257611832611e19565b602002602001015186868151811061184c5761184c611e19565b6020026020010181905250848061186290611e88565b955050808061187090611e88565b915050611817565b50505b508061188681611e88565b915050611762565b5090979650505050505050565b6118a58282610abb565b6106af576118bd816001600160a01b031660146118ff565b6118c88360206118ff565b6040516020016118d9929190611f0a565b60408051601f198184030181529082905262461bcd60e51b825261069c91600401611f7f565b6060600061190e836002611e2f565b611919906002611e70565b67ffffffffffffffff81111561193157611931611c9f565b6040519080825280601f01601f19166020018201604052801561195b576020820181803683370190505b509050600360fc1b8160008151811061197657611976611e19565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119a5576119a5611e19565b60200101906001600160f81b031916908160001a90535060006119c9846002611e2f565b6119d4906001611e70565b90505b6001811115611a4c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a0857611a08611e19565b1a60f81b828281518110611a1e57611a1e611e19565b60200101906001600160f81b031916908160001a90535060049490941c93611a4581611fb2565b90506119d7565b5083156108ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161069c565b604051806101400160405280600a906020820280368337509192915050565b600060208284031215611acc57600080fd5b81356001600160e01b0319811681146108ed57600080fd5b80356001600160a01b0381168114611afb57600080fd5b919050565b60008060408385031215611b1357600080fd5b611b1c83611ae4565b946020939093013593505050565b600060208284031215611b3c57600080fd5b5035919050565b60008060408385031215611b5657600080fd5b82359150611b6660208401611ae4565b90509250929050565b600060208284031215611b8157600080fd5b6108ed82611ae4565b8060005b600a811015611bad578151845260209384019390910190600101611b8e565b50505050565b600081518084526020808501945080840160005b83811015611bec5781516001600160a01b031687529582019590820190600101611bc7565b509495945050505050565b6001600160a01b038a1681526000610360611c15602084018c611b8a565b8961016084015288610180840152806101a0840152611c3681840189611bb3565b915050611c476101c0830187611b8a565b610300820194909452911515610320830152610340909101529695505050505050565b60008060408385031215611c7d57600080fd5b50508035926020909101359150565b6020815260006108ed6020830184611bb3565b634e487b7160e01b600052604160045260246000fd5b600060e08284031215611cc757600080fd5b60405160e0810181811067ffffffffffffffff82111715611cf857634e487b7160e01b600052604160045260246000fd5b604052611d0483611ae4565b815260208301356020820152611d1c60408401611ae4565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b602080825282518282018190526000919060409081850190868401855b82811015611db557815180516001600160a01b031685528681015187860152858101518686015260609081015115159085015260809093019290850190600101611d70565b5091979650505050505050565b60008060408385031215611dd557600080fd5b611dde83611ae4565b9150611b6660208401611ae4565b634e487b7160e01b600052601160045260246000fd5b600082821015611e1457611e14611dec565b500390565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611e4957611e49611dec565b500290565b600082611e6b57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611e8357611e83611dec565b500190565b6000600019821415611e9c57611e9c611dec565b5060010190565b600060208284031215611eb557600080fd5b5051919050565b600060208284031215611ece57600080fd5b815180151581146108ed57600080fd5b60005b83811015611ef9578181015183820152602001611ee1565b83811115611bad5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f42816017850160208801611ede565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f73816028840160208801611ede565b01602801949350505050565b6020815260008251806020840152611f9e816040850160208701611ede565b601f01601f19169190910160400192915050565b600081611fc157611fc1611dec565b50600019019056fea26469706673582212201c3e96e2813ca43c9f95cdfe7cb0ba5594a9a69123f86eab762a3e522a82207564736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 178,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)173_storage)"
      },
      {
        "astId": 7839,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "SUBSCRIPTION_PERIOD_DAYS",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7853,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "REFERRAL_PERCENTS",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7877,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "levelSubscriptionCost",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7879,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "fullSubscriptionCost",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7884,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(User)7875_storage)"
      },
      {
        "astId": 7888,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "authorizedContracts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7891,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "subscriptionToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ERC20Burnable)3161"
      },
      {
        "astId": 7894,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "rewardToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)3117"
      },
      {
        "astId": 7896,
        "contract": "contracts/ReferralManager.sol:ReferralManager",
        "label": "rewardPool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Burnable)3161": {
        "encoding": "inplace",
        "label": "contract ERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3117": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)7875_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReferralManager.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)7875_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)173_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)173_storage"
      },
      "t_struct(RoleData)173_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 170,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 172,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)7875_storage": {
        "encoding": "inplace",
        "label": "struct ReferralManager.User",
        "members": [
          {
            "astId": 7855,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "referrer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7859,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "activeLevels",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)10_storage"
          },
          {
            "astId": 7861,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "totalRefDividends",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 7863,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "totalRefDividendsClaimed",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 7866,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "referrals_1_lvl",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7870,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "refCount",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_uint256)10_storage"
          },
          {
            "astId": 7872,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "isActiveSubscriber",
            "offset": 0,
            "slot": "24",
            "type": "t_bool"
          },
          {
            "astId": 7874,
            "contract": "contracts/ReferralManager.sol:ReferralManager",
            "label": "activationDate",
            "offset": 0,
            "slot": "25",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "832"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}