{
  "address": "0x6E8A9D00ef5fB522DDD880195F36471B68BdA0c5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakingContract_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "squadMembers",
          "type": "uint256"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "SquadActivityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "squadCount",
          "type": "uint256"
        }
      ],
      "name": "SquadFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "squadSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        }
      ],
      "name": "SquadPlanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCRIPTION_PERIOD_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionCost_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "squadSize_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingPlanId_",
          "type": "uint256"
        }
      ],
      "name": "addPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlans",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subscriptionCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakingThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "squadSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakingPlanId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Squads.SquadPlan[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSufficientPlanIdByStakingAmount",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserSquadInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subscription",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "squadsFilled",
              "type": "uint256"
            }
          ],
          "internalType": "struct Squads.Squad",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "getUserSquadMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserSquadsInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subscription",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "squadsFilled",
              "type": "uint256"
            }
          ],
          "internalType": "struct Squads.Squad[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "plans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "squadSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralManager",
      "outputs": [
        {
          "internalType": "contract IReferralManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionToken",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tryToAddMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "updatePlanActivity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "updatePlanReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "updatePlanSquadSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        }
      ],
      "name": "updatePlanStakingId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "updatePlanStakingThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionCost",
          "type": "uint256"
        }
      ],
      "name": "updatePlanSubscriptionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingContract_",
          "type": "address"
        }
      ],
      "name": "updateStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numDays",
          "type": "uint256"
        }
      ],
      "name": "updateSubscriptionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        }
      ],
      "name": "updateSubscriptionReferralManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "updateSubscriptionToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "userHasPlanSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "userHasSufficientStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x357083afe5205885c6c11b96f1211821b4df23f11040ef8d0c7d39af6ff64dca",
  "receipt": {
    "to": null,
    "from": "0x9E679eC533e68a280a97ABd619d9C42228096F81",
    "contractAddress": "0x6E8A9D00ef5fB522DDD880195F36471B68BdA0c5",
    "transactionIndex": 0,
    "gasUsed": "1863857",
    "logsBloom": "0x
    "blockHash": "0xa2a65a4bab3029b27158867d796ec0ef2fad95c50cdca7c17a482fa3651f28e6",
    "transactionHash": "0x357083afe5205885c6c11b96f1211821b4df23f11040ef8d0c7d39af6ff64dca",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29246323,
        "transactionHash": "0x357083afe5205885c6c11b96f1211821b4df23f11040ef8d0c7d39af6ff64dca",
        "address": "0x6E8A9D00ef5fB522DDD880195F36471B68BdA0c5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa2a65a4bab3029b27158867d796ec0ef2fad95c50cdca7c17a482fa3651f28e6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29246323,
        "transactionHash": "0x357083afe5205885c6c11b96f1211821b4df23f11040ef8d0c7d39af6ff64dca",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004237ae3f151e7800000000000000000000000000000000000000000000000003c7a43e2ff8651000000000000000000000000000000000000000000000000036551d923957477200000000000000000000000000000000000000000000000003856c8ff0e3469800000000000000000000000000000000000000000000000036975540786c65ea",
        "logIndex": 1,
        "blockHash": "0xa2a65a4bab3029b27158867d796ec0ef2fad95c50cdca7c17a482fa3651f28e6"
      }
    ],
    "blockNumber": 29246323,
    "cumulativeGasUsed": "1863857",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb971Bbda8043267e8047372A29A5bfA8B78A2D04",
    "0x6Ab4b2db6D34ad1DC7F2e38bb975E7E7c7D44306",
    "0x65Ce665C07CE70A47da8A7d79D891dd3f522DE7C"
  ],
  "numDeployments": 6,
  "solcInputHash": "0a1fc4d2eff4d40b90b3e6e5225368fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"squadMembers\",\"type\":\"uint256\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SquadActivityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"squadCount\",\"type\":\"uint256\"}],\"name\":\"SquadFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"squadSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"}],\"name\":\"SquadPlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_PERIOD_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPlanId_\",\"type\":\"uint256\"}],\"name\":\"addPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct Squads.SquadPlan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSufficientPlanIdByStakingAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserSquadInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadsFilled\",\"type\":\"uint256\"}],\"internalType\":\"struct Squads.Squad\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"getUserSquadMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserSquadsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadsFilled\",\"type\":\"uint256\"}],\"internalType\":\"struct Squads.Squad[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralManager\",\"outputs\":[{\"internalType\":\"contract IReferralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionToken\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tryToAddMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updatePlanActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"updatePlanReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"updatePlanSquadSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"}],\"name\":\"updatePlanStakingId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"updatePlanStakingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"}],\"name\":\"updatePlanSubscriptionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"}],\"name\":\"updateStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"}],\"name\":\"updateSubscriptionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"}],\"name\":\"updateSubscriptionReferralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateSubscriptionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"userHasPlanSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"userHasSufficientStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Squads.sol\":\"Squads\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Squads.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/ISquads.sol\\\";\\nimport \\\"./interfaces/IReferralManager.sol\\\";\\n\\ncontract Squads is ISquads, AccessControl {\\n    uint256 public SUBSCRIPTION_PERIOD_DAYS = 365;\\n\\n    struct Squad {\\n        uint256 subscription; // when subscription expire\\n        uint256 squadsFilled; // how much squads user filled\\n    }\\n\\n    struct SquadPlan {\\n        uint256 subscriptionCost;\\n        uint256 reward; // reward for filling full squad\\n        uint256 stakingThreshold; // min staking amount that member should do\\n        uint256 squadSize; // amount of squad members\\n        uint256 stakingPlanId;\\n        bool isActive;\\n    }\\n\\n    SquadPlan[] public plans;\\n    mapping(uint256 => mapping(address => Squad)) private userSubscriptions;\\n    mapping(uint256 => mapping(address => address[])) private squadMembers;\\n\\n    ERC20Burnable public subscriptionToken;\\n    IReferralManager public referralManager;\\n    IStaking public stakingContract;\\n\\n    event Subscribed(\\n        address indexed subscriber,\\n        uint256 indexed planId,\\n        uint256 indexed timestamp\\n    );\\n    event SquadFilled(\\n        address indexed user,\\n        uint256 indexed planId,\\n        uint256 indexed squadCount\\n    );\\n    event MemberAdded(\\n        address indexed user,\\n        uint256 indexed planId,\\n        address member,\\n        uint256 squadMembers\\n    );\\n    event SquadPlanCreated(\\n        uint256 indexed planId,\\n        uint256 subscriptionCost,\\n        uint256 reward,\\n        uint256 stakingThreshold,\\n        uint256 squadSize,\\n        uint256 stakingPlanId\\n    );\\n    event SquadActivityChanged(uint256 indexed planId, bool isActive);\\n\\n    constructor(\\n        address subscriptionToken_,\\n        address referralManager_,\\n        address stakingContract_\\n    ) {\\n        require(subscriptionToken_ != address(0));\\n        require(referralManager_ != address(0));\\n        require(stakingContract_ != address(0));\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        subscriptionToken = ERC20Burnable(subscriptionToken_);\\n        referralManager = IReferralManager(referralManager_);\\n        stakingContract = IStaking(stakingContract_);\\n    }\\n\\n    function subscribe(uint256 planId) public {\\n        require(planId < plans.length, \\\"Incorrect plan id\\\");\\n\\n        address subscriber = _msgSender();\\n        SquadPlan storage plan = plans[planId];\\n\\n        require(plan.isActive, \\\"Plan is not active\\\");\\n\\n        subscriptionToken.burnFrom(subscriber, plan.subscriptionCost);\\n\\n        squadMembers[planId][subscriber] = new address[](0);\\n\\n        uint256 startDate = userSubscriptions[planId][subscriber].subscription <\\n            getTimestamp()\\n            ? getTimestamp()\\n            : userSubscriptions[planId][subscriber].subscription;\\n        userSubscriptions[planId][subscriber].subscription =\\n            startDate +\\n            SUBSCRIPTION_PERIOD_DAYS *\\n            1 days;\\n\\n        emit Subscribed(subscriber, planId, startDate);\\n    }\\n\\n    function tryToAddMember(\\n        uint256 stakingPlanId,\\n        address referrer,\\n        address member,\\n        uint256 amount\\n    ) public returns (bool) {\\n        require(referrer != address(0), \\\"Referrer is zero address\\\");\\n        require(member != address(0), \\\"Member is zero address\\\");\\n\\n        int256 _planId = getSufficientPlanIdByStakingAmount(amount);\\n\\n        require(_planId >= 0);\\n\\n        uint256 planId = uint256(_planId);\\n\\n        require(\\n            plans[planId].stakingPlanId == stakingPlanId,\\n            \\\"Staking plan do not match\\\"\\n        );\\n\\n        if (\\n            _isSenderAuthorized(_msgSender()) &&\\n            userHasPlanSubscription(referrer, planId) &&\\n            userHasSufficientStaking(referrer, planId) &&\\n            !_isMemberInSquad(referrer, planId, member)\\n        ) {\\n            squadMembers[planId][referrer].push(member);\\n            uint256 membersAmount = squadMembers[planId][referrer].length;\\n\\n            emit MemberAdded(referrer, planId, member, membersAmount);\\n\\n            if (membersAmount >= plans[planId].squadSize) {\\n                Squad storage partner = userSubscriptions[planId][referrer];\\n\\n                partner.squadsFilled += 1;\\n                partner.subscription = 0;\\n\\n                referralManager.addUserDividends(\\n                    referrer,\\n                    plans[planId].reward\\n                );\\n\\n                emit SquadFilled(referrer, planId, partner.squadsFilled);\\n            }\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    // --------- Helper functions ---------\\n    function getUserSquadInfo(uint256 planId, address user)\\n        public\\n        view\\n        returns (Squad memory)\\n    {\\n        return userSubscriptions[planId][user];\\n    }\\n\\n    function getUserSquadsInfo(address user)\\n        public\\n        view\\n        returns (Squad[] memory)\\n    {\\n        Squad[] memory squadsInfo = new Squad[](plans.length);\\n\\n        for (uint256 i = 0; i < plans.length; i++) {\\n            squadsInfo[i] = getUserSquadInfo(i, user);\\n        }\\n\\n        return squadsInfo;\\n    }\\n\\n    function getUserSquadMembers(address user, uint256 planId)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return squadMembers[planId][user];\\n    }\\n\\n    function getPlans() public view returns (SquadPlan[] memory) {\\n        return plans;\\n    }\\n\\n    function userHasSufficientStaking(address user, uint256 planId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        IStaking.Stake[] memory stakes = stakingContract.getUserStakes(\\n            plans[planId].stakingPlanId,\\n            user\\n        );\\n\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            // stake is: active + in SAV token + sufficient amount\\n            if (\\n                stakes[i].timeEnd > block.timestamp &&\\n                !stakes[i].isToken2 &&\\n                getSufficientPlanIdByStakingAmount(stakes[i].amount) ==\\n                int256(planId)\\n            ) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function userHasPlanSubscription(address user, uint256 planId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return userSubscriptions[planId][user].subscription > block.timestamp;\\n    }\\n\\n    function getSufficientPlanIdByStakingAmount(uint256 amount)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        int256 planId = -1;\\n        for (uint256 i = 0; i < plans.length; i++) {\\n            if (amount >= plans[i].stakingThreshold) planId = int256(i);\\n        }\\n\\n        return planId;\\n    }\\n\\n    function _isMemberInSquad(\\n        address user,\\n        uint256 planId,\\n        address member\\n    ) internal view returns (bool) {\\n        address[] memory squad = squadMembers[planId][user];\\n\\n        for (uint256 i = 0; i < squad.length; i++) {\\n            if (squad[i] == member) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function getTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function _isSenderAuthorized(address contractAddress)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return address(stakingContract) == contractAddress;\\n    }\\n\\n    // --------- Administrative functions ---------\\n    function addPlan(\\n        uint256 subscriptionCost_,\\n        uint256 reward_,\\n        uint256 stakingThreshold_,\\n        uint256 squadSize_,\\n        uint256 stakingPlanId_\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        SquadPlan memory plan = SquadPlan(\\n            subscriptionCost_,\\n            reward_,\\n            stakingThreshold_,\\n            squadSize_,\\n            stakingPlanId_,\\n            true\\n        );\\n\\n        plans.push(plan);\\n\\n        emit SquadPlanCreated(\\n            plans.length - 1,\\n            subscriptionCost_,\\n            reward_,\\n            stakingThreshold_,\\n            squadSize_,\\n            stakingPlanId_\\n        );\\n    }\\n\\n    function updatePlanSubscriptionCost(\\n        uint256 planId,\\n        uint256 subscriptionCost\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        plans[planId].subscriptionCost = subscriptionCost;\\n    }\\n\\n    function updatePlanReward(uint256 planId, uint256 reward)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        plans[planId].reward = reward;\\n    }\\n\\n    function updatePlanStakingThreshold(uint256 planId, uint256 threshold)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        plans[planId].stakingThreshold = threshold;\\n    }\\n\\n    function updatePlanSquadSize(uint256 planId, uint256 size)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        plans[planId].squadSize = size;\\n    }\\n\\n    function updatePlanStakingId(uint256 planId, uint256 stakingPlanId)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        plans[planId].stakingPlanId = stakingPlanId;\\n    }\\n\\n    function updatePlanActivity(uint256 planId, bool isActive)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        plans[planId].isActive = isActive;\\n        emit SquadActivityChanged(planId, isActive);\\n    }\\n\\n    function updateSubscriptionPeriod(uint256 numDays)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        SUBSCRIPTION_PERIOD_DAYS = numDays;\\n    }\\n\\n    function updateSubscriptionToken(address token)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        subscriptionToken = ERC20Burnable(token);\\n    }\\n\\n    function updateSubscriptionReferralManager(address referralManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        referralManager = IReferralManager(referralManager_);\\n    }\\n\\n    function updateStakingContract(address stakingContract_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingContract = IStaking(stakingContract_);\\n    }\\n}\\n\",\"keccak256\":\"0x16e53139f8a9f877427a7419a44a40a2d7abac104fcea0cf14d87f305b88788e\",\"license\":\"MIT\"},\"contracts/interfaces/IReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IReferralManager {\\n    struct Referral {\\n        address referralAddress;\\n        uint256 level;\\n        uint256 activationDate;\\n        bool isReferralSubscriptionActive;\\n    }\\n\\n    function getReferralLevels() external pure returns (uint256);\\n\\n    function addUserDividends(address user, uint256 reward) external;\\n\\n    function getUserReferrer(address user) external view returns (address);\\n\\n    function setUserReferrer(address user, address referrer) external;\\n\\n    function userHasSubscription(address user, uint256 level)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateRefReward(uint256 amount, uint256 level)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUserReferralsByLevel(address userAddress, uint256 level)\\n        external\\n        view\\n        returns (Referral[] memory);\\n}\\n\",\"keccak256\":\"0x535841d2272c666f1706e83bb472edadddf1dd1868be2444673dd9236e52fec3\",\"license\":\"MIT\"},\"contracts/interfaces/ISquads.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ISquads {\\n    function subscribe(uint256 planId) external;\\n\\n    function tryToAddMember(\\n        uint256 stakingPlanId,\\n        address user,\\n        address member,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function userHasPlanSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getSufficientPlanIdByStakingAmount(uint256 amount)\\n        external\\n        view\\n        returns (int256);\\n}\\n\",\"keccak256\":\"0x3e71cb34a0ebe3f4549b9cd6afcfdb60e452360adb9a29486fb7dd77f5dd5a82\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IStaking {\\n    struct StakingPlan {\\n        bool isActive;\\n        uint256 subscriptionCost;\\n        uint256 subscriptionDuration;\\n        uint256 stakingDuration;\\n        uint256 profitPercent;\\n        uint256 totalStakesToken1No;\\n        uint256 totalStakesToken2No;\\n        uint256 totalStakedToken1;\\n        uint256 totalStakedToken2;\\n        uint256 currentToken1Locked;\\n        uint256 currentToken2Locked;\\n        uint256 totalClaimed;\\n    }\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 timeStart;\\n        uint256 timeEnd;\\n        uint256 profitPercent;\\n        uint256 profit;\\n        bool isClaimed;\\n        bool isToken2;\\n    }\\n\\n    struct Staker {\\n        Stake[] stakes;\\n        uint256 subscription;\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n    }\\n\\n    struct UserStakingInfo {\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n        bool isSubscribed;\\n        uint256 subscribedTill;\\n    }\\n\\n    struct StakeWithRewardsInfo {\\n        Stake stake;\\n        uint256 reward;\\n    }\\n\\n    function deposit(\\n        uint256 planId,\\n        uint256 depositAmount,\\n        bool isToken2,\\n        address referrer\\n    ) external;\\n\\n    function withdraw(uint256 planId, uint256 stakeId) external;\\n\\n    function subscribe(uint256 planId) external;\\n\\n    // --------- Helper functions ---------\\n    function getUserPlanInfo(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (UserStakingInfo memory);\\n\\n    function getUserStakes(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (Stake[] memory stakes);\\n\\n    function getAvailableStakeReward(\\n        uint256 planId,\\n        address userAddress,\\n        uint256 stakeId\\n    ) external view returns (uint256);\\n\\n    function hasSubscription(uint256 planId, address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function hasAnySubscription(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xeedc77957bfd6fde55c0dfc474bddbf9a0d20a0ce9dc41538e1b9ee9884ea7ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405261016d6001553480156200001757600080fd5b506040516200206d3803806200206d8339810160408190526200003a9162000184565b6001600160a01b0383166200004e57600080fd5b6001600160a01b0382166200006257600080fd5b6001600160a01b0381166200007657600080fd5b62000083600033620000c6565b600580546001600160a01b039485166001600160a01b031991821617909155600680549385169382169390931790925560078054919093169116179055620001ce565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000163576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001223390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b03811681146200017f57600080fd5b919050565b6000806000606084860312156200019a57600080fd5b620001a58462000167565b9250620001b56020850162000167565b9150620001c56040850162000167565b90509250925092565b611e8f80620001de6000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063736560b51161011a578063afea5d55116100ad578063d6672e1c1161007c578063d6672e1c146104b9578063d94a862b146104cc578063d966edf0146104e1578063ee99205c146104f4578063fcc475121461050757600080fd5b8063afea5d551461043e578063b162061614610451578063ca7c101314610493578063d547741f146104a657600080fd5b8063a217fddf116100e9578063a217fddf146103fa578063a243d5ac14610402578063aaa138a214610415578063ad0839281461041e57600080fd5b8063736560b5146103ae57806388da0f13146103c157806391d14854146103d4578063992dc2da146103e757600080fd5b80632f2ff15d116101925780633fe90537116101615780633fe905371461033157806342ec14d714610344578063622f46a4146103575780636445c6791461037757600080fd5b80632f2ff15d146102e55780632fe00f57146102f85780633347e4d61461030b57806336568abe1461031e57600080fd5b80631c0e0612116101ce5780631c0e0612146102645780631e6f30cb14610277578063248a9ca3146102975780632ccd9623146102ba57600080fd5b806301ffc9a7146102005780630f574ba71461022857806316867cd81461023d578063188ec3561461025e575b600080fd5b61021361020e366004611880565b61051a565b60405190151581526020015b60405180910390f35b61023b6102363660046118aa565b610551565b005b61025061024b3660046118aa565b6107ac565b60405190815260200161021f565b42610250565b61023b6102723660046118d1565b610805565b61028a61028536600461191d565b61088d565b60405161021f9190611949565b6102506102a53660046118aa565b60009081526020819052604090206001015490565b6006546102cd906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b61023b6102f336600461191d565b6108d9565b61023b610306366004611960565b610903565b61023b610319366004611982565b61093c565b61023b61032c36600461191d565b61096a565b61023b61033f366004611960565b6109e8565b61023b610352366004611982565b610a1d565b61036a610365366004611982565b610a4b565b60405161021f919061199d565b6102136103853660046119f4565b60009081526003602090815260408083206001600160a01b039490941683529290522054421090565b61023b6103bc3660046118aa565b610afb565b61023b6103cf366004611a1e565b610b0c565b6102136103e236600461191d565b610cb4565b6102136103f53660046119f4565b610cdd565b610250600081565b61023b610410366004611982565b610e45565b61025060015481565b61043161042c3660046119f4565b610e73565b60405161021f9190611a59565b61021361044c366004611aa6565b610ef1565b61046461045f3660046118aa565b61127e565b6040805196875260208701959095529385019290925260608401526080830152151560a082015260c00161021f565b61023b6104a1366004611960565b6112c7565b61023b6104b436600461191d565b611300565b6005546102cd906001600160a01b031681565b6104d4611325565b60405161021f9190611aea565b61023b6104ef366004611960565b6113bf565b6007546102cd906001600160a01b031681565b61023b610515366004611960565b6113f8565b60006001600160e01b03198216637965db0b60e01b148061054b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600254811061059b5760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c1b185b881a59607a1b60448201526064015b60405180910390fd5b60003390506000600283815481106105b5576105b5611b57565b60009182526020909120600690910201600581015490915060ff166106115760405162461bcd60e51b8152602060048201526012602482015271506c616e206973206e6f742061637469766560701b6044820152606401610592565b600554815460405163079cc67960e41b81526001600160a01b03858116600483015260248201929092529116906379cc679090604401600060405180830381600087803b15801561066157600080fd5b505af1158015610675573d6000803e3d6000fd5b5060009250610682915050565b6040519080825280602002602001820160405280156106ab578160200160208202803683370190505b5060008481526004602090815260408083206001600160a01b0387168452825290912082516106e09391929190910190611806565b5060004260008581526003602090815260408083206001600160a01b0388168452909152902054106107345760008481526003602090815260408083206001600160a01b0387168452909152902054610736565b425b9050600154620151806107499190611b99565b6107539082611bb8565b60008581526003602090815260408083206001600160a01b03881680855292528083209390935591518392879290917ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f9190a450505050565b6000600019815b6002548110156107fe57600281815481106107d0576107d0611b57565b90600052602060002090600602016002015484106107ec578091505b806107f681611bd0565b9150506107b3565b5092915050565b600061081081611431565b816002848154811061082457610824611b57565b906000526020600020906006020160050160006101000a81548160ff021916908315150217905550827f6da7bc8b01ce6d2ed854278dbb7c80b2cae78c297ec593d38c15b3d4445985a883604051610880911515815260200190565b60405180910390a2505050565b60408051808201825260008082526020918201819052938452600381528184206001600160a01b0393909316845291825291829020825180840190935280548352600101549082015290565b6000828152602081905260409020600101546108f481611431565b6108fe838361143e565b505050565b600061090e81611431565b816002848154811061092257610922611b57565b906000526020600020906006020160010181905550505050565b600061094781611431565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811633146109da5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610592565b6109e482826114c2565b5050565b60006109f381611431565b8160028481548110610a0757610a07611b57565b6000918252602090912060069091020155505050565b6000610a2881611431565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60025460609060009067ffffffffffffffff811115610a6c57610a6c611b6d565b604051908082528060200260200182016040528015610ab157816020015b6040805180820190915260008082526020820152815260200190600190039081610a8a5790505b50905060005b6002548110156107fe57610acb818561088d565b828281518110610add57610add611b57565b60200260200101819052508080610af390611bd0565b915050610ab7565b6000610b0681611431565b50600155565b6000610b1781611431565b6040805160c081018252878152602081018781529181018681526060820186815260808301868152600160a08501818152600280548084018255600082905287517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace60069092029182015597517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf89015594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad088015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad187015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad286015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad3909401805460ff191694151594909417909355549091610c5c91611beb565b604080518981526020810189905290810187905260608101869052608081018590527f3beeb65995b90bd0914666101e05dd847e837c47b2f0d4da8882c34ea27c91309060a00160405180910390a250505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6007546002805460009283926001600160a01b03909116916314ce783d919086908110610d0c57610d0c611b57565b906000526020600020906006020160040154866040518363ffffffff1660e01b8152600401610d4e9291909182526001600160a01b0316602082015260400190565b600060405180830381865afa158015610d6b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d939190810190611c5c565b905060005b8151811015610e3a5742828281518110610db457610db4611b57565b602002602001015160400151118015610de85750818181518110610dda57610dda611b57565b602002602001015160c00151155b8015610e18575083610e16838381518110610e0557610e05611b57565b6020026020010151600001516107ac565b145b15610e285760019250505061054b565b80610e3281611bd0565b915050610d98565b506000949350505050565b6000610e5081611431565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526004602090815260408083206001600160a01b0386168452825291829020805483518184028101840190945280845260609392830182828015610ee457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ec6575b5050505050905092915050565b60006001600160a01b038416610f495760405162461bcd60e51b815260206004820152601860248201527f5265666572726572206973207a65726f206164647265737300000000000000006044820152606401610592565b6001600160a01b038316610f985760405162461bcd60e51b81526020600482015260166024820152754d656d626572206973207a65726f206164647265737360501b6044820152606401610592565b6000610fa3836107ac565b90506000811215610fb357600080fd5b60008190508660028281548110610fcc57610fcc611b57565b9060005260206000209060060201600401541461102b5760405162461bcd60e51b815260206004820152601960248201527f5374616b696e6720706c616e20646f206e6f74206d61746368000000000000006044820152606401610592565b6007546001600160a01b031633148015611066575060008181526003602090815260408083206001600160a01b038a16845290915290205442105b801561107757506110778682610cdd565b801561108b5750611089868287611527565b155b1561126f5760008181526004602090815260408083206001600160a01b038a811680865291845282852080546001810182558187528587200180546001600160a01b031916928c169283179055948290529354825194855292840183905291928492917f4727d8bf558b6f2fd2d2f66e2062e0c408a4b470870a0385e940358a87ad3626910160405180910390a36002828154811061112c5761112c611b57565b90600052602060002090600602016003015481106112635760008281526003602090815260408083206001600160a01b038b1684529091528120600180820180549293919290919061117f908490611bb8565b909155505060008155600654600280546001600160a01b0390921691633fb55c61918b91879081106111b3576111b3611b57565b60009182526020909120600160069092020101546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561120d57600080fd5b505af1158015611221573d6000803e3d6000fd5b50505050806001015483896001600160a01b03167fc22bc73345a19ca25692353736ee8587e0e2d12c75a1ed016950ed4b20fac30160405160405180910390a4505b60019350505050611276565b6000925050505b949350505050565b6002818154811061128e57600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549395509193909260ff1686565b60006112d281611431565b81600284815481106112e6576112e6611b57565b906000526020600020906006020160040181905550505050565b60008281526020819052604090206001015461131b81611431565b6108fe83836114c2565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156113b65760008481526020908190206040805160c08101825260068602909201805483526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460ff16151560a08301529083529092019101611349565b50505050905090565b60006113ca81611431565b81600284815481106113de576113de611b57565b906000526020600020906006020160020181905550505050565b600061140381611431565b816002848154811061141757611417611b57565b906000526020600020906006020160030181905550505050565b61143b8133611606565b50565b6114488282610cb4565b6109e4576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561147e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114cc8282610cb4565b156109e4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008281526004602090815260408083206001600160a01b038716845282528083208054825181850281018501909352808352849383018282801561159557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611577575b5050505050905060005b81518110156115f857836001600160a01b03168282815181106115c4576115c4611b57565b60200260200101516001600160a01b031614156115e6576001925050506115ff565b806115f081611bd0565b91505061159f565b5060009150505b9392505050565b6116108282610cb4565b6109e457611628816001600160a01b0316601461166a565b61163383602061166a565b604051602001611644929190611d9a565b60408051601f198184030181529082905262461bcd60e51b825261059291600401611e0f565b60606000611679836002611b99565b611684906002611bb8565b67ffffffffffffffff81111561169c5761169c611b6d565b6040519080825280601f01601f1916602001820160405280156116c6576020820181803683370190505b509050600360fc1b816000815181106116e1576116e1611b57565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061171057611710611b57565b60200101906001600160f81b031916908160001a9053506000611734846002611b99565b61173f906001611bb8565b90505b60018111156117b7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061177357611773611b57565b1a60f81b82828151811061178957611789611b57565b60200101906001600160f81b031916908160001a90535060049490941c936117b081611e42565b9050611742565b5083156115ff5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610592565b82805482825590600052602060002090810192821561185b579160200282015b8281111561185b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611826565b5061186792915061186b565b5090565b5b80821115611867576000815560010161186c565b60006020828403121561189257600080fd5b81356001600160e01b0319811681146115ff57600080fd5b6000602082840312156118bc57600080fd5b5035919050565b801515811461143b57600080fd5b600080604083850312156118e457600080fd5b8235915060208301356118f6816118c3565b809150509250929050565b80356001600160a01b038116811461191857600080fd5b919050565b6000806040838503121561193057600080fd5b8235915061194060208401611901565b90509250929050565b81518152602080830151908201526040810161054b565b6000806040838503121561197357600080fd5b50508035926020909101359150565b60006020828403121561199457600080fd5b6115ff82611901565b602080825282518282018190526000919060409081850190868401855b828110156119e7576119d784835180518252602090810151910152565b92840192908501906001016119ba565b5091979650505050505050565b60008060408385031215611a0757600080fd5b611a1083611901565b946020939093013593505050565b600080600080600060a08688031215611a3657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6020808252825182820181905260009190848201906040850190845b81811015611a9a5783516001600160a01b031683529284019291840191600101611a75565b50909695505050505050565b60008060008060808587031215611abc57600080fd5b84359350611acc60208601611901565b9250611ada60408601611901565b9396929550929360600135925050565b602080825282518282018190526000919060409081850190868401855b828110156119e75781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a09081015115159085015260c09093019290850190600101611b07565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611bb357611bb3611b83565b500290565b60008219821115611bcb57611bcb611b83565b500190565b6000600019821415611be457611be4611b83565b5060010190565b600082821015611bfd57611bfd611b83565b500390565b60405160e0810167ffffffffffffffff81118282101715611c2557611c25611b6d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c5457611c54611b6d565b604052919050565b60006020808385031215611c6f57600080fd5b825167ffffffffffffffff80821115611c8757600080fd5b818501915085601f830112611c9b57600080fd5b815181811115611cad57611cad611b6d565b611cbb848260051b01611c2b565b818152848101925060e0918202840185019188831115611cda57600080fd5b938501935b82851015611d5e5780858a031215611cf75760008081fd5b611cff611c02565b85518152868601518782015260408087015190820152606080870151908201526080808701519082015260a080870151611d38816118c3565b9082015260c086810151611d4b816118c3565b9082015284529384019392850192611cdf565b50979650505050505050565b60005b83811015611d85578181015183820152602001611d6d565b83811115611d94576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611dd2816017850160208801611d6a565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611e03816028840160208801611d6a565b01602801949350505050565b6020815260008251806020840152611e2e816040850160208701611d6a565b601f01601f19169190910160400192915050565b600081611e5157611e51611b83565b50600019019056fea26469706673582212201a297fb5e3703688c268ff4243f490463b724ff66b7d12f404b63649248dc12f64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063736560b51161011a578063afea5d55116100ad578063d6672e1c1161007c578063d6672e1c146104b9578063d94a862b146104cc578063d966edf0146104e1578063ee99205c146104f4578063fcc475121461050757600080fd5b8063afea5d551461043e578063b162061614610451578063ca7c101314610493578063d547741f146104a657600080fd5b8063a217fddf116100e9578063a217fddf146103fa578063a243d5ac14610402578063aaa138a214610415578063ad0839281461041e57600080fd5b8063736560b5146103ae57806388da0f13146103c157806391d14854146103d4578063992dc2da146103e757600080fd5b80632f2ff15d116101925780633fe90537116101615780633fe905371461033157806342ec14d714610344578063622f46a4146103575780636445c6791461037757600080fd5b80632f2ff15d146102e55780632fe00f57146102f85780633347e4d61461030b57806336568abe1461031e57600080fd5b80631c0e0612116101ce5780631c0e0612146102645780631e6f30cb14610277578063248a9ca3146102975780632ccd9623146102ba57600080fd5b806301ffc9a7146102005780630f574ba71461022857806316867cd81461023d578063188ec3561461025e575b600080fd5b61021361020e366004611880565b61051a565b60405190151581526020015b60405180910390f35b61023b6102363660046118aa565b610551565b005b61025061024b3660046118aa565b6107ac565b60405190815260200161021f565b42610250565b61023b6102723660046118d1565b610805565b61028a61028536600461191d565b61088d565b60405161021f9190611949565b6102506102a53660046118aa565b60009081526020819052604090206001015490565b6006546102cd906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b61023b6102f336600461191d565b6108d9565b61023b610306366004611960565b610903565b61023b610319366004611982565b61093c565b61023b61032c36600461191d565b61096a565b61023b61033f366004611960565b6109e8565b61023b610352366004611982565b610a1d565b61036a610365366004611982565b610a4b565b60405161021f919061199d565b6102136103853660046119f4565b60009081526003602090815260408083206001600160a01b039490941683529290522054421090565b61023b6103bc3660046118aa565b610afb565b61023b6103cf366004611a1e565b610b0c565b6102136103e236600461191d565b610cb4565b6102136103f53660046119f4565b610cdd565b610250600081565b61023b610410366004611982565b610e45565b61025060015481565b61043161042c3660046119f4565b610e73565b60405161021f9190611a59565b61021361044c366004611aa6565b610ef1565b61046461045f3660046118aa565b61127e565b6040805196875260208701959095529385019290925260608401526080830152151560a082015260c00161021f565b61023b6104a1366004611960565b6112c7565b61023b6104b436600461191d565b611300565b6005546102cd906001600160a01b031681565b6104d4611325565b60405161021f9190611aea565b61023b6104ef366004611960565b6113bf565b6007546102cd906001600160a01b031681565b61023b610515366004611960565b6113f8565b60006001600160e01b03198216637965db0b60e01b148061054b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600254811061059b5760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c1b185b881a59607a1b60448201526064015b60405180910390fd5b60003390506000600283815481106105b5576105b5611b57565b60009182526020909120600690910201600581015490915060ff166106115760405162461bcd60e51b8152602060048201526012602482015271506c616e206973206e6f742061637469766560701b6044820152606401610592565b600554815460405163079cc67960e41b81526001600160a01b03858116600483015260248201929092529116906379cc679090604401600060405180830381600087803b15801561066157600080fd5b505af1158015610675573d6000803e3d6000fd5b5060009250610682915050565b6040519080825280602002602001820160405280156106ab578160200160208202803683370190505b5060008481526004602090815260408083206001600160a01b0387168452825290912082516106e09391929190910190611806565b5060004260008581526003602090815260408083206001600160a01b0388168452909152902054106107345760008481526003602090815260408083206001600160a01b0387168452909152902054610736565b425b9050600154620151806107499190611b99565b6107539082611bb8565b60008581526003602090815260408083206001600160a01b03881680855292528083209390935591518392879290917ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f9190a450505050565b6000600019815b6002548110156107fe57600281815481106107d0576107d0611b57565b90600052602060002090600602016002015484106107ec578091505b806107f681611bd0565b9150506107b3565b5092915050565b600061081081611431565b816002848154811061082457610824611b57565b906000526020600020906006020160050160006101000a81548160ff021916908315150217905550827f6da7bc8b01ce6d2ed854278dbb7c80b2cae78c297ec593d38c15b3d4445985a883604051610880911515815260200190565b60405180910390a2505050565b60408051808201825260008082526020918201819052938452600381528184206001600160a01b0393909316845291825291829020825180840190935280548352600101549082015290565b6000828152602081905260409020600101546108f481611431565b6108fe838361143e565b505050565b600061090e81611431565b816002848154811061092257610922611b57565b906000526020600020906006020160010181905550505050565b600061094781611431565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811633146109da5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610592565b6109e482826114c2565b5050565b60006109f381611431565b8160028481548110610a0757610a07611b57565b6000918252602090912060069091020155505050565b6000610a2881611431565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60025460609060009067ffffffffffffffff811115610a6c57610a6c611b6d565b604051908082528060200260200182016040528015610ab157816020015b6040805180820190915260008082526020820152815260200190600190039081610a8a5790505b50905060005b6002548110156107fe57610acb818561088d565b828281518110610add57610add611b57565b60200260200101819052508080610af390611bd0565b915050610ab7565b6000610b0681611431565b50600155565b6000610b1781611431565b6040805160c081018252878152602081018781529181018681526060820186815260808301868152600160a08501818152600280548084018255600082905287517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace60069092029182015597517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf89015594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad088015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad187015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad286015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad3909401805460ff191694151594909417909355549091610c5c91611beb565b604080518981526020810189905290810187905260608101869052608081018590527f3beeb65995b90bd0914666101e05dd847e837c47b2f0d4da8882c34ea27c91309060a00160405180910390a250505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6007546002805460009283926001600160a01b03909116916314ce783d919086908110610d0c57610d0c611b57565b906000526020600020906006020160040154866040518363ffffffff1660e01b8152600401610d4e9291909182526001600160a01b0316602082015260400190565b600060405180830381865afa158015610d6b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d939190810190611c5c565b905060005b8151811015610e3a5742828281518110610db457610db4611b57565b602002602001015160400151118015610de85750818181518110610dda57610dda611b57565b602002602001015160c00151155b8015610e18575083610e16838381518110610e0557610e05611b57565b6020026020010151600001516107ac565b145b15610e285760019250505061054b565b80610e3281611bd0565b915050610d98565b506000949350505050565b6000610e5081611431565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526004602090815260408083206001600160a01b0386168452825291829020805483518184028101840190945280845260609392830182828015610ee457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ec6575b5050505050905092915050565b60006001600160a01b038416610f495760405162461bcd60e51b815260206004820152601860248201527f5265666572726572206973207a65726f206164647265737300000000000000006044820152606401610592565b6001600160a01b038316610f985760405162461bcd60e51b81526020600482015260166024820152754d656d626572206973207a65726f206164647265737360501b6044820152606401610592565b6000610fa3836107ac565b90506000811215610fb357600080fd5b60008190508660028281548110610fcc57610fcc611b57565b9060005260206000209060060201600401541461102b5760405162461bcd60e51b815260206004820152601960248201527f5374616b696e6720706c616e20646f206e6f74206d61746368000000000000006044820152606401610592565b6007546001600160a01b031633148015611066575060008181526003602090815260408083206001600160a01b038a16845290915290205442105b801561107757506110778682610cdd565b801561108b5750611089868287611527565b155b1561126f5760008181526004602090815260408083206001600160a01b038a811680865291845282852080546001810182558187528587200180546001600160a01b031916928c169283179055948290529354825194855292840183905291928492917f4727d8bf558b6f2fd2d2f66e2062e0c408a4b470870a0385e940358a87ad3626910160405180910390a36002828154811061112c5761112c611b57565b90600052602060002090600602016003015481106112635760008281526003602090815260408083206001600160a01b038b1684529091528120600180820180549293919290919061117f908490611bb8565b909155505060008155600654600280546001600160a01b0390921691633fb55c61918b91879081106111b3576111b3611b57565b60009182526020909120600160069092020101546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561120d57600080fd5b505af1158015611221573d6000803e3d6000fd5b50505050806001015483896001600160a01b03167fc22bc73345a19ca25692353736ee8587e0e2d12c75a1ed016950ed4b20fac30160405160405180910390a4505b60019350505050611276565b6000925050505b949350505050565b6002818154811061128e57600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549395509193909260ff1686565b60006112d281611431565b81600284815481106112e6576112e6611b57565b906000526020600020906006020160040181905550505050565b60008281526020819052604090206001015461131b81611431565b6108fe83836114c2565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156113b65760008481526020908190206040805160c08101825260068602909201805483526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460ff16151560a08301529083529092019101611349565b50505050905090565b60006113ca81611431565b81600284815481106113de576113de611b57565b906000526020600020906006020160020181905550505050565b600061140381611431565b816002848154811061141757611417611b57565b906000526020600020906006020160030181905550505050565b61143b8133611606565b50565b6114488282610cb4565b6109e4576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561147e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114cc8282610cb4565b156109e4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008281526004602090815260408083206001600160a01b038716845282528083208054825181850281018501909352808352849383018282801561159557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611577575b5050505050905060005b81518110156115f857836001600160a01b03168282815181106115c4576115c4611b57565b60200260200101516001600160a01b031614156115e6576001925050506115ff565b806115f081611bd0565b91505061159f565b5060009150505b9392505050565b6116108282610cb4565b6109e457611628816001600160a01b0316601461166a565b61163383602061166a565b604051602001611644929190611d9a565b60408051601f198184030181529082905262461bcd60e51b825261059291600401611e0f565b60606000611679836002611b99565b611684906002611bb8565b67ffffffffffffffff81111561169c5761169c611b6d565b6040519080825280601f01601f1916602001820160405280156116c6576020820181803683370190505b509050600360fc1b816000815181106116e1576116e1611b57565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061171057611710611b57565b60200101906001600160f81b031916908160001a9053506000611734846002611b99565b61173f906001611bb8565b90505b60018111156117b7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061177357611773611b57565b1a60f81b82828151811061178957611789611b57565b60200101906001600160f81b031916908160001a90535060049490941c936117b081611e42565b9050611742565b5083156115ff5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610592565b82805482825590600052602060002090810192821561185b579160200282015b8281111561185b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611826565b5061186792915061186b565b5090565b5b80821115611867576000815560010161186c565b60006020828403121561189257600080fd5b81356001600160e01b0319811681146115ff57600080fd5b6000602082840312156118bc57600080fd5b5035919050565b801515811461143b57600080fd5b600080604083850312156118e457600080fd5b8235915060208301356118f6816118c3565b809150509250929050565b80356001600160a01b038116811461191857600080fd5b919050565b6000806040838503121561193057600080fd5b8235915061194060208401611901565b90509250929050565b81518152602080830151908201526040810161054b565b6000806040838503121561197357600080fd5b50508035926020909101359150565b60006020828403121561199457600080fd5b6115ff82611901565b602080825282518282018190526000919060409081850190868401855b828110156119e7576119d784835180518252602090810151910152565b92840192908501906001016119ba565b5091979650505050505050565b60008060408385031215611a0757600080fd5b611a1083611901565b946020939093013593505050565b600080600080600060a08688031215611a3657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6020808252825182820181905260009190848201906040850190845b81811015611a9a5783516001600160a01b031683529284019291840191600101611a75565b50909695505050505050565b60008060008060808587031215611abc57600080fd5b84359350611acc60208601611901565b9250611ada60408601611901565b9396929550929360600135925050565b602080825282518282018190526000919060409081850190868401855b828110156119e75781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a09081015115159085015260c09093019290850190600101611b07565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611bb357611bb3611b83565b500290565b60008219821115611bcb57611bcb611b83565b500190565b6000600019821415611be457611be4611b83565b5060010190565b600082821015611bfd57611bfd611b83565b500390565b60405160e0810167ffffffffffffffff81118282101715611c2557611c25611b6d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611c5457611c54611b6d565b604052919050565b60006020808385031215611c6f57600080fd5b825167ffffffffffffffff80821115611c8757600080fd5b818501915085601f830112611c9b57600080fd5b815181811115611cad57611cad611b6d565b611cbb848260051b01611c2b565b818152848101925060e0918202840185019188831115611cda57600080fd5b938501935b82851015611d5e5780858a031215611cf75760008081fd5b611cff611c02565b85518152868601518782015260408087015190820152606080870151908201526080808701519082015260a080870151611d38816118c3565b9082015260c086810151611d4b816118c3565b9082015284529384019392850192611cdf565b50979650505050505050565b60005b83811015611d85578181015183820152602001611d6d565b83811115611d94576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611dd2816017850160208801611d6a565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611e03816028840160208801611d6a565b01602801949350505050565b6020815260008251806020840152611e2e816040850160208701611d6a565b601f01601f19169190910160400192915050565b600081611e5157611e51611b83565b50600019019056fea26469706673582212201a297fb5e3703688c268ff4243f490463b724ff66b7d12f404b63649248dc12f64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 178,
        "contract": "contracts/Squads.sol:Squads",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)173_storage)"
      },
      {
        "astId": 8485,
        "contract": "contracts/Squads.sol:Squads",
        "label": "SUBSCRIPTION_PERIOD_DAYS",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8507,
        "contract": "contracts/Squads.sol:Squads",
        "label": "plans",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(SquadPlan)8503_storage)dyn_storage"
      },
      {
        "astId": 8514,
        "contract": "contracts/Squads.sol:Squads",
        "label": "userSubscriptions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Squad)8490_storage))"
      },
      {
        "astId": 8521,
        "contract": "contracts/Squads.sol:Squads",
        "label": "squadMembers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 8524,
        "contract": "contracts/Squads.sol:Squads",
        "label": "subscriptionToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ERC20Burnable)3142"
      },
      {
        "astId": 8527,
        "contract": "contracts/Squads.sol:Squads",
        "label": "referralManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IReferralManager)12292"
      },
      {
        "astId": 8530,
        "contract": "contracts/Squads.sol:Squads",
        "label": "stakingContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IStaking)12473"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SquadPlan)8503_storage)dyn_storage": {
        "base": "t_struct(SquadPlan)8503_storage",
        "encoding": "dynamic_array",
        "label": "struct Squads.SquadPlan[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Burnable)3142": {
        "encoding": "inplace",
        "label": "contract ERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralManager)12292": {
        "encoding": "inplace",
        "label": "contract IReferralManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)12473": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Squad)8490_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Squads.Squad)",
        "numberOfBytes": "32",
        "value": "t_struct(Squad)8490_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)173_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)173_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Squad)8490_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Squads.Squad))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Squad)8490_storage)"
      },
      "t_struct(RoleData)173_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 170,
            "contract": "contracts/Squads.sol:Squads",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 172,
            "contract": "contracts/Squads.sol:Squads",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Squad)8490_storage": {
        "encoding": "inplace",
        "label": "struct Squads.Squad",
        "members": [
          {
            "astId": 8487,
            "contract": "contracts/Squads.sol:Squads",
            "label": "subscription",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8489,
            "contract": "contracts/Squads.sol:Squads",
            "label": "squadsFilled",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SquadPlan)8503_storage": {
        "encoding": "inplace",
        "label": "struct Squads.SquadPlan",
        "members": [
          {
            "astId": 8492,
            "contract": "contracts/Squads.sol:Squads",
            "label": "subscriptionCost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8494,
            "contract": "contracts/Squads.sol:Squads",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8496,
            "contract": "contracts/Squads.sol:Squads",
            "label": "stakingThreshold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8498,
            "contract": "contracts/Squads.sol:Squads",
            "label": "squadSize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8500,
            "contract": "contracts/Squads.sol:Squads",
            "label": "stakingPlanId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8502,
            "contract": "contracts/Squads.sol:Squads",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}