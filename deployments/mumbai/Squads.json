{
  "address": "0x907977351B6f513Ccc366a428E2465DFd973bB63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "squadMembers",
          "type": "uint256"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "squadCount",
          "type": "uint256"
        }
      ],
      "name": "SquadFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSCRIPTION_PERIOD_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionCost_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "squadSize_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "authorizedStaking_",
          "type": "address"
        }
      ],
      "name": "addPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlans",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subscriptionCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakingThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "squadSize",
              "type": "uint256"
            },
            {
              "internalType": "contract IStaking",
              "name": "authorizedStaking",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct Squads.Plan[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSufficientPlanIdByStakingAmount",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "getUserSquadInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subscription",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "squadsFilled",
              "type": "uint256"
            }
          ],
          "internalType": "struct Squads.Squad",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "getUserSquadMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserSquadsInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subscription",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "squadsFilled",
              "type": "uint256"
            }
          ],
          "internalType": "struct Squads.Squad[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "plans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "squadSize",
          "type": "uint256"
        },
        {
          "internalType": "contract IStaking",
          "name": "authorizedStaking",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralManager",
      "outputs": [
        {
          "internalType": "contract IReferralManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionToken",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tryToAddMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "updatePlanActivity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "updatePlanAuthorizedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "updatePlanReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "updatePlanSquadSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "updatePlanStakingThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionCost",
          "type": "uint256"
        }
      ],
      "name": "updatePlanSubscriptionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numDays",
          "type": "uint256"
        }
      ],
      "name": "updateSubscriptionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        }
      ],
      "name": "updateSubscriptionReferralManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "updateSubscriptionToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "userHasPlanSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "userHasSufficientStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0509a221716fa7ecff8518b35ff92b43dcfccd294040389eeef729b5fdde04af",
  "receipt": {
    "to": null,
    "from": "0x9E679eC533e68a280a97ABd619d9C42228096F81",
    "contractAddress": "0x907977351B6f513Ccc366a428E2465DFd973bB63",
    "transactionIndex": 0,
    "gasUsed": "1735253",
    "logsBloom": "0x00000004000000020000000000000000000000000000000000000000000000000000000000000000000000000000010000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000001000020000000000000000001000000000000001000000000004000100000000000000005000000000000000000000000000100100000000020000000000000400000000000000000000200000000000000000000000000100000",
    "blockHash": "0x7bf0dbf9483f812931aa1817199e3e534432c7c43a64130738b2eb56bf78e19e",
    "transactionHash": "0x0509a221716fa7ecff8518b35ff92b43dcfccd294040389eeef729b5fdde04af",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28445048,
        "transactionHash": "0x0509a221716fa7ecff8518b35ff92b43dcfccd294040389eeef729b5fdde04af",
        "address": "0x907977351B6f513Ccc366a428E2465DFd973bB63",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7bf0dbf9483f812931aa1817199e3e534432c7c43a64130738b2eb56bf78e19e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 28445048,
        "transactionHash": "0x0509a221716fa7ecff8518b35ff92b43dcfccd294040389eeef729b5fdde04af",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009e679ec533e68a280a97abd619d9c42228096f81",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003da608b889255c00000000000000000000000000000000000000000000000007e41816fd503c3500000000000000000000000000000000000000000000160128e719d2b302b1a500000000000000000000000000000000000000000000000007a6720e44c716d90000000000000000000000000000000000000000000016012924bfdb6b8bd701",
        "logIndex": 1,
        "blockHash": "0x7bf0dbf9483f812931aa1817199e3e534432c7c43a64130738b2eb56bf78e19e"
      }
    ],
    "blockNumber": 28445048,
    "cumulativeGasUsed": "1735253",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb971Bbda8043267e8047372A29A5bfA8B78A2D04",
    "0x4C5d840E7742119278AdaBb63cdFca5099D7DAea"
  ],
  "numDeployments": 2,
  "solcInputHash": "03aed533e319a0a39f891012129b9a07",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"squadMembers\",\"type\":\"uint256\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"squadCount\",\"type\":\"uint256\"}],\"name\":\"SquadFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSCRIPTION_PERIOD_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadSize_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"authorizedStaking_\",\"type\":\"address\"}],\"name\":\"addPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadSize\",\"type\":\"uint256\"},{\"internalType\":\"contract IStaking\",\"name\":\"authorizedStaking\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct Squads.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSufficientPlanIdByStakingAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"getUserSquadInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadsFilled\",\"type\":\"uint256\"}],\"internalType\":\"struct Squads.Squad\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"getUserSquadMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserSquadsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadsFilled\",\"type\":\"uint256\"}],\"internalType\":\"struct Squads.Squad[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadSize\",\"type\":\"uint256\"},{\"internalType\":\"contract IStaking\",\"name\":\"authorizedStaking\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralManager\",\"outputs\":[{\"internalType\":\"contract IReferralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionToken\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tryToAddMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updatePlanActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"updatePlanAuthorizedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"updatePlanReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"updatePlanSquadSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"updatePlanStakingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"}],\"name\":\"updatePlanSubscriptionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"}],\"name\":\"updateSubscriptionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"}],\"name\":\"updateSubscriptionReferralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateSubscriptionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"userHasPlanSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"userHasSufficientStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Squads.sol\":\"Squads\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Squads.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/ISquads.sol\\\";\\nimport \\\"./interfaces/IReferralManager.sol\\\";\\n\\ncontract Squads is ISquads, AccessControl {\\n    uint256 public SUBSCRIPTION_PERIOD_DAYS = 365;\\n\\n    struct Squad {\\n        uint256 subscription; // when subscription expire\\n        uint256 squadsFilled; // how much squads user filled\\n    }\\n\\n    struct Plan {\\n        uint256 subscriptionCost;\\n        uint256 reward; // reward for filling full squad\\n        uint256 stakingThreshold; // min staking amount that member should do\\n        uint256 squadSize; // amount of squad members\\n        IStaking authorizedStaking;\\n        bool isActive;\\n    }\\n\\n    Plan[] public plans;\\n    mapping(address => mapping(uint256 => Squad)) private userSubscriptions;\\n    mapping(address => mapping(uint256 => address[])) private squadMembers;\\n\\n    ERC20Burnable public subscriptionToken;\\n    IReferralManager public referralManager;\\n\\n    event Subscribed(\\n        address indexed subscriber,\\n        uint256 indexed planId,\\n        uint256 indexed timestamp\\n    );\\n    event SquadFilled(\\n        address indexed user,\\n        uint256 indexed planId,\\n        uint256 indexed squadCount\\n    );\\n    event MemberAdded(\\n        address indexed user,\\n        uint256 indexed planId,\\n        address member,\\n        uint256 squadMembers\\n    );\\n\\n    constructor(address subscriptionToken_, address referralManager_) {\\n        require(subscriptionToken_ != address(0));\\n        require(referralManager_ != address(0));\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        subscriptionToken = ERC20Burnable(subscriptionToken_);\\n        referralManager = IReferralManager(referralManager_);\\n    }\\n\\n    function subscribe(uint256 planId) public {\\n        require(planId < plans.length, \\\"Incorrect plan id\\\");\\n\\n        address subscriber = _msgSender();\\n        Plan storage plan = plans[planId];\\n\\n        require(plan.isActive, \\\"Plan is not active\\\");\\n\\n        subscriptionToken.burnFrom(subscriber, plan.subscriptionCost);\\n\\n        uint256 squadIndex = userSubscriptions[subscriber][planId].squadsFilled;\\n        squadMembers[subscriber][squadIndex] = new address[](0);\\n        userSubscriptions[subscriber][planId]\\n            .subscription = _getSubscriptionEnd();\\n\\n        emit Subscribed(subscriber, planId, block.timestamp);\\n    }\\n\\n    function tryToAddMember(\\n        address user,\\n        address member,\\n        uint256 amount\\n    ) public returns (bool) {\\n        int256 _planId = getSufficientPlanIdByStakingAmount(amount);\\n        if (_planId < 0) return false;\\n\\n        uint256 planId = uint256(_planId);\\n\\n        if (\\n            _isSenderAuthorized(planId, _msgSender()) &&\\n            userHasPlanSubscription(user, planId) &&\\n            userHasSufficientStaking(user, planId) &&\\n            !_isMemberInSquad(user, planId, member)\\n        ) {\\n            Squad storage partner = userSubscriptions[user][planId];\\n\\n            squadMembers[user][partner.squadsFilled].push(member);\\n            uint256 membersAmount = squadMembers[user][partner.squadsFilled]\\n                .length;\\n\\n            emit MemberAdded(user, planId, member, membersAmount);\\n\\n            if (membersAmount >= plans[planId].squadSize) {\\n                partner.squadsFilled += 1;\\n                partner.subscription = 0;\\n\\n                referralManager.addUserDividends(user, plans[planId].reward);\\n\\n                emit SquadFilled(user, planId, partner.squadsFilled);\\n            }\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    // --------- Helper functions ---------\\n    function getUserSquadInfo(address user, uint256 planId)\\n        public\\n        view\\n        returns (Squad memory)\\n    {\\n        return userSubscriptions[user][planId];\\n    }\\n\\n    function getUserSquadsInfo(address user)\\n        public\\n        view\\n        returns (Squad[] memory)\\n    {\\n        Squad[] memory squadsInfo = new Squad[](plans.length);\\n\\n        for (uint256 i = 0; i < plans.length; i++) {\\n            squadsInfo[i] = getUserSquadInfo(user, i);\\n        }\\n\\n        return squadsInfo;\\n    }\\n\\n    function getUserSquadMembers(address user, uint256 planId)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return squadMembers[user][planId];\\n    }\\n\\n    function getPlans() public view returns (Plan[] memory) {\\n        return plans;\\n    }\\n\\n    function userHasSufficientStaking(address user, uint256 planId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        IStaking.Stake[] memory stakes = plans[planId]\\n            .authorizedStaking\\n            .getUserStakes(user);\\n\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            // stake is: active + in SAV token + sufficient amount\\n            if (\\n                stakes[i].timeEnd > block.timestamp &&\\n                !stakes[i].isToken2 &&\\n                stakes[i].amount >= plans[planId].stakingThreshold\\n            ) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function userHasPlanSubscription(address user, uint256 planId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return userSubscriptions[user][planId].subscription > block.timestamp;\\n    }\\n\\n    function getSufficientPlanIdByStakingAmount(uint256 amount)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        int256 planId = -1;\\n        for (uint256 i = 0; i < plans.length; i++) {\\n            if (amount >= plans[i].stakingThreshold) planId = int256(i);\\n        }\\n        return planId;\\n    }\\n\\n    function _isMemberInSquad(\\n        address user,\\n        uint256 planId,\\n        address member\\n    ) internal view returns (bool) {\\n        uint256 squadIndex = userSubscriptions[user][planId].squadsFilled;\\n        address[] memory squad = squadMembers[user][squadIndex];\\n\\n        for (uint256 i = 0; i < squad.length; i++) {\\n            if (squad[i] == member) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function _getSubscriptionEnd() internal view returns (uint256) {\\n        return block.timestamp + SUBSCRIPTION_PERIOD_DAYS * 1 days;\\n    }\\n\\n    function _isSenderAuthorized(uint256 planId, address contractAddress)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return address(plans[planId].authorizedStaking) == contractAddress;\\n    }\\n\\n    // --------- Administrative functions ---------\\n    function addPlan(\\n        uint256 subscriptionCost_,\\n        uint256 reward_,\\n        uint256 stakingThreshold_,\\n        uint256 squadSize_,\\n        address authorizedStaking_\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Plan memory plan = Plan(\\n            subscriptionCost_,\\n            reward_,\\n            stakingThreshold_,\\n            squadSize_,\\n            IStaking(authorizedStaking_),\\n            true\\n        );\\n\\n        plans.push(plan);\\n    }\\n\\n    function updatePlanSubscriptionCost(\\n        uint256 planId,\\n        uint256 subscriptionCost\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        plans[planId].subscriptionCost = subscriptionCost;\\n    }\\n\\n    function updatePlanReward(uint256 planId, uint256 reward)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        plans[planId].reward = reward;\\n    }\\n\\n    function updatePlanStakingThreshold(uint256 planId, uint256 threshold)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        plans[planId].stakingThreshold = threshold;\\n    }\\n\\n    function updatePlanSquadSize(uint256 planId, uint256 size)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        plans[planId].squadSize = size;\\n    }\\n\\n    function updatePlanAuthorizedContract(\\n        uint256 planId,\\n        address contractAddress\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        plans[planId].authorizedStaking = IStaking(contractAddress);\\n    }\\n\\n    function updatePlanActivity(uint256 planId, bool isActive)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        plans[planId].isActive = isActive;\\n    }\\n\\n    function updateSubscriptionPeriod(uint256 numDays)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        SUBSCRIPTION_PERIOD_DAYS = numDays;\\n    }\\n\\n    function updateSubscriptionToken(address token)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        subscriptionToken = ERC20Burnable(token);\\n    }\\n\\n    function updateSubscriptionReferralManager(address referralManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        referralManager = IReferralManager(referralManager_);\\n    }\\n}\\n\",\"keccak256\":\"0x2da1a826104ea18ee024036658121a7a290044261f5b2053bc0fd47635f42cfd\",\"license\":\"MIT\"},\"contracts/interfaces/IReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IReferralManager {\\n    function getReferralLevels() external pure returns (uint256);\\n\\n    function addUserDividends(address user, uint256 reward) external;\\n\\n    function getUserReferrer(address user) external view returns (address);\\n\\n    function setUserReferrer(address user, address referrer) external;\\n\\n    function userHasSubscription(address user, uint256 level)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateRefReward(uint256 amount, uint256 level)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x223e1b6d368a6f8c9c86c385e32f505567625f364d786e482b02cfa113f56b73\",\"license\":\"MIT\"},\"contracts/interfaces/ISquads.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ISquads {\\n    function subscribe(uint256 planId) external;\\n\\n    function tryToAddMember(\\n        address user,\\n        address member,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function userHasPlanSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getSufficientPlanIdByStakingAmount(uint256 amount)\\n        external\\n        view\\n        returns (int256);\\n}\\n\",\"keccak256\":\"0xa2ba4ffc0e0d96eaa4fc90ce6a71f48eba6dd53c485f65db461164fe793519d4\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IStaking {\\n    struct Stake {\\n        uint256 stakeId;\\n        uint256 amount;\\n        uint256 timeStart;\\n        uint256 timeEnd;\\n        uint256 percent;\\n        uint256 profit;\\n        bool isClaimed;\\n        bool isToken2;\\n    }\\n\\n    struct User {\\n        Stake[] stakes;\\n        uint256 totalStakedToken1;\\n        uint256 totalStakedToken2;\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n    }\\n\\n    function deposit(\\n        uint256 depositAmount_,\\n        bool isToken2_,\\n        address referrer\\n    ) external;\\n\\n    function withdraw(uint256 stakeId_) external;\\n\\n    function subscribe() external;\\n\\n    // --------- Helper functions ---------\\n    function getContractInfo()\\n        external\\n        view\\n        returns (\\n            uint256 _durationDays,\\n            uint256 _reward,\\n            bool _isActive,\\n            uint256 _totalStakesToken1No,\\n            uint256 _totalStakesToken2No,\\n            uint256 _totalStakedToken1,\\n            uint256 _totalStakedToken2,\\n            uint256 _totalClaimed,\\n            uint256 _subscriptionCost,\\n            uint256 _subscriptionPeriodDays\\n        );\\n\\n    function getUserInfo(address userAddr_)\\n        external\\n        view\\n        returns (\\n            uint256 _totalStakedToken1,\\n            uint256 _totalStakedToken2,\\n            uint256 _totalClaimed,\\n            uint256 _currentToken1Staked,\\n            bool _subscribed,\\n            uint256 _subscribedTill\\n        );\\n\\n    function getUserStakes(address userAddr_)\\n        external\\n        view\\n        returns (Stake[] memory stakes);\\n\\n    function getTimestamp() external view returns (uint256);\\n\\n    function calculateStakeProfit(uint256 amount_)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateStakeReward(address userAddr_, uint256 stakeId_)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function min(uint256 a, uint256 b) external pure returns (uint256);\\n\\n    // --------- Administrative functions ---------\\n    function setActive(bool value_) external;\\n\\n    function updateShouldAddReferrerOnToken2Stake(bool value) external;\\n\\n    function updateRewardPool(address poolAddress_) external;\\n\\n    function updateToken1(address token1_) external;\\n\\n    function updateToken2(address token2_) external;\\n\\n    function updateReferralManager(address referralManager_) external;\\n\\n    function updatePercentDivider(uint256 divider_) external;\\n\\n    function updateTimeStep(uint256 step_) external;\\n\\n    function updateMinStakeLimit(uint256 minLimit_) external;\\n\\n    function updateDurationDays(uint256 duration_) external;\\n\\n    function updateReward(uint256 newReward_) external;\\n\\n    function updateSubscriptionCost(uint256 cost_) external;\\n\\n    function updateSubscriptionPeriod(uint256 periodDays_) external;\\n\\n    function updateSubscriptionToken(address token_) external;\\n}\\n\",\"keccak256\":\"0x6aa74aeeb1197883dda30be454aef6e58c92eca22267f6a85bc228604fb0618a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063871cd81f11610104578063b1620616116100a2578063d94a862b11610071578063d94a862b14610489578063d966edf01461049e578063f3cc3bf0146104b1578063fcc47512146104c457600080fd5b8063b162061614610405578063bd01403614610450578063d547741f14610463578063d6672e1c1461047657600080fd5b8063a217fddf116100de578063a217fddf146103c1578063a243d5ac146103c9578063aaa138a2146103dc578063ad083928146103e557600080fd5b8063871cd81f1461037b57806391d148541461039b578063992dc2da146103ae57600080fd5b80632fe00f571161017c578063622f46a41161014b578063622f46a4146102fd5780636445c6791461031d578063736560b51461035557806386bc28721461036857600080fd5b80632fe00f57146102b157806336568abe146102c45780633fe90537146102d757806342ec14d7146102ea57600080fd5b80631c0e0612116101b85780631c0e06121461023d578063248a9ca3146102505780632ccd9623146102735780632f2ff15d1461029e57600080fd5b806301ffc9a7146101df5780630f574ba71461020757806316867cd81461021c575b600080fd5b6101f26101ed366004611687565b6104d7565b60405190151581526020015b60405180910390f35b61021a6102153660046116b1565b61050e565b005b61022f61022a3660046116b1565b6106f0565b6040519081526020016101fe565b61021a61024b3660046116d8565b610749565b61022f61025e3660046116b1565b60009081526020819052604090206001015490565b600654610286906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b61021a6102ac366004611724565b610795565b61021a6102bf366004611750565b6107bf565b61021a6102d2366004611724565b6107f8565b61021a6102e5366004611750565b610876565b61021a6102f8366004611772565b6108ab565b61031061030b366004611772565b6108d9565b6040516101fe919061178d565b6101f261032b3660046117e4565b6001600160a01b039190911660009081526003602090815260408083209383529290522054421090565b61021a6103633660046116b1565b610989565b6101f261037636600461180e565b61099a565b61038e6103893660046117e4565b610c00565b6040516101fe919061184a565b6101f26103a9366004611724565b610c4c565b6101f26103bc3660046117e4565b610c75565b61022f600081565b61021a6103d7366004611772565b610ddf565b61022f60015481565b6103f86103f33660046117e4565b610e0d565b6040516101fe9190611861565b6104186104133660046116b1565b610e8c565b6040805196875260208701959095529385019290925260608401526001600160a01b03166080830152151560a082015260c0016101fe565b61021a61045e3660046118ae565b610ee2565b61021a610471366004611724565b611022565b600554610286906001600160a01b031681565b610491611047565b6040516101fe91906118f7565b61021a6104ac366004611750565b6110ed565b61021a6104bf366004611724565b611126565b61021a6104d2366004611750565b61117f565b60006001600160e01b03198216637965db0b60e01b148061050857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60025481106105585760405162461bcd60e51b8152602060048201526011602482015270125b98dbdc9c9958dd081c1b185b881a59607a1b60448201526064015b60405180910390fd5b60003390506000600283815481106105725761057261196d565b906000526020600020906005020190508060040160149054906101000a900460ff166105d55760405162461bcd60e51b8152602060048201526012602482015271506c616e206973206e6f742061637469766560701b604482015260640161054f565b600554815460405163079cc67960e41b81526001600160a01b03858116600483015260248201929092529116906379cc679090604401600060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b505050506001600160a01b038216600081815260036020908152604080832087845282528083206001015481518481528084018084529585526004845282852082865290935292209051919261068e9261160d565b506106976111b8565b6001600160a01b038416600081815260036020908152604080832089845290915280822093909355915142928792917ff94991dcbea6e8ac439cbc93bd9c62a4d39f04e0ad656df9a703f13552c2787f9190a450505050565b6000600019815b60025481101561074257600281815481106107145761071461196d565b9060005260206000209060050201600201548410610730578091505b8061073a816119af565b9150506106f7565b5092915050565b6000610754816111da565b81600284815481106107685761076861196d565b906000526020600020906005020160040160146101000a81548160ff021916908315150217905550505050565b6000828152602081905260409020600101546107b0816111da565b6107ba83836111e7565b505050565b60006107ca816111da565b81600284815481106107de576107de61196d565b906000526020600020906005020160010181905550505050565b6001600160a01b03811633146108685760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161054f565b610872828261126b565b5050565b6000610881816111da565b81600284815481106108955761089561196d565b6000918252602090912060059091020155505050565b60006108b6816111da565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60025460609060009067ffffffffffffffff8111156108fa576108fa611983565b60405190808252806020026020018201604052801561093f57816020015b60408051808201909152600080825260208201528152602001906001900390816109185790505b50905060005b600254811015610742576109598482610c00565b82828151811061096b5761096b61196d565b60200260200101819052508080610981906119af565b915050610945565b6000610994816111da565b50600155565b6000806109a6836106f0565b905060008112156109bb576000915050610bf9565b806109c681336112d0565b80156109f457506001600160a01b038616600090815260036020908152604080832084845290915290205442105b8015610a055750610a058682610c75565b8015610a195750610a17868287611314565b155b15610bf2576001600160a01b0386811660008181526003602090815260408083208684528252808320848452600483528184206001808301805487529185528386208054918201815586528486200180546001600160a01b031916978d1697881790555484529281902054815195865291850182905291939092859290917f4727d8bf558b6f2fd2d2f66e2062e0c408a4b470870a0385e940358a87ad3626910160405180910390a360028381548110610ad557610ad561196d565b9060005260206000209060050201600301548110610be5576001826001016000828254610b0291906119ca565b909155505060008255600654600280546001600160a01b0390921691633fb55c61918b9187908110610b3657610b3661196d565b60009182526020909120600160059092020101546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610b9057600080fd5b505af1158015610ba4573d6000803e3d6000fd5b50505050816001015483896001600160a01b03167fc22bc73345a19ca25692353736ee8587e0e2d12c75a1ed016950ed4b20fac30160405160405180910390a45b6001945050505050610bf9565b6000925050505b9392505050565b604080518082018252600080825260209182018190526001600160a01b039490941684526003815281842092845291825291829020825180840190935280548352600101549082015290565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008060028381548110610c8b57610c8b61196d565b60009182526020909120600460059092020181015460405163842e298160e01b81526001600160a01b038781169382019390935291169063842e298190602401600060405180830381865afa158015610ce8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d109190810190611a48565b905060005b8151811015610dd45742828281518110610d3157610d3161196d565b602002602001015160600151118015610d655750818181518110610d5757610d5761196d565b602002602001015160e00151155b8015610db2575060028481548110610d7f57610d7f61196d565b906000526020600020906005020160020154828281518110610da357610da361196d565b60200260200101516020015110155b15610dc257600192505050610508565b80610dcc816119af565b915050610d15565b506000949350505050565b6000610dea816111da565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600460209081526040808320848452825291829020805483518184028101840190945280845260609392830182828015610e7f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e61575b5050505050905092915050565b60028181548110610e9c57600080fd5b600091825260209091206005909102018054600182015460028301546003840154600490940154929450909290916001600160a01b03811690600160a01b900460ff1686565b6000610eed816111da565b506040805160c081018252958652602086019485528501928352606085019182526001600160a01b0390811660808601908152600160a0870181815260028054928301815560005296517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace60059092029182015594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf86015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad085015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad184015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290920180549351929091166001600160a81b031990931692909217600160a01b91151591909102179055565b60008281526020819052604090206001015461103d816111da565b6107ba838361126b565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156110e45760008481526020908190206040805160c08101825260058602909201805483526001808201548486015260028201549284019290925260038101546060840152600401546001600160a01b0381166080840152600160a01b900460ff16151560a0830152908352909201910161106b565b50505050905090565b60006110f8816111da565b816002848154811061110c5761110c61196d565b906000526020600020906005020160020181905550505050565b6000611131816111da565b81600284815481106111455761114561196d565b906000526020600020906005020160040160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b600061118a816111da565b816002848154811061119e5761119e61196d565b906000526020600020906005020160030181905550505050565b6000600154620151806111cb9190611b64565b6111d590426119ca565b905090565b6111e4813361140d565b50565b6111f18282610c4c565b610872576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556112273390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112758282610c4c565b15610872576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000816001600160a01b0316600284815481106112ef576112ef61196d565b60009182526020909120600590910201600401546001600160a01b0316149392505050565b6001600160a01b03831660008181526003602090815260408083208684528252808320600101549383526004825280832084845282528083208054825181850281018501909352808352939493859383018282801561139c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161137e575b5050505050905060005b815181101561140057846001600160a01b03168282815181106113cb576113cb61196d565b60200260200101516001600160a01b031614156113ee5760019350505050610bf9565b806113f8816119af565b9150506113a6565b5060009695505050505050565b6114178282610c4c565b6108725761142f816001600160a01b03166014611471565b61143a836020611471565b60405160200161144b929190611bb3565b60408051601f198184030181529082905262461bcd60e51b825261054f91600401611c28565b60606000611480836002611b64565b61148b9060026119ca565b67ffffffffffffffff8111156114a3576114a3611983565b6040519080825280601f01601f1916602001820160405280156114cd576020820181803683370190505b509050600360fc1b816000815181106114e8576114e861196d565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106115175761151761196d565b60200101906001600160f81b031916908160001a905350600061153b846002611b64565b6115469060016119ca565b90505b60018111156115be576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061157a5761157a61196d565b1a60f81b8282815181106115905761159061196d565b60200101906001600160f81b031916908160001a90535060049490941c936115b781611c5b565b9050611549565b508315610bf95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161054f565b828054828255906000526020600020908101928215611662579160200282015b8281111561166257825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061162d565b5061166e929150611672565b5090565b5b8082111561166e5760008155600101611673565b60006020828403121561169957600080fd5b81356001600160e01b031981168114610bf957600080fd5b6000602082840312156116c357600080fd5b5035919050565b80151581146111e457600080fd5b600080604083850312156116eb57600080fd5b8235915060208301356116fd816116ca565b809150509250929050565b80356001600160a01b038116811461171f57600080fd5b919050565b6000806040838503121561173757600080fd5b8235915061174760208401611708565b90509250929050565b6000806040838503121561176357600080fd5b50508035926020909101359150565b60006020828403121561178457600080fd5b610bf982611708565b602080825282518282018190526000919060409081850190868401855b828110156117d7576117c784835180518252602090810151910152565b92840192908501906001016117aa565b5091979650505050505050565b600080604083850312156117f757600080fd5b61180083611708565b946020939093013593505050565b60008060006060848603121561182357600080fd5b61182c84611708565b925061183a60208501611708565b9150604084013590509250925092565b815181526020808301519082015260408101610508565b6020808252825182820181905260009190848201906040850190845b818110156118a25783516001600160a01b03168352928401929184019160010161187d565b50909695505050505050565b600080600080600060a086880312156118c657600080fd5b853594506020860135935060408601359250606086013591506118eb60808701611708565b90509295509295909350565b602080825282518282018190526000919060409081850190868401855b828110156117d75781518051855286810151878601528581015186860152606080820151908601526080808201516001600160a01b03169086015260a09081015115159085015260c09093019290850190600101611914565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156119c3576119c3611999565b5060010190565b600082198211156119dd576119dd611999565b500190565b604051610100810167ffffffffffffffff81118282101715611a0657611a06611983565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a3557611a35611983565b604052919050565b805161171f816116ca565b60006020808385031215611a5b57600080fd5b825167ffffffffffffffff80821115611a7357600080fd5b818501915085601f830112611a8757600080fd5b815181811115611a9957611a99611983565b611aa7848260051b01611a0c565b818152848101925060089190911b830184019087821115611ac757600080fd5b928401925b81841015611b59576101008489031215611ae65760008081fd5b611aee6119e2565b84518152858501518682015260408086015190820152606080860151908201526080808601519082015260a0808601519082015260c080860151611b31816116ca565b9082015260e0611b42868201611a3d565b908201528352610100939093019291840191611acc565b979650505050505050565b6000816000190483118215151615611b7e57611b7e611999565b500290565b60005b83811015611b9e578181015183820152602001611b86565b83811115611bad576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611beb816017850160208801611b83565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611c1c816028840160208801611b83565b01602801949350505050565b6020815260008251806020840152611c47816040850160208701611b83565b601f01601f19169190910160400192915050565b600081611c6a57611c6a611999565b50600019019056fea2646970667358221220228b2c37249f000b147f29cd7f18d87dc982094f8166f3b015ef42ee4c3c20cd64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Squads.sol:Squads",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4489,
        "contract": "contracts/Squads.sol:Squads",
        "label": "SUBSCRIPTION_PERIOD_DAYS",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4512,
        "contract": "contracts/Squads.sol:Squads",
        "label": "plans",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Plan)4508_storage)dyn_storage"
      },
      {
        "astId": 4519,
        "contract": "contracts/Squads.sol:Squads",
        "label": "userSubscriptions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Squad)4494_storage))"
      },
      {
        "astId": 4526,
        "contract": "contracts/Squads.sol:Squads",
        "label": "squadMembers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 4529,
        "contract": "contracts/Squads.sol:Squads",
        "label": "subscriptionToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ERC20Burnable)1248"
      },
      {
        "astId": 4532,
        "contract": "contracts/Squads.sol:Squads",
        "label": "referralManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IReferralManager)8065"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Plan)4508_storage)dyn_storage": {
        "base": "t_struct(Plan)4508_storage",
        "encoding": "dynamic_array",
        "label": "struct Squads.Plan[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Burnable)1248": {
        "encoding": "inplace",
        "label": "contract ERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralManager)8065": {
        "encoding": "inplace",
        "label": "contract IReferralManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)8299": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Squad)4494_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Squads.Squad))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Squad)4494_storage)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Squad)4494_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Squads.Squad)",
        "numberOfBytes": "32",
        "value": "t_struct(Squad)4494_storage"
      },
      "t_struct(Plan)4508_storage": {
        "encoding": "inplace",
        "label": "struct Squads.Plan",
        "members": [
          {
            "astId": 4496,
            "contract": "contracts/Squads.sol:Squads",
            "label": "subscriptionCost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4498,
            "contract": "contracts/Squads.sol:Squads",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4500,
            "contract": "contracts/Squads.sol:Squads",
            "label": "stakingThreshold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4502,
            "contract": "contracts/Squads.sol:Squads",
            "label": "squadSize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4505,
            "contract": "contracts/Squads.sol:Squads",
            "label": "authorizedStaking",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IStaking)8299"
          },
          {
            "astId": 4507,
            "contract": "contracts/Squads.sol:Squads",
            "label": "isActive",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Squads.sol:Squads",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Squads.sol:Squads",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Squad)4494_storage": {
        "encoding": "inplace",
        "label": "struct Squads.Squad",
        "members": [
          {
            "astId": 4491,
            "contract": "contracts/Squads.sol:Squads",
            "label": "subscription",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4493,
            "contract": "contracts/Squads.sol:Squads",
            "label": "squadsFilled",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}