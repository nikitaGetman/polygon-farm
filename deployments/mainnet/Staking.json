{
  "address": "0xFa4A95b7807686a72a3e0d7e7Db2532800274571",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "squadsManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "ActivityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isToken2",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isToken2",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "name": "StakingPlanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_POINTS_DIVIDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_STAKE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIME_STEP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "name": "addStakingPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateStakeProfit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isToken2",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableStakeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingPlans",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakingPlanId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "subscriptionCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subscriptionDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakingDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "apr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesToken1No",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakesToken2No",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakedToken1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakedToken2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken1Locked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken2Locked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStaking.StakingPlan[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPlanInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken1Staked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken2Staked",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSubscribed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "subscribedTill",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStaking.UserStakingInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPlansInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken1Staked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentToken2Staked",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSubscribed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "subscribedTill",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStaking.UserStakingInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "apr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profit",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isToken2",
              "type": "bool"
            }
          ],
          "internalType": "struct IStaking.Stake[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserStakesWithRewards",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timeStart",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timeEnd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "apr",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "profit",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isClaimed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isToken2",
                  "type": "bool"
                }
              ],
              "internalType": "struct IStaking.Stake",
              "name": "stake",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStaking.StakeWithRewardsInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasAnySubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralManager",
      "outputs": [
        {
          "internalType": "contract IReferralManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldAddReferrerOnToken2Stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "squadsManager",
      "outputs": [
        {
          "internalType": "contract ISquads",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingPlans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakingPlanId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakesToken1No",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakesToken2No",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedToken1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedToken2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentToken1Locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentToken2Locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token2",
      "outputs": [
        {
          "internalType": "contract ERC20Burnable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLimit_",
          "type": "uint256"
        }
      ],
      "name": "updateMinStakeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "name": "updatePlanAPR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "updatePlanActivity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "updatePlanDurationDays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "updatePlanSubscriptionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionDuration",
          "type": "uint256"
        }
      ],
      "name": "updatePlanSubscriptionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referralManager_",
          "type": "address"
        }
      ],
      "name": "updateReferralManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress_",
          "type": "address"
        }
      ],
      "name": "updateRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "updateShouldAddReferrerOnToken2Stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "squadsManager_",
          "type": "address"
        }
      ],
      "name": "updateSquadsManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "step_",
          "type": "uint256"
        }
      ],
      "name": "updateTimeStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        }
      ],
      "name": "updateToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2_",
          "type": "address"
        }
      ],
      "name": "updateToken2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "planId",
          "type": "uint256"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdcc42a99015516fb13052b51deb067e8e3fbe64d609ad3ac2f2247b6ef04b2a8",
  "receipt": {
    "to": null,
    "from": "0x94d2EebAEF670Ce6A358d037d901571DD849e786",
    "contractAddress": "0xFa4A95b7807686a72a3e0d7e7Db2532800274571",
    "transactionIndex": 77,
    "gasUsed": "2902928",
    "logsBloom": "0x
    "blockHash": "0x72816ad4b90373fd44af15bf2dd19c9312632d96ce33ceddc6597088010654c8",
    "transactionHash": "0xdcc42a99015516fb13052b51deb067e8e3fbe64d609ad3ac2f2247b6ef04b2a8",
    "logs": [
      {
        "transactionIndex": 77,
        "blockNumber": 37860188,
        "transactionHash": "0xdcc42a99015516fb13052b51deb067e8e3fbe64d609ad3ac2f2247b6ef04b2a8",
        "address": "0xFa4A95b7807686a72a3e0d7e7Db2532800274571",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000094d2eebaef670ce6a358d037d901571dd849e786",
          "0x00000000000000000000000094d2eebaef670ce6a358d037d901571dd849e786"
        ],
        "data": "0x",
        "logIndex": 358,
        "blockHash": "0x72816ad4b90373fd44af15bf2dd19c9312632d96ce33ceddc6597088010654c8"
      },
      {
        "transactionIndex": 77,
        "blockNumber": 37860188,
        "transactionHash": "0xdcc42a99015516fb13052b51deb067e8e3fbe64d609ad3ac2f2247b6ef04b2a8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000094d2eebaef670ce6a358d037d901571dd849e786",
          "0x00000000000000000000000046a3a41bd932244dd08186e4c19f1a7e48cbcdf4"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000138002a8c212530000000000000000000000000000000000000000000000000392b964e07233dcf0000000000000000000000000000000000000000000005097f8b0752192b6b2d00000000000000000000000000000000000000000000000037f396237b02189f00000000000000000000000000000000000000000000050980c3077ca54c905d",
        "logIndex": 359,
        "blockHash": "0x72816ad4b90373fd44af15bf2dd19c9312632d96ce33ceddc6597088010654c8"
      }
    ],
    "blockNumber": 37860188,
    "cumulativeGasUsed": "15902448",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0a499a2cbF6f214F1137018b2Df330a7E9C134fD",
    "0x90a871F3C246DE3d1e7420dB852cdEa645e247A9",
    "0x9373e8D5C1BdB9A786155E4cDBEE4A9d63eaB922",
    "0xA7a84E4BCbb900a80E8e28Ec73801F71101A9FFC",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "8f35558c202b6ef2761935017523fb1b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"squadsManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ActivityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"StakingPlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_POINTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"addStakingPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateStakeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getAvailableStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken1No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken2No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.StakingPlan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPlanInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Staked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubscribed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscribedTill\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.UserStakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPlansInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Staked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubscribed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscribedTill\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.UserStakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakesWithRewards\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.StakeWithRewardsInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasAnySubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralManager\",\"outputs\":[{\"internalType\":\"contract IReferralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAddReferrerOnToken2Stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squadsManager\",\"outputs\":[{\"internalType\":\"contract ISquads\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPlans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken1No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken2No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLimit_\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"updatePlanAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updatePlanActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"updatePlanDurationDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"updatePlanSubscriptionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"}],\"name\":\"updatePlanSubscriptionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"}],\"name\":\"updateReferralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress_\",\"type\":\"address\"}],\"name\":\"updateRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateShouldAddReferrerOnToken2Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"squadsManager_\",\"type\":\"address\"}],\"name\":\"updateSquadsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"step_\",\"type\":\"uint256\"}],\"name\":\"updateTimeStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"name\":\"updateToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2_\",\"type\":\"address\"}],\"name\":\"updateToken2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/ISquads.sol\\\";\\nimport \\\"./interfaces/IReferralManager.sol\\\";\\n\\ncontract Staking is IStaking, AccessControl {\\n    StakingPlan[] public stakingPlans;\\n\\n    mapping(uint256 => mapping(address => Staker)) private users;\\n\\n    uint256 public BASE_POINTS_DIVIDER = 1000;\\n    uint256 public TIME_STEP = 1 days;\\n    uint256 public MIN_STAKE_LIMIT = 1 * 1e17; // 0.1 Token\\n\\n    bool public shouldAddReferrerOnToken2Stake;\\n\\n    ERC20Burnable public token1;\\n    ERC20Burnable public token2;\\n    IReferralManager public referralManager;\\n    ISquads public squadsManager;\\n    address private rewardPool;\\n\\n    event Staked(\\n        address indexed user,\\n        uint256 indexed stakingPlanId,\\n        uint256 indexed stakeIndex,\\n        uint256 amount,\\n        uint256 profit,\\n        bool isToken2,\\n        uint256 timestamp\\n    );\\n    event Claimed(\\n        address indexed user,\\n        uint256 indexed stakingPlanId,\\n        uint256 indexed stakeIndex,\\n        uint256 amount,\\n        bool isToken2,\\n        uint256 timestamp\\n    );\\n    event StakingPlanCreated(\\n        uint256 indexed stakingPlanId,\\n        uint256 duration,\\n        uint256 apr\\n    );\\n    event ActivityChanged(uint256 indexed stakingPlanId, bool isActive);\\n    event Subscribed(address indexed user, uint256 indexed stakingPlanId);\\n\\n    constructor(\\n        address token1_,\\n        address token2_,\\n        address rewardPool_,\\n        address referralManager_,\\n        address squadsManager_\\n    ) {\\n        require(token1_ != address(0));\\n        require(token2_ != address(0));\\n        require(rewardPool_ != address(0));\\n        require(referralManager_ != address(0));\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        rewardPool = rewardPool_;\\n\\n        token1 = ERC20Burnable(token1_);\\n        token2 = ERC20Burnable(token2_);\\n        referralManager = IReferralManager(referralManager_);\\n        squadsManager = ISquads(squadsManager_);\\n    }\\n\\n    function deposit(\\n        uint256 planId,\\n        uint256 depositAmount,\\n        bool isToken2,\\n        address referrer\\n    ) public {\\n        require(stakingPlans[planId].isActive, \\\"Staking plan is not active\\\");\\n        require(\\n            hasSubscription(planId, _msgSender()),\\n            \\\"You are not subscriber\\\"\\n        );\\n        require(\\n            depositAmount >= MIN_STAKE_LIMIT,\\n            \\\"Stake amount less than minimum value\\\"\\n        );\\n        require(referrer != _msgSender(), \\\"Referrer can not be sender\\\");\\n        uint256 stakingProfit = calculateStakeProfit(planId, depositAmount);\\n\\n        require(\\n            stakingProfit <= token1.balanceOf(rewardPool),\\n            \\\"Not enough tokens for reward\\\"\\n        );\\n        if (isToken2) {\\n            token2.burnFrom(_msgSender(), depositAmount);\\n        } else {\\n            token1.transferFrom(_msgSender(), address(this), depositAmount);\\n        }\\n        token1.transferFrom(rewardPool, address(this), stakingProfit);\\n\\n        StakingPlan storage plan = stakingPlans[planId];\\n        Staker storage user = users[planId][_msgSender()];\\n\\n        Stake memory newStake = Stake({\\n            amount: depositAmount,\\n            timeStart: getTimestamp(),\\n            timeEnd: getTimestamp() + plan.stakingDuration * TIME_STEP,\\n            apr: plan.apr,\\n            profit: stakingProfit,\\n            isClaimed: false,\\n            isToken2: isToken2\\n        });\\n\\n        user.stakes.push(newStake);\\n\\n        if (isToken2) {\\n            user.currentToken2Staked += depositAmount;\\n            plan.totalStakedToken2 += depositAmount;\\n            plan.currentToken2Locked += depositAmount;\\n            plan.totalStakesToken2No += 1;\\n        } else {\\n            user.currentToken1Staked += depositAmount;\\n            plan.totalStakedToken1 += depositAmount;\\n            plan.currentToken1Locked += depositAmount;\\n            plan.totalStakesToken1No += 1;\\n        }\\n\\n        // Referrals\\n        if (!isToken2 || shouldAddReferrerOnToken2Stake) {\\n            address userReferrer = referralManager.getUserReferrer(\\n                _msgSender()\\n            );\\n            if (userReferrer == address(0) && referrer != address(0)) {\\n                referralManager.setUserReferrer(_msgSender(), referrer);\\n                userReferrer = referralManager.getUserReferrer(_msgSender());\\n            }\\n            _assignRefRewards(\\n                planId,\\n                _msgSender(),\\n                stakingProfit,\\n                depositAmount\\n            );\\n\\n            // Squads\\n            if (address(squadsManager) != address(0)) {\\n                squadsManager.tryToAddMember(\\n                    planId,\\n                    userReferrer,\\n                    _msgSender(),\\n                    depositAmount\\n                );\\n            }\\n        }\\n        emit Staked(\\n            _msgSender(),\\n            planId,\\n            user.stakes.length - 1,\\n            newStake.amount,\\n            newStake.profit,\\n            newStake.isToken2,\\n            getTimestamp()\\n        );\\n    }\\n\\n    function withdraw(uint256 planId, uint256 stakeId) public {\\n        StakingPlan storage plan = stakingPlans[planId];\\n        Staker storage user = users[planId][_msgSender()];\\n        Stake storage stake = user.stakes[stakeId];\\n\\n        require(!stake.isClaimed, \\\"Stake is already claimed\\\");\\n        require(stake.timeEnd <= getTimestamp(), \\\"Stake is not ready yet\\\");\\n\\n        uint256 withdrawAmount = _getAvailableStakeReward(stake);\\n        stake.isClaimed = true;\\n\\n        token1.transfer(_msgSender(), withdrawAmount);\\n        user.totalClaimed += withdrawAmount;\\n        plan.totalClaimed += withdrawAmount;\\n        if (stake.isToken2) {\\n            user.currentToken2Staked -= stake.amount;\\n            plan.currentToken2Locked -= stake.amount;\\n        } else {\\n            user.currentToken1Staked -= stake.amount;\\n            plan.currentToken1Locked -= stake.amount;\\n        }\\n\\n        emit Claimed(\\n            _msgSender(),\\n            planId,\\n            stakeId,\\n            withdrawAmount,\\n            stake.isToken2,\\n            getTimestamp()\\n        );\\n    }\\n\\n    function withdrawAll(uint256 planId) public {\\n        Stake[] storage stakes = users[planId][_msgSender()].stakes;\\n\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            if (!stakes[i].isClaimed && stakes[i].timeEnd <= getTimestamp()) {\\n                withdraw(planId, i);\\n            }\\n        }\\n    }\\n\\n    function _assignRefRewards(\\n        uint256 planId,\\n        address depositSender,\\n        uint256 stakingReward,\\n        uint256 depositAmount\\n    ) internal {\\n        uint256 totalLevels = referralManager.getReferralLevels();\\n        address currentLevelUser = depositSender;\\n\\n        for (uint256 level = 1; level <= totalLevels; level++) {\\n            address referrer = referralManager.getUserReferrer(\\n                currentLevelUser\\n            );\\n\\n            if (referrer != address(0)) {\\n                uint256 refReward = 0;\\n                // REASONS:\\n                // 0 - full reward\\n                // 1 - no ref subscription\\n                // 2 - no user stake\\n                // 3 - trancated by user stake\\n                uint256 reason = 1;\\n\\n                if (referralManager.userHasSubscription(referrer, level)) {\\n                    refReward = referralManager.calculateRefReward(\\n                        stakingReward,\\n                        level\\n                    );\\n                    uint256 currentToken1Staked = users[planId][referrer]\\n                        .currentToken1Staked;\\n\\n                    if (currentToken1Staked == 0) {\\n                        reason = 2;\\n                    } else if (refReward > currentToken1Staked) {\\n                        reason = 3;\\n                    } else {\\n                        reason = 0;\\n                    }\\n\\n                    refReward = refReward <= currentToken1Staked\\n                        ? refReward\\n                        : currentToken1Staked;\\n                }\\n\\n                referralManager.addUserDividends(\\n                    IReferralManager.AddDividendsParams(\\n                        referrer,\\n                        refReward,\\n                        depositSender,\\n                        level,\\n                        depositAmount,\\n                        planId,\\n                        reason\\n                    )\\n                );\\n\\n                currentLevelUser = referrer;\\n            } else break;\\n        }\\n    }\\n\\n    function subscribe(uint256 planId) public {\\n        StakingPlan storage plan = stakingPlans[planId];\\n        require(plan.isActive, \\\"Staking plan is not active\\\");\\n\\n        token1.burnFrom(_msgSender(), plan.subscriptionCost);\\n        uint256 startDate = users[planId][_msgSender()].subscription <\\n            getTimestamp()\\n            ? getTimestamp()\\n            : users[planId][_msgSender()].subscription;\\n        users[planId][_msgSender()].subscription =\\n            startDate +\\n            plan.subscriptionDuration *\\n            TIME_STEP;\\n\\n        emit Subscribed(_msgSender(), planId);\\n    }\\n\\n    function addStakingPlan(\\n        uint256 subscriptionCost,\\n        uint256 subscriptionDuration,\\n        uint256 stakingDuration,\\n        uint256 apr\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(stakingDuration > 0, \\\"Insufficient duration\\\");\\n        require(apr > 0, \\\"Insufficient APR\\\");\\n\\n        StakingPlan memory plan = StakingPlan({\\n            stakingPlanId: stakingPlans.length,\\n            isActive: true,\\n            subscriptionCost: subscriptionCost,\\n            subscriptionDuration: subscriptionDuration,\\n            stakingDuration: stakingDuration,\\n            apr: apr,\\n            totalStakesToken1No: 0,\\n            totalStakesToken2No: 0,\\n            totalStakedToken1: 0,\\n            totalStakedToken2: 0,\\n            currentToken1Locked: 0,\\n            currentToken2Locked: 0,\\n            totalClaimed: 0\\n        });\\n\\n        stakingPlans.push(plan);\\n\\n        emit StakingPlanCreated(stakingPlans.length - 1, stakingDuration, apr);\\n    }\\n\\n    function calculateStakeProfit(uint256 planId, uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (((amount * stakingPlans[planId].apr) / 365) *\\n                stakingPlans[planId].stakingDuration) / BASE_POINTS_DIVIDER;\\n    }\\n\\n    function _getAvailableStakeReward(Stake storage stake)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (stake.timeStart == 0 || stake.isClaimed) return 0;\\n\\n        uint256 stakeReward = stake.isToken2\\n            ? stake.profit\\n            : stake.amount + stake.profit;\\n\\n        if (stake.timeEnd <= getTimestamp()) return stakeReward;\\n\\n        return\\n            ((getTimestamp() - stake.timeStart) * stakeReward) /\\n            (stake.timeEnd - stake.timeStart);\\n    }\\n\\n    // --------- Helper functions ---------\\n    function getStakingPlans() public view returns (StakingPlan[] memory) {\\n        return stakingPlans;\\n    }\\n\\n    function getUserPlanInfo(uint256 planId, address userAddress)\\n        public\\n        view\\n        returns (UserStakingInfo memory)\\n    {\\n        Staker storage user = users[planId][userAddress];\\n\\n        UserStakingInfo memory info = UserStakingInfo(\\n            user.totalClaimed,\\n            user.currentToken1Staked,\\n            user.currentToken2Staked,\\n            hasSubscription(planId, userAddress),\\n            user.subscription\\n        );\\n\\n        return info;\\n    }\\n\\n    function getUserPlansInfo(address userAddress)\\n        public\\n        view\\n        returns (UserStakingInfo[] memory)\\n    {\\n        UserStakingInfo[] memory plansInfo = new UserStakingInfo[](\\n            stakingPlans.length\\n        );\\n\\n        for (uint256 i = 0; i < stakingPlans.length; i++) {\\n            plansInfo[i] = getUserPlanInfo(i, userAddress);\\n        }\\n\\n        return plansInfo;\\n    }\\n\\n    function getUserStakes(uint256 planId, address userAddress)\\n        public\\n        view\\n        returns (Stake[] memory)\\n    {\\n        return users[planId][userAddress].stakes;\\n    }\\n\\n    // TODO: how to optimize it?\\n    function getUserStakesWithRewards(uint256 planId, address userAddress)\\n        public\\n        view\\n        returns (StakeWithRewardsInfo[] memory)\\n    {\\n        uint256 stakesLength = users[planId][userAddress].stakes.length;\\n        StakeWithRewardsInfo[] memory stakesInfo = new StakeWithRewardsInfo[](\\n            stakesLength\\n        );\\n\\n        for (uint256 i = 0; i < stakesLength; i++) {\\n            stakesInfo[i].stake = users[planId][userAddress].stakes[i];\\n            if (!stakesInfo[i].stake.isClaimed) {\\n                stakesInfo[i].reward = _getAvailableStakeReward(\\n                    users[planId][userAddress].stakes[i]\\n                );\\n            }\\n        }\\n\\n        return stakesInfo;\\n    }\\n\\n    function getTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function getAvailableStakeReward(\\n        uint256 planId,\\n        address userAddress,\\n        uint256 stakeId\\n    ) public view returns (uint256) {\\n        return\\n            _getAvailableStakeReward(\\n                users[planId][userAddress].stakes[stakeId]\\n            );\\n    }\\n\\n    function hasSubscription(uint256 planId, address user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return users[planId][user].subscription > getTimestamp();\\n    }\\n\\n    function hasAnySubscription(address user) public view returns (bool) {\\n        for (uint256 i = 0; i < stakingPlans.length; i++) {\\n            if (hasSubscription(i, user)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // --------- Administrative functions ---------\\n    function updateShouldAddReferrerOnToken2Stake(bool value)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        shouldAddReferrerOnToken2Stake = value;\\n    }\\n\\n    function updateRewardPool(address poolAddress_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        rewardPool = poolAddress_;\\n    }\\n\\n    function updateToken1(address token1_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        token1 = ERC20Burnable(token1_);\\n    }\\n\\n    function updateToken2(address token2_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        token2 = ERC20Burnable(token2_);\\n    }\\n\\n    function updateReferralManager(address referralManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        referralManager = IReferralManager(referralManager_);\\n    }\\n\\n    function updateSquadsManager(address squadsManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        squadsManager = ISquads(squadsManager_);\\n    }\\n\\n    function updateTimeStep(uint256 step_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        TIME_STEP = step_;\\n    }\\n\\n    function updateMinStakeLimit(uint256 minLimit_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        MIN_STAKE_LIMIT = minLimit_;\\n    }\\n\\n    function updatePlanActivity(uint256 planId, bool isActive)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].isActive = isActive;\\n\\n        emit ActivityChanged(planId, isActive);\\n    }\\n\\n    function updatePlanDurationDays(uint256 planId, uint256 duration)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].stakingDuration = duration;\\n    }\\n\\n    function updatePlanAPR(uint256 planId, uint256 apr)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].apr = apr;\\n    }\\n\\n    function updatePlanSubscriptionCost(uint256 planId, uint256 cost)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].subscriptionCost = cost;\\n    }\\n\\n    function updatePlanSubscriptionPeriod(\\n        uint256 planId,\\n        uint256 subscriptionDuration\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        stakingPlans[planId].subscriptionDuration = subscriptionDuration;\\n    }\\n}\\n\",\"keccak256\":\"0x764f58d084064023c49ddbfaf896f5bd931804975c6b18e5b5b03d989e68fefb\",\"license\":\"MIT\"},\"contracts/interfaces/IReferralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IReferralManager {\\n    struct Referral {\\n        address referralAddress;\\n        uint256 level;\\n        uint256 activationDate;\\n        bool isReferralSubscriptionActive;\\n    }\\n\\n    struct AddDividendsParams {\\n        address user;\\n        uint256 reward;\\n        address referral;\\n        uint256 level;\\n        uint256 depositAmount;\\n        uint256 stakingPlanId;\\n        // REASONS:\\n        // 0 - full reward\\n        // 1 - no ref subscription\\n        // 2 - no user stake\\n        // 3 - trancated by user stake\\n        // 4 - team\\n        uint256 reason;\\n    }\\n\\n    function getReferralLevels() external pure returns (uint256);\\n\\n    function addUserDividends(AddDividendsParams memory params) external;\\n\\n    function getUserReferrer(address user) external view returns (address);\\n\\n    function setUserReferrer(address user, address referrer) external;\\n\\n    function userHasSubscription(address user, uint256 level)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateRefReward(uint256 amount, uint256 level)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUserReferralsByLevel(address userAddress, uint256 level)\\n        external\\n        view\\n        returns (Referral[] memory);\\n}\\n\",\"keccak256\":\"0x760235771d939da15193c05f7d1c24cfff3f583cdc37f92b42bef5b304491f5c\",\"license\":\"MIT\"},\"contracts/interfaces/ISquads.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ISquads {\\n    struct Squad {\\n        uint256 subscription; // when subscription expire\\n        uint256 squadsFilled; // how much squads user filled\\n    }\\n\\n    struct SquadPlan {\\n        uint256 squadPlanId;\\n        uint256 subscriptionCost;\\n        uint256 reward; // reward for filling full squad\\n        uint256 stakingThreshold; // min staking amount that member should do\\n        uint256 squadSize; // amount of squad members\\n        uint256 stakingPlanId;\\n        bool isActive;\\n    }\\n\\n    function subscribe(uint256 planId) external;\\n\\n    function tryToAddMember(\\n        uint256 stakingPlanId,\\n        address user,\\n        address member,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function getUserSquadMembers(address user, uint256 planId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function userHasSufficientStaking(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getUserSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (Squad memory);\\n\\n    function hasAnySubscription(address user) external view returns (bool);\\n\\n    function userHasPlanSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getSufficientPlanIdByStakingAmount(\\n        uint256 stakingPlanId,\\n        uint256 amount\\n    ) external view returns (int256);\\n\\n    function getPlan(uint256 planId) external view returns (SquadPlan memory);\\n\\n    function getPlans() external view returns (SquadPlan[] memory);\\n\\n    function getActivePlans() external view returns (SquadPlan[] memory);\\n}\\n\",\"keccak256\":\"0xb467b190914e4041c5a749082b66a02edfcd1af6795bbf855a3a05bd2f76ddb8\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IStaking {\\n    struct StakingPlan {\\n        uint256 stakingPlanId;\\n        bool isActive;\\n        uint256 subscriptionCost;\\n        uint256 subscriptionDuration;\\n        uint256 stakingDuration;\\n        uint256 apr;\\n        uint256 totalStakesToken1No;\\n        uint256 totalStakesToken2No;\\n        uint256 totalStakedToken1;\\n        uint256 totalStakedToken2;\\n        uint256 currentToken1Locked;\\n        uint256 currentToken2Locked;\\n        uint256 totalClaimed;\\n    }\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 timeStart;\\n        uint256 timeEnd;\\n        uint256 apr;\\n        uint256 profit;\\n        bool isClaimed;\\n        bool isToken2;\\n    }\\n\\n    struct Staker {\\n        Stake[] stakes;\\n        uint256 subscription;\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n    }\\n\\n    struct UserStakingInfo {\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n        bool isSubscribed;\\n        uint256 subscribedTill;\\n    }\\n\\n    struct StakeWithRewardsInfo {\\n        Stake stake;\\n        uint256 reward;\\n    }\\n\\n    function deposit(\\n        uint256 planId,\\n        uint256 depositAmount,\\n        bool isToken2,\\n        address referrer\\n    ) external;\\n\\n    function withdraw(uint256 planId, uint256 stakeId) external;\\n\\n    function subscribe(uint256 planId) external;\\n\\n    // --------- Helper functions ---------\\n    function getUserPlanInfo(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (UserStakingInfo memory);\\n\\n    function getUserStakes(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (Stake[] memory stakes);\\n\\n    function getAvailableStakeReward(\\n        uint256 planId,\\n        address userAddress,\\n        uint256 stakeId\\n    ) external view returns (uint256);\\n\\n    function hasSubscription(uint256 planId, address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function hasAnySubscription(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaaf1b6f22c84fd6c9232ac651814e8a1f7d4c379de9068807bf8e04d5622e992\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526103e86003556201518060045567016345785d8a00006005553480156200002a57600080fd5b506040516200326a3803806200326a8339810160408190526200004d91620001d8565b6001600160a01b0385166200006157600080fd5b6001600160a01b0384166200007557600080fd5b6001600160a01b0383166200008957600080fd5b6001600160a01b0382166200009d57600080fd5b620000aa6000336200011a565b600a80546001600160a01b03199081166001600160a01b039586161790915560068054610100600160a81b03191661010097861697909702969096179095556007805486169484169490941790935560088054851691831691909117905560098054909316911617905562000248565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001b7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001763390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b0381168114620001d357600080fd5b919050565b600080600080600060a08688031215620001f157600080fd5b620001fc86620001bb565b94506200020c60208701620001bb565b93506200021c60408701620001bb565b92506200022c60608701620001bb565b91506200023c60808701620001bb565b90509295509295909350565b61301280620002586000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c80637c67b33911610151578063c71207af116100c3578063d5fbac3a11610087578063d5fbac3a146105fc578063dce4b29b1461060f578063e256617314610622578063eadb182c1461062b578063ed10dda314610634578063fcd0cad71461064757600080fd5b8063c71207af14610598578063c7852153146105ab578063cd69d3d9146105be578063d21220a7146105d1578063d547741f146105e957600080fd5b8063ad6299bc11610115578063ad6299bc1461052c578063ae1f267c1461053f578063ae1fc32414610552578063afa8308514610565578063b652b28c14610572578063bac1d2b51461058557600080fd5b80637c67b339146104d857806391d14854146104eb57806395319e23146104fe578063958e2d3114610511578063a217fddf1461052457600080fd5b80632f2ff15d116101ea578063441a3e70116101ae578063441a3e70146103ea578063458f3bb0146103fd578063472b0b6814610410578063717f9007146104305780637213fe4714610443578063762e7a341461046357600080fd5b80632f2ff15d1461039357806332bc298c146103a657806336568abe146103af5780633bb2c773146103c25780633fe90537146103d757600080fd5b8063188ec3561161023c578063188ec356146102fc5780631c0e06121461030c578063248a9ca31461031f57806325be124e146103425780632968f6161461036d5780632ccd96231461038057600080fd5b806301ffc9a714610279578063064e6780146102a15780630f574ba7146102b657806314ce783d146102c957806316c51a37146102e9575b600080fd5b61028c6102873660046129b0565b610667565b60405190151581526020015b60405180910390f35b6102b46102af3660046129ef565b61069e565b005b6102b46102c4366004612a0c565b6106d2565b6102dc6102d7366004612a25565b610888565b6040516102989190612a9d565b6102b46102f7366004612aeb565b610950565b425b604051908152602001610298565b6102b461031a366004612b2b565b610cae565b6102fe61032d366004612a0c565b60009081526020819052604090206001015490565b600754610355906001600160a01b031681565b6040516001600160a01b039091168152602001610298565b6102b461037b366004612b50565b610d36565b600854610355906001600160a01b031681565b6102b46103a1366004612a25565b6115f9565b6102fe60045481565b6102b46103bd366004612a25565b611623565b6103ca6116a1565b6040516102989190612b9a565b6102b46103e5366004612c60565b611787565b6102b46103f8366004612c60565b6117c0565b6102fe61040b366004612c82565b611aad565b61042361041e3660046129ef565b611b01565b6040516102989190612cba565b6102b461043e366004612a0c565b611bd8565b610456610451366004612a25565b611be9565b6040516102989190612d29565b610476610471366004612a0c565b611dcd565b604080519d8e529b151560208e01529a8c019990995260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301526101808201526101a001610298565b6102b46104e63660046129ef565b611e50565b61028c6104f9366004612a25565b611e7e565b6102b461050c366004612d75565b611ea7565b6102b461051f366004612a0c565b611ec6565b6102fe600081565b61028c61053a3660046129ef565b611f64565b6102fe61054d366004612c60565b611fa5565b6102b46105603660046129ef565b612027565b60065461028c9060ff1681565b61028c610580366004612a25565b612055565b6102b4610593366004612c60565b612082565b6102b46105a6366004612c60565b6120bb565b6102b46105b9366004612c60565b6120f4565b6102b46105cc3660046129ef565b61212d565b6006546103559061010090046001600160a01b031681565b6102b46105f7366004612a25565b61215b565b6102b461060a3660046129ef565b612180565b6102b461061d366004612a0c565b6121ae565b6102fe60055481565b6102fe60035481565b600954610355906001600160a01b031681565b61065a610655366004612a25565b6121bf565b6040516102989190612d92565b60006001600160e01b03198216637965db0b60e01b148061069857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006106a981612263565b50600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000600182815481106106e7576106e7612dcd565b60009182526020909120600d90910201600181015490915060ff166107535760405162461bcd60e51b815260206004820152601a60248201527f5374616b696e6720706c616e206973206e6f742061637469766500000000000060448201526064015b60405180910390fd5b60065461010090046001600160a01b03166379cc67903360028401546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156107b557600080fd5b505af11580156107c9573d6000803e3d6000fd5b5050505060006107d64290565b60008481526002602090815260408083203384529091529020600101541061081a57600083815260026020908152604080832033845290915290206001015461081c565b425b905060045482600301546108309190612df9565b61083a9082612e18565b60008481526002602090815260408083203380855292528083206001019390935591518592917f4b90d6788928d63c1821907a6a8b95f40d26562d8fe41b105f7489db9966dfcb91a3505050565b60008281526002602090815260408083206001600160a01b03851684528252808320805482518185028101850190935280835260609492939192909184015b828210156109445760008481526020908190206040805160e08101825260068602909201805483526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c083015290835290920191016108c7565b50505050905092915050565b600061095b81612263565b600083116109a35760405162461bcd60e51b815260206004820152601560248201527424b739bab33334b1b4b2b73a10323ab930ba34b7b760591b604482015260640161074a565b600082116109e65760405162461bcd60e51b815260206004820152601060248201526f24b739bab33334b1b4b2b73a1020a82960811b604482015260640161074a565b604080516101a0810182526001805480835260208301828152938301898152606084018981526080850189815260a08601898152600060c0880181815260e089018281526101008a018381526101208b018481526101408c018581526101608d018681526101808e018781528c8e018e55968d90528d517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6600d909d029c8d01559d517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf78c01805460ff191691151591909117905598517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf88b015596517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf98a015594517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa89015592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb880155517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfc87015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfd86015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfe85015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cff84015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0d0083015593517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0d0182015592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0d029093019290925581549091610c6d91612e30565b60408051868152602081018690527fb25951144c8a6e80eb675cb14ec779e73bd8f06dc10471b7074332d38cbf9af5910160405180910390a2505050505050565b6000610cb981612263565b8160018481548110610ccd57610ccd612dcd565b90600052602060002090600d020160010160006101000a81548160ff021916908315150217905550827fbfb8d33fd9f7cfe605f8368d0791b6bc475b77345c7c022bbe2aecf8c21ba24383604051610d29911515815260200190565b60405180910390a2505050565b60018481548110610d4957610d49612dcd565b600091825260209091206001600d90920201015460ff16610dac5760405162461bcd60e51b815260206004820152601a60248201527f5374616b696e6720706c616e206973206e6f7420616374697665000000000000604482015260640161074a565b610db68433612055565b610dfb5760405162461bcd60e51b81526020600482015260166024820152752cb7ba9030b932903737ba1039bab139b1b934b132b960511b604482015260640161074a565b600554831015610e595760405162461bcd60e51b8152602060048201526024808201527f5374616b6520616d6f756e74206c657373207468616e206d696e696d756d2076604482015263616c756560e01b606482015260840161074a565b6001600160a01b038116331415610eb25760405162461bcd60e51b815260206004820152601a60248201527f52656665727265722063616e206e6f742062652073656e646572000000000000604482015260640161074a565b6000610ebe8585611fa5565b600654600a546040516370a0823160e01b81526001600160a01b03918216600482015292935061010090910416906370a0823190602401602060405180830381865afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190612e47565b811115610f855760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820746f6b656e7320666f722072657761726400000000604482015260640161074a565b8215611002576007546001600160a01b03166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b158015610fe557600080fd5b505af1158015610ff9573d6000803e3d6000fd5b50505050611092565b60065461010090046001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018790526064016020604051808303816000875af115801561106c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110909190612e60565b505b600654600a546040516323b872dd60e01b81526001600160a01b0391821660048201523060248201526044810184905261010090920416906323b872dd906064016020604051808303816000875af11580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111169190612e60565b5060006001868154811061112c5761112c612dcd565b60009182526020808320898452600290915260408320600d909202019250816111523390565b6001600160a01b03166001600160a01b03168152602001908152602001600020905060006040518060e0016040528088815260200161118e4290565b815260200160045485600401546111a59190612df9565b6111af9042612e18565b81526005808601546020808401919091526040808401899052600060608086018290528c158015608097880152895460018181018c558b8552938690208951600690920201908155948801519285019290925591860151600284015590850151600383015592840151600482015560a08401519101805460c085015115156101000261ff00199315159390931661ffff19909116179190911790559091506112c257868260040160008282546112659190612e18565b92505081905550868360090160008282546112809190612e18565b925050819055508683600b01600082825461129b9190612e18565b9250508190555060018360070160008282546112b79190612e18565b9091555061132e9050565b868260030160008282546112d69190612e18565b92505081905550868360080160008282546112f19190612e18565b925050819055508683600a01600082825461130c9190612e18565b9250508190555060018360060160008282546113289190612e18565b90915550505b85158061133d575060065460ff165b1561158b576008546000906001600160a01b03166336144c9a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190612e7d565b90506001600160a01b0381161580156113e057506001600160a01b03861615155b156114d7576008546001600160a01b031663f8d0e6ec336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529089166024820152604401600060405180830381600087803b15801561144057600080fd5b505af1158015611454573d6000803e3d6000fd5b50506008546001600160a01b031691506336144c9a9050336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156114b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d49190612e7d565b90505b6114e38933878b612270565b6009546001600160a01b031615611589576009546001600160a01b031663afea5d558a83336040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606481018b90526084016020604051808303816000875af1158015611563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115879190612e60565b505b505b815461159990600190612e30565b815160808084015160c0850151604080519485526020850192909252151583820152426060840152518b9233927f42ca3e556bfff174f2df01f4d630ae56cd8a109430c8058a83541d2f8949f64f92918290030190a45050505050505050565b60008281526020819052604090206001015461161481612263565b61161e83836125d7565b505050565b6001600160a01b03811633146116935760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161074a565b61169d828261265b565b5050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561177e576000848152602090819020604080516101a081018252600d86029092018054835260018082015460ff161515848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a810154610140840152600b810154610160840152600c015461018083015290835290920191016116c5565b50505050905090565b600061179281612263565b81600184815481106117a6576117a6612dcd565b90600052602060002090600d020160020181905550505050565b6000600183815481106117d5576117d5612dcd565b60009182526020808320868452600290915260408320600d909202019250816117fb3390565b6001600160a01b03166001600160a01b031681526020019081526020016000209050600081600001848154811061183457611834612dcd565b60009182526020909120600690910201600581015490915060ff161561189c5760405162461bcd60e51b815260206004820152601860248201527f5374616b6520697320616c726561647920636c61696d65640000000000000000604482015260640161074a565b42816002015411156118e95760405162461bcd60e51b815260206004820152601660248201527514dd185ad9481a5cc81b9bdd081c9958591e481e595d60521b604482015260640161074a565b60006118f4826126c0565b60058301805460ff191660011790556006549091506001600160a01b036101009091041663a9059cbb6119243390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611971573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119959190612e60565b50808360020160008282546119aa9190612e18565b925050819055508084600c0160008282546119c59190612e18565b90915550506005820154610100900460ff1615611a185781546004840180546000906119f2908490612e30565b90915550508154600b85018054600090611a0d908490612e30565b90915550611a4f9050565b8154600384018054600090611a2e908490612e30565b90915550508154600a85018054600090611a49908490612e30565b90915550505b60058201548590879033907f14346b96e636bce3fdf42a5ed73f91c82b085304530c1acdc09e1896fb4ccef9908590610100900460ff16426040805193845291151560208401529082015260600160405180910390a4505050505050565b60008381526002602090815260408083206001600160a01b038616845290915281208054611af9919084908110611ae657611ae6612dcd565b90600052602060002090600602016126c0565b949350505050565b60015460609060009067ffffffffffffffff811115611b2257611b22612e9a565b604051908082528060200260200182016040528015611b8757816020015b611b746040518060a00160405280600081526020016000815260200160008152602001600015158152602001600081525090565b815260200190600190039081611b405790505b50905060005b600154811015611bd157611ba181856121bf565b828281518110611bb357611bb3612dcd565b60200260200101819052508080611bc990612eb0565b915050611b8d565b5092915050565b6000611be381612263565b50600555565b60008281526002602090815260408083206001600160a01b03851684529091528120546060918167ffffffffffffffff811115611c2857611c28612e9a565b604051908082528060200260200182016040528015611c6157816020015b611c4e612954565b815260200190600190039081611c465790505b50905060005b82811015611dc45760008681526002602090815260408083206001600160a01b03891684529091529020805482908110611ca357611ca3612dcd565b60009182526020918290206040805160e081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff808216151560a084015261010090910416151560c08201528251839083908110611d2157611d21612dcd565b602002602001015160000181905250818181518110611d4257611d42612dcd565b60200260200101516000015160a00151611db25760008681526002602090815260408083206001600160a01b038916845290915290208054611d8f919083908110611ae657611ae6612dcd565b828281518110611da157611da1612dcd565b602002602001015160200181815250505b80611dbc81612eb0565b915050611c67565b50949350505050565b60018181548110611ddd57600080fd5b90600052602060002090600d02016000915090508060000154908060010160009054906101000a900460ff169080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a01549080600b01549080600c015490508d565b6000611e5b81612263565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000611eb281612263565b506006805460ff1916911515919091179055565b60008181526002602090815260408083203384529091528120905b815481101561161e57818181548110611efc57611efc612dcd565b600091825260209091206005600690920201015460ff16158015611f43575042828281548110611f2e57611f2e612dcd565b90600052602060002090600602016002015411155b15611f5257611f5283826117c0565b80611f5c81612eb0565b915050611ee1565b6000805b600154811015611f9c57611f7c8184612055565b15611f8a5750600192915050565b80611f9481612eb0565b915050611f68565b50600092915050565b600060035460018481548110611fbd57611fbd612dcd565b90600052602060002090600d02016004015461016d60018681548110611fe557611fe5612dcd565b90600052602060002090600d020160050154856120029190612df9565b61200c9190612ecb565b6120169190612df9565b6120209190612ecb565b9392505050565b600061203281612263565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526002602090815260408084206001600160a01b03939093168452919052902060010154421090565b600061208d81612263565b81600184815481106120a1576120a1612dcd565b90600052602060002090600d020160040181905550505050565b60006120c681612263565b81600184815481106120da576120da612dcd565b90600052602060002090600d020160050181905550505050565b60006120ff81612263565b816001848154811061211357612113612dcd565b90600052602060002090600d020160030181905550505050565b600061213881612263565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526020819052604090206001015461217681612263565b61161e838361265b565b600061218b81612263565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006121b981612263565b50600455565b6121f36040518060a00160405280600081526020016000815260200160008152602001600015158152602001600081525090565b60008381526002602081815260408084206001600160a01b03871685528252808420815160a0810183529381015484526003810154928401929092526004820154908301529190606081016122488787612055565b15158152600190930154602090930192909252509392505050565b61226d8133612754565b50565b6008546040805163070d451f60e01b815290516000926001600160a01b03169163070d451f9160048083019260209291908290030181865afa1580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de9190612e47565b90508360015b8281116125ce57600854604051631b0a264d60e11b81526001600160a01b03848116600483015260009216906336144c9a90602401602060405180830381865afa158015612336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235a9190612e7d565b90506001600160a01b038116156125b5576008546040516303fea6cb60e11b81526001600160a01b038381166004830152602482018590526000926001929116906307fd4d9690604401602060405180830381865afa1580156123c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e59190612e60565b156124bf576008546040516384197dbb60e01b8152600481018a9052602481018690526001600160a01b03909116906384197dbb90604401602060405180830381865afa15801561243a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245e9190612e47565b60008b81526002602090815260408083206001600160a01b03881684529091529020600301549092508061249557600291506124ab565b808311156124a657600391506124ab565b600091505b808311156124b957806124bb565b825b9250505b6008546040805160e0810182526001600160a01b038681168252602082018690528c81168284015260608201889052608082018b905260a082018e905260c082018590529151639581f52760e01b81529190921691639581f52791612579919060040181516001600160a01b0390811682526020808401519083015260408084015190911690820152606080830151908201526080808301519082015260a0828101519082015260c0918201519181019190915260e00190565b600060405180830381600087803b15801561259357600080fd5b505af11580156125a7573d6000803e3d6000fd5b5050505082945050506125bb565b506125ce565b50806125c681612eb0565b9150506122e4565b50505050505050565b6125e18282611e7e565b61169d576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556126173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6126658282611e7e565b1561169d576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008160010154600014806126d95750600582015460ff165b156126e657506000919050565b6005820154600090610100900460ff16612710576004830154835461270b9190612e18565b612716565b82600401545b9050428360020154116127295792915050565b8260010154836002015461273d9190612e30565b81846001015461274a4290565b61200c9190612e30565b61275e8282611e7e565b61169d57612776816001600160a01b031660146127b8565b6127818360206127b8565b604051602001612792929190612f1d565b60408051601f198184030181529082905262461bcd60e51b825261074a91600401612f92565b606060006127c7836002612df9565b6127d2906002612e18565b67ffffffffffffffff8111156127ea576127ea612e9a565b6040519080825280601f01601f191660200182016040528015612814576020820181803683370190505b509050600360fc1b8160008151811061282f5761282f612dcd565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061285e5761285e612dcd565b60200101906001600160f81b031916908160001a9053506000612882846002612df9565b61288d906001612e18565b90505b6001811115612905576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106128c1576128c1612dcd565b1a60f81b8282815181106128d7576128d7612dcd565b60200101906001600160f81b031916908160001a90535060049490941c936128fe81612fc5565b9050612890565b5083156120205760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161074a565b60405180604001604052806129a36040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001600081525090565b6000602082840312156129c257600080fd5b81356001600160e01b03198116811461202057600080fd5b6001600160a01b038116811461226d57600080fd5b600060208284031215612a0157600080fd5b8135612020816129da565b600060208284031215612a1e57600080fd5b5035919050565b60008060408385031215612a3857600080fd5b823591506020830135612a4a816129da565b809150509250929050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a083015260c0810151151560c08301525050565b6020808252825182820181905260009190848201906040850190845b81811015612adf57612acc838551612a55565b9284019260e09290920191600101612ab9565b50909695505050505050565b60008060008060808587031215612b0157600080fd5b5050823594602084013594506040840135936060013592509050565b801515811461226d57600080fd5b60008060408385031215612b3e57600080fd5b823591506020830135612a4a81612b1d565b60008060008060808587031215612b6657600080fd5b84359350602085013592506040850135612b7f81612b1d565b91506060850135612b8f816129da565b939692955090935050565b602080825282518282018190526000919060409081850190868401855b82811015612c5357815180518552868101511515878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e08082015190860152610100808201519086015261012080820151908601526101408082015190860152610160808201519086015261018090810151908501526101a09093019290850190600101612bb7565b5091979650505050505050565b60008060408385031215612c7357600080fd5b50508035926020909101359150565b600080600060608486031215612c9757600080fd5b833592506020840135612ca9816129da565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b81811015612adf57612d16838551805182526020810151602083015260408101516040830152606081015115156060830152608081015160808301525050565b9284019260a09290920191600101612cd6565b6020808252825182820181905260009190848201906040850190845b81811015612adf578351612d5a848251612a55565b85015160e08401529284019261010090920191600101612d45565b600060208284031215612d8757600080fd5b813561202081612b1d565b60a081016106988284805182526020810151602083015260408101516040830152606081015115156060830152608081015160808301525050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612e1357612e13612de3565b500290565b60008219821115612e2b57612e2b612de3565b500190565b600082821015612e4257612e42612de3565b500390565b600060208284031215612e5957600080fd5b5051919050565b600060208284031215612e7257600080fd5b815161202081612b1d565b600060208284031215612e8f57600080fd5b8151612020816129da565b634e487b7160e01b600052604160045260246000fd5b6000600019821415612ec457612ec4612de3565b5060010190565b600082612ee857634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015612f08578181015183820152602001612ef0565b83811115612f17576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f55816017850160208801612eed565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f86816028840160208801612eed565b01602801949350505050565b6020815260008251806020840152612fb1816040850160208701612eed565b601f01601f19169190910160400192915050565b600081612fd457612fd4612de3565b50600019019056fea2646970667358221220f9e7d97554887841b68ec6957f3656eb18633b8e8131b0ba514adf5aa548c4a864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102745760003560e01c80637c67b33911610151578063c71207af116100c3578063d5fbac3a11610087578063d5fbac3a146105fc578063dce4b29b1461060f578063e256617314610622578063eadb182c1461062b578063ed10dda314610634578063fcd0cad71461064757600080fd5b8063c71207af14610598578063c7852153146105ab578063cd69d3d9146105be578063d21220a7146105d1578063d547741f146105e957600080fd5b8063ad6299bc11610115578063ad6299bc1461052c578063ae1f267c1461053f578063ae1fc32414610552578063afa8308514610565578063b652b28c14610572578063bac1d2b51461058557600080fd5b80637c67b339146104d857806391d14854146104eb57806395319e23146104fe578063958e2d3114610511578063a217fddf1461052457600080fd5b80632f2ff15d116101ea578063441a3e70116101ae578063441a3e70146103ea578063458f3bb0146103fd578063472b0b6814610410578063717f9007146104305780637213fe4714610443578063762e7a341461046357600080fd5b80632f2ff15d1461039357806332bc298c146103a657806336568abe146103af5780633bb2c773146103c25780633fe90537146103d757600080fd5b8063188ec3561161023c578063188ec356146102fc5780631c0e06121461030c578063248a9ca31461031f57806325be124e146103425780632968f6161461036d5780632ccd96231461038057600080fd5b806301ffc9a714610279578063064e6780146102a15780630f574ba7146102b657806314ce783d146102c957806316c51a37146102e9575b600080fd5b61028c6102873660046129b0565b610667565b60405190151581526020015b60405180910390f35b6102b46102af3660046129ef565b61069e565b005b6102b46102c4366004612a0c565b6106d2565b6102dc6102d7366004612a25565b610888565b6040516102989190612a9d565b6102b46102f7366004612aeb565b610950565b425b604051908152602001610298565b6102b461031a366004612b2b565b610cae565b6102fe61032d366004612a0c565b60009081526020819052604090206001015490565b600754610355906001600160a01b031681565b6040516001600160a01b039091168152602001610298565b6102b461037b366004612b50565b610d36565b600854610355906001600160a01b031681565b6102b46103a1366004612a25565b6115f9565b6102fe60045481565b6102b46103bd366004612a25565b611623565b6103ca6116a1565b6040516102989190612b9a565b6102b46103e5366004612c60565b611787565b6102b46103f8366004612c60565b6117c0565b6102fe61040b366004612c82565b611aad565b61042361041e3660046129ef565b611b01565b6040516102989190612cba565b6102b461043e366004612a0c565b611bd8565b610456610451366004612a25565b611be9565b6040516102989190612d29565b610476610471366004612a0c565b611dcd565b604080519d8e529b151560208e01529a8c019990995260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301526101808201526101a001610298565b6102b46104e63660046129ef565b611e50565b61028c6104f9366004612a25565b611e7e565b6102b461050c366004612d75565b611ea7565b6102b461051f366004612a0c565b611ec6565b6102fe600081565b61028c61053a3660046129ef565b611f64565b6102fe61054d366004612c60565b611fa5565b6102b46105603660046129ef565b612027565b60065461028c9060ff1681565b61028c610580366004612a25565b612055565b6102b4610593366004612c60565b612082565b6102b46105a6366004612c60565b6120bb565b6102b46105b9366004612c60565b6120f4565b6102b46105cc3660046129ef565b61212d565b6006546103559061010090046001600160a01b031681565b6102b46105f7366004612a25565b61215b565b6102b461060a3660046129ef565b612180565b6102b461061d366004612a0c565b6121ae565b6102fe60055481565b6102fe60035481565b600954610355906001600160a01b031681565b61065a610655366004612a25565b6121bf565b6040516102989190612d92565b60006001600160e01b03198216637965db0b60e01b148061069857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006106a981612263565b50600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000600182815481106106e7576106e7612dcd565b60009182526020909120600d90910201600181015490915060ff166107535760405162461bcd60e51b815260206004820152601a60248201527f5374616b696e6720706c616e206973206e6f742061637469766500000000000060448201526064015b60405180910390fd5b60065461010090046001600160a01b03166379cc67903360028401546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156107b557600080fd5b505af11580156107c9573d6000803e3d6000fd5b5050505060006107d64290565b60008481526002602090815260408083203384529091529020600101541061081a57600083815260026020908152604080832033845290915290206001015461081c565b425b905060045482600301546108309190612df9565b61083a9082612e18565b60008481526002602090815260408083203380855292528083206001019390935591518592917f4b90d6788928d63c1821907a6a8b95f40d26562d8fe41b105f7489db9966dfcb91a3505050565b60008281526002602090815260408083206001600160a01b03851684528252808320805482518185028101850190935280835260609492939192909184015b828210156109445760008481526020908190206040805160e08101825260068602909201805483526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c083015290835290920191016108c7565b50505050905092915050565b600061095b81612263565b600083116109a35760405162461bcd60e51b815260206004820152601560248201527424b739bab33334b1b4b2b73a10323ab930ba34b7b760591b604482015260640161074a565b600082116109e65760405162461bcd60e51b815260206004820152601060248201526f24b739bab33334b1b4b2b73a1020a82960811b604482015260640161074a565b604080516101a0810182526001805480835260208301828152938301898152606084018981526080850189815260a08601898152600060c0880181815260e089018281526101008a018381526101208b018481526101408c018581526101608d018681526101808e018781528c8e018e55968d90528d517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6600d909d029c8d01559d517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf78c01805460ff191691151591909117905598517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf88b015596517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf98a015594517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa89015592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb880155517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfc87015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfd86015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfe85015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cff84015590517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0d0083015593517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0d0182015592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0d029093019290925581549091610c6d91612e30565b60408051868152602081018690527fb25951144c8a6e80eb675cb14ec779e73bd8f06dc10471b7074332d38cbf9af5910160405180910390a2505050505050565b6000610cb981612263565b8160018481548110610ccd57610ccd612dcd565b90600052602060002090600d020160010160006101000a81548160ff021916908315150217905550827fbfb8d33fd9f7cfe605f8368d0791b6bc475b77345c7c022bbe2aecf8c21ba24383604051610d29911515815260200190565b60405180910390a2505050565b60018481548110610d4957610d49612dcd565b600091825260209091206001600d90920201015460ff16610dac5760405162461bcd60e51b815260206004820152601a60248201527f5374616b696e6720706c616e206973206e6f7420616374697665000000000000604482015260640161074a565b610db68433612055565b610dfb5760405162461bcd60e51b81526020600482015260166024820152752cb7ba9030b932903737ba1039bab139b1b934b132b960511b604482015260640161074a565b600554831015610e595760405162461bcd60e51b8152602060048201526024808201527f5374616b6520616d6f756e74206c657373207468616e206d696e696d756d2076604482015263616c756560e01b606482015260840161074a565b6001600160a01b038116331415610eb25760405162461bcd60e51b815260206004820152601a60248201527f52656665727265722063616e206e6f742062652073656e646572000000000000604482015260640161074a565b6000610ebe8585611fa5565b600654600a546040516370a0823160e01b81526001600160a01b03918216600482015292935061010090910416906370a0823190602401602060405180830381865afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190612e47565b811115610f855760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f75676820746f6b656e7320666f722072657761726400000000604482015260640161074a565b8215611002576007546001600160a01b03166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b158015610fe557600080fd5b505af1158015610ff9573d6000803e3d6000fd5b50505050611092565b60065461010090046001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018790526064016020604051808303816000875af115801561106c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110909190612e60565b505b600654600a546040516323b872dd60e01b81526001600160a01b0391821660048201523060248201526044810184905261010090920416906323b872dd906064016020604051808303816000875af11580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111169190612e60565b5060006001868154811061112c5761112c612dcd565b60009182526020808320898452600290915260408320600d909202019250816111523390565b6001600160a01b03166001600160a01b03168152602001908152602001600020905060006040518060e0016040528088815260200161118e4290565b815260200160045485600401546111a59190612df9565b6111af9042612e18565b81526005808601546020808401919091526040808401899052600060608086018290528c158015608097880152895460018181018c558b8552938690208951600690920201908155948801519285019290925591860151600284015590850151600383015592840151600482015560a08401519101805460c085015115156101000261ff00199315159390931661ffff19909116179190911790559091506112c257868260040160008282546112659190612e18565b92505081905550868360090160008282546112809190612e18565b925050819055508683600b01600082825461129b9190612e18565b9250508190555060018360070160008282546112b79190612e18565b9091555061132e9050565b868260030160008282546112d69190612e18565b92505081905550868360080160008282546112f19190612e18565b925050819055508683600a01600082825461130c9190612e18565b9250508190555060018360060160008282546113289190612e18565b90915550505b85158061133d575060065460ff165b1561158b576008546000906001600160a01b03166336144c9a336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190612e7d565b90506001600160a01b0381161580156113e057506001600160a01b03861615155b156114d7576008546001600160a01b031663f8d0e6ec336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529089166024820152604401600060405180830381600087803b15801561144057600080fd5b505af1158015611454573d6000803e3d6000fd5b50506008546001600160a01b031691506336144c9a9050336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156114b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d49190612e7d565b90505b6114e38933878b612270565b6009546001600160a01b031615611589576009546001600160a01b031663afea5d558a83336040516001600160e01b031960e086901b16815260048101939093526001600160a01b039182166024840152166044820152606481018b90526084016020604051808303816000875af1158015611563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115879190612e60565b505b505b815461159990600190612e30565b815160808084015160c0850151604080519485526020850192909252151583820152426060840152518b9233927f42ca3e556bfff174f2df01f4d630ae56cd8a109430c8058a83541d2f8949f64f92918290030190a45050505050505050565b60008281526020819052604090206001015461161481612263565b61161e83836125d7565b505050565b6001600160a01b03811633146116935760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161074a565b61169d828261265b565b5050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561177e576000848152602090819020604080516101a081018252600d86029092018054835260018082015460ff161515848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a810154610140840152600b810154610160840152600c015461018083015290835290920191016116c5565b50505050905090565b600061179281612263565b81600184815481106117a6576117a6612dcd565b90600052602060002090600d020160020181905550505050565b6000600183815481106117d5576117d5612dcd565b60009182526020808320868452600290915260408320600d909202019250816117fb3390565b6001600160a01b03166001600160a01b031681526020019081526020016000209050600081600001848154811061183457611834612dcd565b60009182526020909120600690910201600581015490915060ff161561189c5760405162461bcd60e51b815260206004820152601860248201527f5374616b6520697320616c726561647920636c61696d65640000000000000000604482015260640161074a565b42816002015411156118e95760405162461bcd60e51b815260206004820152601660248201527514dd185ad9481a5cc81b9bdd081c9958591e481e595d60521b604482015260640161074a565b60006118f4826126c0565b60058301805460ff191660011790556006549091506001600160a01b036101009091041663a9059cbb6119243390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611971573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119959190612e60565b50808360020160008282546119aa9190612e18565b925050819055508084600c0160008282546119c59190612e18565b90915550506005820154610100900460ff1615611a185781546004840180546000906119f2908490612e30565b90915550508154600b85018054600090611a0d908490612e30565b90915550611a4f9050565b8154600384018054600090611a2e908490612e30565b90915550508154600a85018054600090611a49908490612e30565b90915550505b60058201548590879033907f14346b96e636bce3fdf42a5ed73f91c82b085304530c1acdc09e1896fb4ccef9908590610100900460ff16426040805193845291151560208401529082015260600160405180910390a4505050505050565b60008381526002602090815260408083206001600160a01b038616845290915281208054611af9919084908110611ae657611ae6612dcd565b90600052602060002090600602016126c0565b949350505050565b60015460609060009067ffffffffffffffff811115611b2257611b22612e9a565b604051908082528060200260200182016040528015611b8757816020015b611b746040518060a00160405280600081526020016000815260200160008152602001600015158152602001600081525090565b815260200190600190039081611b405790505b50905060005b600154811015611bd157611ba181856121bf565b828281518110611bb357611bb3612dcd565b60200260200101819052508080611bc990612eb0565b915050611b8d565b5092915050565b6000611be381612263565b50600555565b60008281526002602090815260408083206001600160a01b03851684529091528120546060918167ffffffffffffffff811115611c2857611c28612e9a565b604051908082528060200260200182016040528015611c6157816020015b611c4e612954565b815260200190600190039081611c465790505b50905060005b82811015611dc45760008681526002602090815260408083206001600160a01b03891684529091529020805482908110611ca357611ca3612dcd565b60009182526020918290206040805160e081018252600690930290910180548352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff808216151560a084015261010090910416151560c08201528251839083908110611d2157611d21612dcd565b602002602001015160000181905250818181518110611d4257611d42612dcd565b60200260200101516000015160a00151611db25760008681526002602090815260408083206001600160a01b038916845290915290208054611d8f919083908110611ae657611ae6612dcd565b828281518110611da157611da1612dcd565b602002602001015160200181815250505b80611dbc81612eb0565b915050611c67565b50949350505050565b60018181548110611ddd57600080fd5b90600052602060002090600d02016000915090508060000154908060010160009054906101000a900460ff169080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a01549080600b01549080600c015490508d565b6000611e5b81612263565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000611eb281612263565b506006805460ff1916911515919091179055565b60008181526002602090815260408083203384529091528120905b815481101561161e57818181548110611efc57611efc612dcd565b600091825260209091206005600690920201015460ff16158015611f43575042828281548110611f2e57611f2e612dcd565b90600052602060002090600602016002015411155b15611f5257611f5283826117c0565b80611f5c81612eb0565b915050611ee1565b6000805b600154811015611f9c57611f7c8184612055565b15611f8a5750600192915050565b80611f9481612eb0565b915050611f68565b50600092915050565b600060035460018481548110611fbd57611fbd612dcd565b90600052602060002090600d02016004015461016d60018681548110611fe557611fe5612dcd565b90600052602060002090600d020160050154856120029190612df9565b61200c9190612ecb565b6120169190612df9565b6120209190612ecb565b9392505050565b600061203281612263565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526002602090815260408084206001600160a01b03939093168452919052902060010154421090565b600061208d81612263565b81600184815481106120a1576120a1612dcd565b90600052602060002090600d020160040181905550505050565b60006120c681612263565b81600184815481106120da576120da612dcd565b90600052602060002090600d020160050181905550505050565b60006120ff81612263565b816001848154811061211357612113612dcd565b90600052602060002090600d020160030181905550505050565b600061213881612263565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526020819052604090206001015461217681612263565b61161e838361265b565b600061218b81612263565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006121b981612263565b50600455565b6121f36040518060a00160405280600081526020016000815260200160008152602001600015158152602001600081525090565b60008381526002602081815260408084206001600160a01b03871685528252808420815160a0810183529381015484526003810154928401929092526004820154908301529190606081016122488787612055565b15158152600190930154602090930192909252509392505050565b61226d8133612754565b50565b6008546040805163070d451f60e01b815290516000926001600160a01b03169163070d451f9160048083019260209291908290030181865afa1580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de9190612e47565b90508360015b8281116125ce57600854604051631b0a264d60e11b81526001600160a01b03848116600483015260009216906336144c9a90602401602060405180830381865afa158015612336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235a9190612e7d565b90506001600160a01b038116156125b5576008546040516303fea6cb60e11b81526001600160a01b038381166004830152602482018590526000926001929116906307fd4d9690604401602060405180830381865afa1580156123c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e59190612e60565b156124bf576008546040516384197dbb60e01b8152600481018a9052602481018690526001600160a01b03909116906384197dbb90604401602060405180830381865afa15801561243a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245e9190612e47565b60008b81526002602090815260408083206001600160a01b03881684529091529020600301549092508061249557600291506124ab565b808311156124a657600391506124ab565b600091505b808311156124b957806124bb565b825b9250505b6008546040805160e0810182526001600160a01b038681168252602082018690528c81168284015260608201889052608082018b905260a082018e905260c082018590529151639581f52760e01b81529190921691639581f52791612579919060040181516001600160a01b0390811682526020808401519083015260408084015190911690820152606080830151908201526080808301519082015260a0828101519082015260c0918201519181019190915260e00190565b600060405180830381600087803b15801561259357600080fd5b505af11580156125a7573d6000803e3d6000fd5b5050505082945050506125bb565b506125ce565b50806125c681612eb0565b9150506122e4565b50505050505050565b6125e18282611e7e565b61169d576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556126173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6126658282611e7e565b1561169d576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008160010154600014806126d95750600582015460ff165b156126e657506000919050565b6005820154600090610100900460ff16612710576004830154835461270b9190612e18565b612716565b82600401545b9050428360020154116127295792915050565b8260010154836002015461273d9190612e30565b81846001015461274a4290565b61200c9190612e30565b61275e8282611e7e565b61169d57612776816001600160a01b031660146127b8565b6127818360206127b8565b604051602001612792929190612f1d565b60408051601f198184030181529082905262461bcd60e51b825261074a91600401612f92565b606060006127c7836002612df9565b6127d2906002612e18565b67ffffffffffffffff8111156127ea576127ea612e9a565b6040519080825280601f01601f191660200182016040528015612814576020820181803683370190505b509050600360fc1b8160008151811061282f5761282f612dcd565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061285e5761285e612dcd565b60200101906001600160f81b031916908160001a9053506000612882846002612df9565b61288d906001612e18565b90505b6001811115612905576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106128c1576128c1612dcd565b1a60f81b8282815181106128d7576128d7612dcd565b60200101906001600160f81b031916908160001a90535060049490941c936128fe81612fc5565b9050612890565b5083156120205760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161074a565b60405180604001604052806129a36040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001600081525090565b6000602082840312156129c257600080fd5b81356001600160e01b03198116811461202057600080fd5b6001600160a01b038116811461226d57600080fd5b600060208284031215612a0157600080fd5b8135612020816129da565b600060208284031215612a1e57600080fd5b5035919050565b60008060408385031215612a3857600080fd5b823591506020830135612a4a816129da565b809150509250929050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a083015260c0810151151560c08301525050565b6020808252825182820181905260009190848201906040850190845b81811015612adf57612acc838551612a55565b9284019260e09290920191600101612ab9565b50909695505050505050565b60008060008060808587031215612b0157600080fd5b5050823594602084013594506040840135936060013592509050565b801515811461226d57600080fd5b60008060408385031215612b3e57600080fd5b823591506020830135612a4a81612b1d565b60008060008060808587031215612b6657600080fd5b84359350602085013592506040850135612b7f81612b1d565b91506060850135612b8f816129da565b939692955090935050565b602080825282518282018190526000919060409081850190868401855b82811015612c5357815180518552868101511515878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e08082015190860152610100808201519086015261012080820151908601526101408082015190860152610160808201519086015261018090810151908501526101a09093019290850190600101612bb7565b5091979650505050505050565b60008060408385031215612c7357600080fd5b50508035926020909101359150565b600080600060608486031215612c9757600080fd5b833592506020840135612ca9816129da565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b81811015612adf57612d16838551805182526020810151602083015260408101516040830152606081015115156060830152608081015160808301525050565b9284019260a09290920191600101612cd6565b6020808252825182820181905260009190848201906040850190845b81811015612adf578351612d5a848251612a55565b85015160e08401529284019261010090920191600101612d45565b600060208284031215612d8757600080fd5b813561202081612b1d565b60a081016106988284805182526020810151602083015260408101516040830152606081015115156060830152608081015160808301525050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612e1357612e13612de3565b500290565b60008219821115612e2b57612e2b612de3565b500190565b600082821015612e4257612e42612de3565b500390565b600060208284031215612e5957600080fd5b5051919050565b600060208284031215612e7257600080fd5b815161202081612b1d565b600060208284031215612e8f57600080fd5b8151612020816129da565b634e487b7160e01b600052604160045260246000fd5b6000600019821415612ec457612ec4612de3565b5060010190565b600082612ee857634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015612f08578181015183820152602001612ef0565b83811115612f17576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612f55816017850160208801612eed565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f86816028840160208801612eed565b01602801949350505050565b6020815260008251806020840152612fb1816040850160208701612eed565b601f01601f19169190910160400192915050565b600081612fd457612fd4612de3565b50600019019056fea2646970667358221220f9e7d97554887841b68ec6957f3656eb18633b8e8131b0ba514adf5aa548c4a864736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 178,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)173_storage)"
      },
      {
        "astId": 10050,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingPlans",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(StakingPlan)13411_storage)dyn_storage"
      },
      {
        "astId": 10057,
        "contract": "contracts/Staking.sol:Staking",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Staker)13439_storage))"
      },
      {
        "astId": 10060,
        "contract": "contracts/Staking.sol:Staking",
        "label": "BASE_POINTS_DIVIDER",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 10063,
        "contract": "contracts/Staking.sol:Staking",
        "label": "TIME_STEP",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10068,
        "contract": "contracts/Staking.sol:Staking",
        "label": "MIN_STAKE_LIMIT",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10070,
        "contract": "contracts/Staking.sol:Staking",
        "label": "shouldAddReferrerOnToken2Stake",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 10073,
        "contract": "contracts/Staking.sol:Staking",
        "label": "token1",
        "offset": 1,
        "slot": "6",
        "type": "t_contract(ERC20Burnable)3161"
      },
      {
        "astId": 10076,
        "contract": "contracts/Staking.sol:Staking",
        "label": "token2",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ERC20Burnable)3161"
      },
      {
        "astId": 10079,
        "contract": "contracts/Staking.sol:Staking",
        "label": "referralManager",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IReferralManager)13265"
      },
      {
        "astId": 10082,
        "contract": "contracts/Staking.sol:Staking",
        "label": "squadsManager",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ISquads)13382"
      },
      {
        "astId": 10084,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardPool",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Stake)13426_storage)dyn_storage": {
        "base": "t_struct(Stake)13426_storage",
        "encoding": "dynamic_array",
        "label": "struct IStaking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StakingPlan)13411_storage)dyn_storage": {
        "base": "t_struct(StakingPlan)13411_storage",
        "encoding": "dynamic_array",
        "label": "struct IStaking.StakingPlan[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Burnable)3161": {
        "encoding": "inplace",
        "label": "contract ERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralManager)13265": {
        "encoding": "inplace",
        "label": "contract IReferralManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISquads)13382": {
        "encoding": "inplace",
        "label": "contract ISquads",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Staker)13439_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStaking.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)13439_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)173_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)173_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Staker)13439_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IStaking.Staker))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Staker)13439_storage)"
      },
      "t_struct(RoleData)173_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 170,
            "contract": "contracts/Staking.sol:Staking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 172,
            "contract": "contracts/Staking.sol:Staking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)13426_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.Stake",
        "members": [
          {
            "astId": 13413,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13415,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13417,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeEnd",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13419,
            "contract": "contracts/Staking.sol:Staking",
            "label": "apr",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13421,
            "contract": "contracts/Staking.sol:Staking",
            "label": "profit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13423,
            "contract": "contracts/Staking.sol:Staking",
            "label": "isClaimed",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 13425,
            "contract": "contracts/Staking.sol:Staking",
            "label": "isToken2",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Staker)13439_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.Staker",
        "members": [
          {
            "astId": 13430,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Stake)13426_storage)dyn_storage"
          },
          {
            "astId": 13432,
            "contract": "contracts/Staking.sol:Staking",
            "label": "subscription",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13434,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13436,
            "contract": "contracts/Staking.sol:Staking",
            "label": "currentToken1Staked",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13438,
            "contract": "contracts/Staking.sol:Staking",
            "label": "currentToken2Staked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StakingPlan)13411_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.StakingPlan",
        "members": [
          {
            "astId": 13386,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakingPlanId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13388,
            "contract": "contracts/Staking.sol:Staking",
            "label": "isActive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 13390,
            "contract": "contracts/Staking.sol:Staking",
            "label": "subscriptionCost",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13392,
            "contract": "contracts/Staking.sol:Staking",
            "label": "subscriptionDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13394,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakingDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13396,
            "contract": "contracts/Staking.sol:Staking",
            "label": "apr",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13398,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakesToken1No",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13400,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakesToken2No",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 13402,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakedToken1",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 13404,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStakedToken2",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 13406,
            "contract": "contracts/Staking.sol:Staking",
            "label": "currentToken1Locked",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 13408,
            "contract": "contracts/Staking.sol:Staking",
            "label": "currentToken2Locked",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 13410,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}